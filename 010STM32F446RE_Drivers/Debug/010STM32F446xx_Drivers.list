
010STM32F446xx_Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001374  080001c8  080001c8  000011c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800153c  0800153c  00003010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800153c  0800153c  00003010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800153c  0800153c  0000253c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001544  08001544  00003010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001544  08001544  00002544  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001548  08001548  00002548  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  0800154c  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000028  20000010  0800155c  00003010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000038  0800155c  00003038  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00003010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000013fa  00000000  00000000  0000303a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000553  00000000  00000000  00004434  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000148  00000000  00000000  00004988  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000000ec  00000000  00000000  00004ad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002549  00000000  00000000  00004bbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001b5f  00000000  00000000  00007105  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00009f70  00000000  00000000  00008c64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00012bd4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000055c  00000000  00000000  00012c18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  00013174  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000010 	.word	0x20000010
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08001524 	.word	0x08001524

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000014 	.word	0x20000014
 8000204:	08001524 	.word	0x08001524

08000208 <strlen>:
 8000208:	4603      	mov	r3, r0
 800020a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020e:	2a00      	cmp	r2, #0
 8000210:	d1fb      	bne.n	800020a <strlen+0x2>
 8000212:	1a18      	subs	r0, r3, r0
 8000214:	3801      	subs	r0, #1
 8000216:	4770      	bx	lr

08000218 <__aeabi_dmul>:
 8000218:	b570      	push	{r4, r5, r6, lr}
 800021a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800021e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000222:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000226:	bf1d      	ittte	ne
 8000228:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800022c:	ea94 0f0c 	teqne	r4, ip
 8000230:	ea95 0f0c 	teqne	r5, ip
 8000234:	f000 f8de 	bleq	80003f4 <__aeabi_dmul+0x1dc>
 8000238:	442c      	add	r4, r5
 800023a:	ea81 0603 	eor.w	r6, r1, r3
 800023e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000242:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000246:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800024a:	bf18      	it	ne
 800024c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000250:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000254:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000258:	d038      	beq.n	80002cc <__aeabi_dmul+0xb4>
 800025a:	fba0 ce02 	umull	ip, lr, r0, r2
 800025e:	f04f 0500 	mov.w	r5, #0
 8000262:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000266:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800026a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800026e:	f04f 0600 	mov.w	r6, #0
 8000272:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000276:	f09c 0f00 	teq	ip, #0
 800027a:	bf18      	it	ne
 800027c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000280:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000284:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000288:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800028c:	d204      	bcs.n	8000298 <__aeabi_dmul+0x80>
 800028e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000292:	416d      	adcs	r5, r5
 8000294:	eb46 0606 	adc.w	r6, r6, r6
 8000298:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800029c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80002b0:	bf88      	it	hi
 80002b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80002b6:	d81e      	bhi.n	80002f6 <__aeabi_dmul+0xde>
 80002b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80002bc:	bf08      	it	eq
 80002be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002c2:	f150 0000 	adcs.w	r0, r0, #0
 80002c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ca:	bd70      	pop	{r4, r5, r6, pc}
 80002cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80002d0:	ea46 0101 	orr.w	r1, r6, r1
 80002d4:	ea40 0002 	orr.w	r0, r0, r2
 80002d8:	ea81 0103 	eor.w	r1, r1, r3
 80002dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002e0:	bfc2      	ittt	gt
 80002e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002ea:	bd70      	popgt	{r4, r5, r6, pc}
 80002ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002f0:	f04f 0e00 	mov.w	lr, #0
 80002f4:	3c01      	subs	r4, #1
 80002f6:	f300 80ab 	bgt.w	8000450 <__aeabi_dmul+0x238>
 80002fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80002fe:	bfde      	ittt	le
 8000300:	2000      	movle	r0, #0
 8000302:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000306:	bd70      	pople	{r4, r5, r6, pc}
 8000308:	f1c4 0400 	rsb	r4, r4, #0
 800030c:	3c20      	subs	r4, #32
 800030e:	da35      	bge.n	800037c <__aeabi_dmul+0x164>
 8000310:	340c      	adds	r4, #12
 8000312:	dc1b      	bgt.n	800034c <__aeabi_dmul+0x134>
 8000314:	f104 0414 	add.w	r4, r4, #20
 8000318:	f1c4 0520 	rsb	r5, r4, #32
 800031c:	fa00 f305 	lsl.w	r3, r0, r5
 8000320:	fa20 f004 	lsr.w	r0, r0, r4
 8000324:	fa01 f205 	lsl.w	r2, r1, r5
 8000328:	ea40 0002 	orr.w	r0, r0, r2
 800032c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000330:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000334:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000338:	fa21 f604 	lsr.w	r6, r1, r4
 800033c:	eb42 0106 	adc.w	r1, r2, r6
 8000340:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000344:	bf08      	it	eq
 8000346:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800034a:	bd70      	pop	{r4, r5, r6, pc}
 800034c:	f1c4 040c 	rsb	r4, r4, #12
 8000350:	f1c4 0520 	rsb	r5, r4, #32
 8000354:	fa00 f304 	lsl.w	r3, r0, r4
 8000358:	fa20 f005 	lsr.w	r0, r0, r5
 800035c:	fa01 f204 	lsl.w	r2, r1, r4
 8000360:	ea40 0002 	orr.w	r0, r0, r2
 8000364:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000368:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000374:	bf08      	it	eq
 8000376:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800037a:	bd70      	pop	{r4, r5, r6, pc}
 800037c:	f1c4 0520 	rsb	r5, r4, #32
 8000380:	fa00 f205 	lsl.w	r2, r0, r5
 8000384:	ea4e 0e02 	orr.w	lr, lr, r2
 8000388:	fa20 f304 	lsr.w	r3, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea43 0302 	orr.w	r3, r3, r2
 8000394:	fa21 f004 	lsr.w	r0, r1, r4
 8000398:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800039c:	fa21 f204 	lsr.w	r2, r1, r4
 80003a0:	ea20 0002 	bic.w	r0, r0, r2
 80003a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f094 0f00 	teq	r4, #0
 80003b8:	d10f      	bne.n	80003da <__aeabi_dmul+0x1c2>
 80003ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80003be:	0040      	lsls	r0, r0, #1
 80003c0:	eb41 0101 	adc.w	r1, r1, r1
 80003c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80003c8:	bf08      	it	eq
 80003ca:	3c01      	subeq	r4, #1
 80003cc:	d0f7      	beq.n	80003be <__aeabi_dmul+0x1a6>
 80003ce:	ea41 0106 	orr.w	r1, r1, r6
 80003d2:	f095 0f00 	teq	r5, #0
 80003d6:	bf18      	it	ne
 80003d8:	4770      	bxne	lr
 80003da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80003de:	0052      	lsls	r2, r2, #1
 80003e0:	eb43 0303 	adc.w	r3, r3, r3
 80003e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80003e8:	bf08      	it	eq
 80003ea:	3d01      	subeq	r5, #1
 80003ec:	d0f7      	beq.n	80003de <__aeabi_dmul+0x1c6>
 80003ee:	ea43 0306 	orr.w	r3, r3, r6
 80003f2:	4770      	bx	lr
 80003f4:	ea94 0f0c 	teq	r4, ip
 80003f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003fc:	bf18      	it	ne
 80003fe:	ea95 0f0c 	teqne	r5, ip
 8000402:	d00c      	beq.n	800041e <__aeabi_dmul+0x206>
 8000404:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000408:	bf18      	it	ne
 800040a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800040e:	d1d1      	bne.n	80003b4 <__aeabi_dmul+0x19c>
 8000410:	ea81 0103 	eor.w	r1, r1, r3
 8000414:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000418:	f04f 0000 	mov.w	r0, #0
 800041c:	bd70      	pop	{r4, r5, r6, pc}
 800041e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000422:	bf06      	itte	eq
 8000424:	4610      	moveq	r0, r2
 8000426:	4619      	moveq	r1, r3
 8000428:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800042c:	d019      	beq.n	8000462 <__aeabi_dmul+0x24a>
 800042e:	ea94 0f0c 	teq	r4, ip
 8000432:	d102      	bne.n	800043a <__aeabi_dmul+0x222>
 8000434:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000438:	d113      	bne.n	8000462 <__aeabi_dmul+0x24a>
 800043a:	ea95 0f0c 	teq	r5, ip
 800043e:	d105      	bne.n	800044c <__aeabi_dmul+0x234>
 8000440:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000444:	bf1c      	itt	ne
 8000446:	4610      	movne	r0, r2
 8000448:	4619      	movne	r1, r3
 800044a:	d10a      	bne.n	8000462 <__aeabi_dmul+0x24a>
 800044c:	ea81 0103 	eor.w	r1, r1, r3
 8000450:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000454:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd70      	pop	{r4, r5, r6, pc}
 8000462:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000466:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800046a:	bd70      	pop	{r4, r5, r6, pc}

0800046c <__aeabi_drsub>:
 800046c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000470:	e002      	b.n	8000478 <__adddf3>
 8000472:	bf00      	nop

08000474 <__aeabi_dsub>:
 8000474:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000478 <__adddf3>:
 8000478:	b530      	push	{r4, r5, lr}
 800047a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800047e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000482:	ea94 0f05 	teq	r4, r5
 8000486:	bf08      	it	eq
 8000488:	ea90 0f02 	teqeq	r0, r2
 800048c:	bf1f      	itttt	ne
 800048e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000492:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000496:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800049a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800049e:	f000 80e2 	beq.w	8000666 <__adddf3+0x1ee>
 80004a2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004a6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004aa:	bfb8      	it	lt
 80004ac:	426d      	neglt	r5, r5
 80004ae:	dd0c      	ble.n	80004ca <__adddf3+0x52>
 80004b0:	442c      	add	r4, r5
 80004b2:	ea80 0202 	eor.w	r2, r0, r2
 80004b6:	ea81 0303 	eor.w	r3, r1, r3
 80004ba:	ea82 0000 	eor.w	r0, r2, r0
 80004be:	ea83 0101 	eor.w	r1, r3, r1
 80004c2:	ea80 0202 	eor.w	r2, r0, r2
 80004c6:	ea81 0303 	eor.w	r3, r1, r3
 80004ca:	2d36      	cmp	r5, #54	@ 0x36
 80004cc:	bf88      	it	hi
 80004ce:	bd30      	pophi	{r4, r5, pc}
 80004d0:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80004d4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004d8:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80004dc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004e0:	d002      	beq.n	80004e8 <__adddf3+0x70>
 80004e2:	4240      	negs	r0, r0
 80004e4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004e8:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80004ec:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004f0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004f4:	d002      	beq.n	80004fc <__adddf3+0x84>
 80004f6:	4252      	negs	r2, r2
 80004f8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004fc:	ea94 0f05 	teq	r4, r5
 8000500:	f000 80a7 	beq.w	8000652 <__adddf3+0x1da>
 8000504:	f1a4 0401 	sub.w	r4, r4, #1
 8000508:	f1d5 0e20 	rsbs	lr, r5, #32
 800050c:	db0d      	blt.n	800052a <__adddf3+0xb2>
 800050e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000512:	fa22 f205 	lsr.w	r2, r2, r5
 8000516:	1880      	adds	r0, r0, r2
 8000518:	f141 0100 	adc.w	r1, r1, #0
 800051c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000520:	1880      	adds	r0, r0, r2
 8000522:	fa43 f305 	asr.w	r3, r3, r5
 8000526:	4159      	adcs	r1, r3
 8000528:	e00e      	b.n	8000548 <__adddf3+0xd0>
 800052a:	f1a5 0520 	sub.w	r5, r5, #32
 800052e:	f10e 0e20 	add.w	lr, lr, #32
 8000532:	2a01      	cmp	r2, #1
 8000534:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000538:	bf28      	it	cs
 800053a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800053e:	fa43 f305 	asr.w	r3, r3, r5
 8000542:	18c0      	adds	r0, r0, r3
 8000544:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000548:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800054c:	d507      	bpl.n	800055e <__adddf3+0xe6>
 800054e:	f04f 0e00 	mov.w	lr, #0
 8000552:	f1dc 0c00 	rsbs	ip, ip, #0
 8000556:	eb7e 0000 	sbcs.w	r0, lr, r0
 800055a:	eb6e 0101 	sbc.w	r1, lr, r1
 800055e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000562:	d31b      	bcc.n	800059c <__adddf3+0x124>
 8000564:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000568:	d30c      	bcc.n	8000584 <__adddf3+0x10c>
 800056a:	0849      	lsrs	r1, r1, #1
 800056c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000570:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000574:	f104 0401 	add.w	r4, r4, #1
 8000578:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800057c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000580:	f080 809a 	bcs.w	80006b8 <__adddf3+0x240>
 8000584:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000588:	bf08      	it	eq
 800058a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800058e:	f150 0000 	adcs.w	r0, r0, #0
 8000592:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000596:	ea41 0105 	orr.w	r1, r1, r5
 800059a:	bd30      	pop	{r4, r5, pc}
 800059c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005a0:	4140      	adcs	r0, r0
 80005a2:	eb41 0101 	adc.w	r1, r1, r1
 80005a6:	3c01      	subs	r4, #1
 80005a8:	bf28      	it	cs
 80005aa:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80005ae:	d2e9      	bcs.n	8000584 <__adddf3+0x10c>
 80005b0:	f091 0f00 	teq	r1, #0
 80005b4:	bf04      	itt	eq
 80005b6:	4601      	moveq	r1, r0
 80005b8:	2000      	moveq	r0, #0
 80005ba:	fab1 f381 	clz	r3, r1
 80005be:	bf08      	it	eq
 80005c0:	3320      	addeq	r3, #32
 80005c2:	f1a3 030b 	sub.w	r3, r3, #11
 80005c6:	f1b3 0220 	subs.w	r2, r3, #32
 80005ca:	da0c      	bge.n	80005e6 <__adddf3+0x16e>
 80005cc:	320c      	adds	r2, #12
 80005ce:	dd08      	ble.n	80005e2 <__adddf3+0x16a>
 80005d0:	f102 0c14 	add.w	ip, r2, #20
 80005d4:	f1c2 020c 	rsb	r2, r2, #12
 80005d8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005dc:	fa21 f102 	lsr.w	r1, r1, r2
 80005e0:	e00c      	b.n	80005fc <__adddf3+0x184>
 80005e2:	f102 0214 	add.w	r2, r2, #20
 80005e6:	bfd8      	it	le
 80005e8:	f1c2 0c20 	rsble	ip, r2, #32
 80005ec:	fa01 f102 	lsl.w	r1, r1, r2
 80005f0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005f4:	bfdc      	itt	le
 80005f6:	ea41 010c 	orrle.w	r1, r1, ip
 80005fa:	4090      	lslle	r0, r2
 80005fc:	1ae4      	subs	r4, r4, r3
 80005fe:	bfa2      	ittt	ge
 8000600:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000604:	4329      	orrge	r1, r5
 8000606:	bd30      	popge	{r4, r5, pc}
 8000608:	ea6f 0404 	mvn.w	r4, r4
 800060c:	3c1f      	subs	r4, #31
 800060e:	da1c      	bge.n	800064a <__adddf3+0x1d2>
 8000610:	340c      	adds	r4, #12
 8000612:	dc0e      	bgt.n	8000632 <__adddf3+0x1ba>
 8000614:	f104 0414 	add.w	r4, r4, #20
 8000618:	f1c4 0220 	rsb	r2, r4, #32
 800061c:	fa20 f004 	lsr.w	r0, r0, r4
 8000620:	fa01 f302 	lsl.w	r3, r1, r2
 8000624:	ea40 0003 	orr.w	r0, r0, r3
 8000628:	fa21 f304 	lsr.w	r3, r1, r4
 800062c:	ea45 0103 	orr.w	r1, r5, r3
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	f1c4 040c 	rsb	r4, r4, #12
 8000636:	f1c4 0220 	rsb	r2, r4, #32
 800063a:	fa20 f002 	lsr.w	r0, r0, r2
 800063e:	fa01 f304 	lsl.w	r3, r1, r4
 8000642:	ea40 0003 	orr.w	r0, r0, r3
 8000646:	4629      	mov	r1, r5
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	fa21 f004 	lsr.w	r0, r1, r4
 800064e:	4629      	mov	r1, r5
 8000650:	bd30      	pop	{r4, r5, pc}
 8000652:	f094 0f00 	teq	r4, #0
 8000656:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800065a:	bf06      	itte	eq
 800065c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000660:	3401      	addeq	r4, #1
 8000662:	3d01      	subne	r5, #1
 8000664:	e74e      	b.n	8000504 <__adddf3+0x8c>
 8000666:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800066a:	bf18      	it	ne
 800066c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000670:	d029      	beq.n	80006c6 <__adddf3+0x24e>
 8000672:	ea94 0f05 	teq	r4, r5
 8000676:	bf08      	it	eq
 8000678:	ea90 0f02 	teqeq	r0, r2
 800067c:	d005      	beq.n	800068a <__adddf3+0x212>
 800067e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000682:	bf04      	itt	eq
 8000684:	4619      	moveq	r1, r3
 8000686:	4610      	moveq	r0, r2
 8000688:	bd30      	pop	{r4, r5, pc}
 800068a:	ea91 0f03 	teq	r1, r3
 800068e:	bf1e      	ittt	ne
 8000690:	2100      	movne	r1, #0
 8000692:	2000      	movne	r0, #0
 8000694:	bd30      	popne	{r4, r5, pc}
 8000696:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800069a:	d105      	bne.n	80006a8 <__adddf3+0x230>
 800069c:	0040      	lsls	r0, r0, #1
 800069e:	4149      	adcs	r1, r1
 80006a0:	bf28      	it	cs
 80006a2:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80006a6:	bd30      	pop	{r4, r5, pc}
 80006a8:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80006ac:	bf3c      	itt	cc
 80006ae:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80006b2:	bd30      	popcc	{r4, r5, pc}
 80006b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006b8:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80006bc:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80006c0:	f04f 0000 	mov.w	r0, #0
 80006c4:	bd30      	pop	{r4, r5, pc}
 80006c6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006ca:	bf1a      	itte	ne
 80006cc:	4619      	movne	r1, r3
 80006ce:	4610      	movne	r0, r2
 80006d0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006d4:	bf1c      	itt	ne
 80006d6:	460b      	movne	r3, r1
 80006d8:	4602      	movne	r2, r0
 80006da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006de:	bf06      	itte	eq
 80006e0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006e4:	ea91 0f03 	teqeq	r1, r3
 80006e8:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80006ec:	bd30      	pop	{r4, r5, pc}
 80006ee:	bf00      	nop

080006f0 <__aeabi_ui2d>:
 80006f0:	f090 0f00 	teq	r0, #0
 80006f4:	bf04      	itt	eq
 80006f6:	2100      	moveq	r1, #0
 80006f8:	4770      	bxeq	lr
 80006fa:	b530      	push	{r4, r5, lr}
 80006fc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000700:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000704:	f04f 0500 	mov.w	r5, #0
 8000708:	f04f 0100 	mov.w	r1, #0
 800070c:	e750      	b.n	80005b0 <__adddf3+0x138>
 800070e:	bf00      	nop

08000710 <__aeabi_i2d>:
 8000710:	f090 0f00 	teq	r0, #0
 8000714:	bf04      	itt	eq
 8000716:	2100      	moveq	r1, #0
 8000718:	4770      	bxeq	lr
 800071a:	b530      	push	{r4, r5, lr}
 800071c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000720:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000724:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000728:	bf48      	it	mi
 800072a:	4240      	negmi	r0, r0
 800072c:	f04f 0100 	mov.w	r1, #0
 8000730:	e73e      	b.n	80005b0 <__adddf3+0x138>
 8000732:	bf00      	nop

08000734 <__aeabi_f2d>:
 8000734:	0042      	lsls	r2, r0, #1
 8000736:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800073a:	ea4f 0131 	mov.w	r1, r1, rrx
 800073e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000742:	bf1f      	itttt	ne
 8000744:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000748:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 800074c:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000750:	4770      	bxne	lr
 8000752:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000756:	bf08      	it	eq
 8000758:	4770      	bxeq	lr
 800075a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800075e:	bf04      	itt	eq
 8000760:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000764:	4770      	bxeq	lr
 8000766:	b530      	push	{r4, r5, lr}
 8000768:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800076c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000774:	e71c      	b.n	80005b0 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_ul2d>:
 8000778:	ea50 0201 	orrs.w	r2, r0, r1
 800077c:	bf08      	it	eq
 800077e:	4770      	bxeq	lr
 8000780:	b530      	push	{r4, r5, lr}
 8000782:	f04f 0500 	mov.w	r5, #0
 8000786:	e00a      	b.n	800079e <__aeabi_l2d+0x16>

08000788 <__aeabi_l2d>:
 8000788:	ea50 0201 	orrs.w	r2, r0, r1
 800078c:	bf08      	it	eq
 800078e:	4770      	bxeq	lr
 8000790:	b530      	push	{r4, r5, lr}
 8000792:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000796:	d502      	bpl.n	800079e <__aeabi_l2d+0x16>
 8000798:	4240      	negs	r0, r0
 800079a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800079e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007a2:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007a6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007aa:	f43f aed8 	beq.w	800055e <__adddf3+0xe6>
 80007ae:	f04f 0203 	mov.w	r2, #3
 80007b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007b6:	bf18      	it	ne
 80007b8:	3203      	addne	r2, #3
 80007ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007be:	bf18      	it	ne
 80007c0:	3203      	addne	r2, #3
 80007c2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007c6:	f1c2 0320 	rsb	r3, r2, #32
 80007ca:	fa00 fc03 	lsl.w	ip, r0, r3
 80007ce:	fa20 f002 	lsr.w	r0, r0, r2
 80007d2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007d6:	ea40 000e 	orr.w	r0, r0, lr
 80007da:	fa21 f102 	lsr.w	r1, r1, r2
 80007de:	4414      	add	r4, r2
 80007e0:	e6bd      	b.n	800055e <__adddf3+0xe6>
 80007e2:	bf00      	nop

080007e4 <__aeabi_d2uiz>:
 80007e4:	004a      	lsls	r2, r1, #1
 80007e6:	d211      	bcs.n	800080c <__aeabi_d2uiz+0x28>
 80007e8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80007ec:	d211      	bcs.n	8000812 <__aeabi_d2uiz+0x2e>
 80007ee:	d50d      	bpl.n	800080c <__aeabi_d2uiz+0x28>
 80007f0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80007f4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007f8:	d40e      	bmi.n	8000818 <__aeabi_d2uiz+0x34>
 80007fa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007fe:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000802:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000806:	fa23 f002 	lsr.w	r0, r3, r2
 800080a:	4770      	bx	lr
 800080c:	f04f 0000 	mov.w	r0, #0
 8000810:	4770      	bx	lr
 8000812:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000816:	d102      	bne.n	800081e <__aeabi_d2uiz+0x3a>
 8000818:	f04f 30ff 	mov.w	r0, #4294967295
 800081c:	4770      	bx	lr
 800081e:	f04f 0000 	mov.w	r0, #0
 8000822:	4770      	bx	lr

08000824 <GPIO_PeripheralClkCtrl>:
 * @return		- none
 *
 * @Note 		-
 */
void GPIO_PeripheralClkCtrl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 8000824:	b480      	push	{r7}
 8000826:	b085      	sub	sp, #20
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
 800082c:	460b      	mov	r3, r1
 800082e:	70fb      	strb	r3, [r7, #3]
	 * translates the GPIO port base addresses into primitive integer data for
	 * ease of use in switch case statement or other applications that require
	 * a more primitive type of data.
	 * note: GPIO port base addresses which are pointers are not primitive data types
	 */
	uint8_t temp1 = GPIO_BASEADDR_TO_CODE(pGPIOx);
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	4a6c      	ldr	r2, [pc, #432]	@ (80009e4 <GPIO_PeripheralClkCtrl+0x1c0>)
 8000834:	4293      	cmp	r3, r2
 8000836:	d02b      	beq.n	8000890 <GPIO_PeripheralClkCtrl+0x6c>
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	4a6b      	ldr	r2, [pc, #428]	@ (80009e8 <GPIO_PeripheralClkCtrl+0x1c4>)
 800083c:	4293      	cmp	r3, r2
 800083e:	d025      	beq.n	800088c <GPIO_PeripheralClkCtrl+0x68>
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	4a6a      	ldr	r2, [pc, #424]	@ (80009ec <GPIO_PeripheralClkCtrl+0x1c8>)
 8000844:	4293      	cmp	r3, r2
 8000846:	d01f      	beq.n	8000888 <GPIO_PeripheralClkCtrl+0x64>
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	4a69      	ldr	r2, [pc, #420]	@ (80009f0 <GPIO_PeripheralClkCtrl+0x1cc>)
 800084c:	4293      	cmp	r3, r2
 800084e:	d019      	beq.n	8000884 <GPIO_PeripheralClkCtrl+0x60>
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	4a68      	ldr	r2, [pc, #416]	@ (80009f4 <GPIO_PeripheralClkCtrl+0x1d0>)
 8000854:	4293      	cmp	r3, r2
 8000856:	d013      	beq.n	8000880 <GPIO_PeripheralClkCtrl+0x5c>
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	4a67      	ldr	r2, [pc, #412]	@ (80009f8 <GPIO_PeripheralClkCtrl+0x1d4>)
 800085c:	4293      	cmp	r3, r2
 800085e:	d00d      	beq.n	800087c <GPIO_PeripheralClkCtrl+0x58>
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	4a66      	ldr	r2, [pc, #408]	@ (80009fc <GPIO_PeripheralClkCtrl+0x1d8>)
 8000864:	4293      	cmp	r3, r2
 8000866:	d007      	beq.n	8000878 <GPIO_PeripheralClkCtrl+0x54>
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	4a65      	ldr	r2, [pc, #404]	@ (8000a00 <GPIO_PeripheralClkCtrl+0x1dc>)
 800086c:	4293      	cmp	r3, r2
 800086e:	d101      	bne.n	8000874 <GPIO_PeripheralClkCtrl+0x50>
 8000870:	2307      	movs	r3, #7
 8000872:	e00e      	b.n	8000892 <GPIO_PeripheralClkCtrl+0x6e>
 8000874:	2300      	movs	r3, #0
 8000876:	e00c      	b.n	8000892 <GPIO_PeripheralClkCtrl+0x6e>
 8000878:	2306      	movs	r3, #6
 800087a:	e00a      	b.n	8000892 <GPIO_PeripheralClkCtrl+0x6e>
 800087c:	2305      	movs	r3, #5
 800087e:	e008      	b.n	8000892 <GPIO_PeripheralClkCtrl+0x6e>
 8000880:	2304      	movs	r3, #4
 8000882:	e006      	b.n	8000892 <GPIO_PeripheralClkCtrl+0x6e>
 8000884:	2303      	movs	r3, #3
 8000886:	e004      	b.n	8000892 <GPIO_PeripheralClkCtrl+0x6e>
 8000888:	2302      	movs	r3, #2
 800088a:	e002      	b.n	8000892 <GPIO_PeripheralClkCtrl+0x6e>
 800088c:	2301      	movs	r3, #1
 800088e:	e000      	b.n	8000892 <GPIO_PeripheralClkCtrl+0x6e>
 8000890:	2300      	movs	r3, #0
 8000892:	73fb      	strb	r3, [r7, #15]

	if(EnorDi == ENABLE){
 8000894:	78fb      	ldrb	r3, [r7, #3]
 8000896:	2b01      	cmp	r3, #1
 8000898:	d14e      	bne.n	8000938 <GPIO_PeripheralClkCtrl+0x114>
		/*
		 * I've used switch case statements for better readability compared to previous
		 * version of else if statements.
		 */
		switch(temp1){
 800089a:	7bfb      	ldrb	r3, [r7, #15]
 800089c:	2b07      	cmp	r3, #7
 800089e:	f200 8099 	bhi.w	80009d4 <GPIO_PeripheralClkCtrl+0x1b0>
 80008a2:	a201      	add	r2, pc, #4	@ (adr r2, 80008a8 <GPIO_PeripheralClkCtrl+0x84>)
 80008a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008a8:	080008c9 	.word	0x080008c9
 80008ac:	080008d7 	.word	0x080008d7
 80008b0:	080008e5 	.word	0x080008e5
 80008b4:	080008f3 	.word	0x080008f3
 80008b8:	08000901 	.word	0x08000901
 80008bc:	0800090f 	.word	0x0800090f
 80008c0:	0800091d 	.word	0x0800091d
 80008c4:	0800092b 	.word	0x0800092b
		case 0:
			GPIOA_PCLK_EN();
 80008c8:	4b4e      	ldr	r3, [pc, #312]	@ (8000a04 <GPIO_PeripheralClkCtrl+0x1e0>)
 80008ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008cc:	4a4d      	ldr	r2, [pc, #308]	@ (8000a04 <GPIO_PeripheralClkCtrl+0x1e0>)
 80008ce:	f043 0301 	orr.w	r3, r3, #1
 80008d2:	6313      	str	r3, [r2, #48]	@ 0x30
			break;
 80008d4:	e081      	b.n	80009da <GPIO_PeripheralClkCtrl+0x1b6>
		case 1:
			GPIOB_PCLK_EN();
 80008d6:	4b4b      	ldr	r3, [pc, #300]	@ (8000a04 <GPIO_PeripheralClkCtrl+0x1e0>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008da:	4a4a      	ldr	r2, [pc, #296]	@ (8000a04 <GPIO_PeripheralClkCtrl+0x1e0>)
 80008dc:	f043 0302 	orr.w	r3, r3, #2
 80008e0:	6313      	str	r3, [r2, #48]	@ 0x30
			break;
 80008e2:	e07a      	b.n	80009da <GPIO_PeripheralClkCtrl+0x1b6>
		case 2:
			GPIOC_PCLK_EN();
 80008e4:	4b47      	ldr	r3, [pc, #284]	@ (8000a04 <GPIO_PeripheralClkCtrl+0x1e0>)
 80008e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e8:	4a46      	ldr	r2, [pc, #280]	@ (8000a04 <GPIO_PeripheralClkCtrl+0x1e0>)
 80008ea:	f043 0304 	orr.w	r3, r3, #4
 80008ee:	6313      	str	r3, [r2, #48]	@ 0x30
			break;
 80008f0:	e073      	b.n	80009da <GPIO_PeripheralClkCtrl+0x1b6>
		case 3:
			GPIOD_PCLK_EN();
 80008f2:	4b44      	ldr	r3, [pc, #272]	@ (8000a04 <GPIO_PeripheralClkCtrl+0x1e0>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f6:	4a43      	ldr	r2, [pc, #268]	@ (8000a04 <GPIO_PeripheralClkCtrl+0x1e0>)
 80008f8:	f043 0308 	orr.w	r3, r3, #8
 80008fc:	6313      	str	r3, [r2, #48]	@ 0x30
			break;
 80008fe:	e06c      	b.n	80009da <GPIO_PeripheralClkCtrl+0x1b6>
		case 4:
			GPIOE_PCLK_EN();
 8000900:	4b40      	ldr	r3, [pc, #256]	@ (8000a04 <GPIO_PeripheralClkCtrl+0x1e0>)
 8000902:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000904:	4a3f      	ldr	r2, [pc, #252]	@ (8000a04 <GPIO_PeripheralClkCtrl+0x1e0>)
 8000906:	f043 0310 	orr.w	r3, r3, #16
 800090a:	6313      	str	r3, [r2, #48]	@ 0x30
			break;
 800090c:	e065      	b.n	80009da <GPIO_PeripheralClkCtrl+0x1b6>
		case 5:
			GPIOF_PCLK_EN();
 800090e:	4b3d      	ldr	r3, [pc, #244]	@ (8000a04 <GPIO_PeripheralClkCtrl+0x1e0>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000912:	4a3c      	ldr	r2, [pc, #240]	@ (8000a04 <GPIO_PeripheralClkCtrl+0x1e0>)
 8000914:	f043 0320 	orr.w	r3, r3, #32
 8000918:	6313      	str	r3, [r2, #48]	@ 0x30
			break;
 800091a:	e05e      	b.n	80009da <GPIO_PeripheralClkCtrl+0x1b6>
		case 6:
			GPIOG_PCLK_EN();
 800091c:	4b39      	ldr	r3, [pc, #228]	@ (8000a04 <GPIO_PeripheralClkCtrl+0x1e0>)
 800091e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000920:	4a38      	ldr	r2, [pc, #224]	@ (8000a04 <GPIO_PeripheralClkCtrl+0x1e0>)
 8000922:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000926:	6313      	str	r3, [r2, #48]	@ 0x30
			break;
 8000928:	e057      	b.n	80009da <GPIO_PeripheralClkCtrl+0x1b6>
		case 7:
			GPIOH_PCLK_EN();
 800092a:	4b36      	ldr	r3, [pc, #216]	@ (8000a04 <GPIO_PeripheralClkCtrl+0x1e0>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800092e:	4a35      	ldr	r2, [pc, #212]	@ (8000a04 <GPIO_PeripheralClkCtrl+0x1e0>)
 8000930:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000934:	6313      	str	r3, [r2, #48]	@ 0x30
			break;
 8000936:	e050      	b.n	80009da <GPIO_PeripheralClkCtrl+0x1b6>
			break;
		}

	}
	else{
		switch(temp1){
 8000938:	7bfb      	ldrb	r3, [r7, #15]
 800093a:	2b07      	cmp	r3, #7
 800093c:	d84c      	bhi.n	80009d8 <GPIO_PeripheralClkCtrl+0x1b4>
 800093e:	a201      	add	r2, pc, #4	@ (adr r2, 8000944 <GPIO_PeripheralClkCtrl+0x120>)
 8000940:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000944:	08000965 	.word	0x08000965
 8000948:	08000973 	.word	0x08000973
 800094c:	08000981 	.word	0x08000981
 8000950:	0800098f 	.word	0x0800098f
 8000954:	0800099d 	.word	0x0800099d
 8000958:	080009ab 	.word	0x080009ab
 800095c:	080009b9 	.word	0x080009b9
 8000960:	080009c7 	.word	0x080009c7
		case 0:
			GPIOA_PCLK_DI();
 8000964:	4b27      	ldr	r3, [pc, #156]	@ (8000a04 <GPIO_PeripheralClkCtrl+0x1e0>)
 8000966:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000968:	4a26      	ldr	r2, [pc, #152]	@ (8000a04 <GPIO_PeripheralClkCtrl+0x1e0>)
 800096a:	f023 0301 	bic.w	r3, r3, #1
 800096e:	6313      	str	r3, [r2, #48]	@ 0x30
			break;
 8000970:	e033      	b.n	80009da <GPIO_PeripheralClkCtrl+0x1b6>
		case 1:
			GPIOB_PCLK_DI();
 8000972:	4b24      	ldr	r3, [pc, #144]	@ (8000a04 <GPIO_PeripheralClkCtrl+0x1e0>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000976:	4a23      	ldr	r2, [pc, #140]	@ (8000a04 <GPIO_PeripheralClkCtrl+0x1e0>)
 8000978:	f023 0302 	bic.w	r3, r3, #2
 800097c:	6313      	str	r3, [r2, #48]	@ 0x30
			break;
 800097e:	e02c      	b.n	80009da <GPIO_PeripheralClkCtrl+0x1b6>
		case 2:
			GPIOC_PCLK_DI();
 8000980:	4b20      	ldr	r3, [pc, #128]	@ (8000a04 <GPIO_PeripheralClkCtrl+0x1e0>)
 8000982:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000984:	4a1f      	ldr	r2, [pc, #124]	@ (8000a04 <GPIO_PeripheralClkCtrl+0x1e0>)
 8000986:	f023 0304 	bic.w	r3, r3, #4
 800098a:	6313      	str	r3, [r2, #48]	@ 0x30
			break;
 800098c:	e025      	b.n	80009da <GPIO_PeripheralClkCtrl+0x1b6>
		case 3:
			GPIOD_PCLK_DI();
 800098e:	4b1d      	ldr	r3, [pc, #116]	@ (8000a04 <GPIO_PeripheralClkCtrl+0x1e0>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000992:	4a1c      	ldr	r2, [pc, #112]	@ (8000a04 <GPIO_PeripheralClkCtrl+0x1e0>)
 8000994:	f023 0308 	bic.w	r3, r3, #8
 8000998:	6313      	str	r3, [r2, #48]	@ 0x30
			break;
 800099a:	e01e      	b.n	80009da <GPIO_PeripheralClkCtrl+0x1b6>
		case 4:
			GPIOE_PCLK_DI();
 800099c:	4b19      	ldr	r3, [pc, #100]	@ (8000a04 <GPIO_PeripheralClkCtrl+0x1e0>)
 800099e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009a0:	4a18      	ldr	r2, [pc, #96]	@ (8000a04 <GPIO_PeripheralClkCtrl+0x1e0>)
 80009a2:	f023 0310 	bic.w	r3, r3, #16
 80009a6:	6313      	str	r3, [r2, #48]	@ 0x30
			break;
 80009a8:	e017      	b.n	80009da <GPIO_PeripheralClkCtrl+0x1b6>
		case 5:
			GPIOF_PCLK_DI();
 80009aa:	4b16      	ldr	r3, [pc, #88]	@ (8000a04 <GPIO_PeripheralClkCtrl+0x1e0>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ae:	4a15      	ldr	r2, [pc, #84]	@ (8000a04 <GPIO_PeripheralClkCtrl+0x1e0>)
 80009b0:	f023 0320 	bic.w	r3, r3, #32
 80009b4:	6313      	str	r3, [r2, #48]	@ 0x30
			break;
 80009b6:	e010      	b.n	80009da <GPIO_PeripheralClkCtrl+0x1b6>
		case 6:
			GPIOG_PCLK_DI();
 80009b8:	4b12      	ldr	r3, [pc, #72]	@ (8000a04 <GPIO_PeripheralClkCtrl+0x1e0>)
 80009ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009bc:	4a11      	ldr	r2, [pc, #68]	@ (8000a04 <GPIO_PeripheralClkCtrl+0x1e0>)
 80009be:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80009c2:	6313      	str	r3, [r2, #48]	@ 0x30
			break;
 80009c4:	e009      	b.n	80009da <GPIO_PeripheralClkCtrl+0x1b6>
		case 7:
			GPIOH_PCLK_DI();
 80009c6:	4b0f      	ldr	r3, [pc, #60]	@ (8000a04 <GPIO_PeripheralClkCtrl+0x1e0>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ca:	4a0e      	ldr	r2, [pc, #56]	@ (8000a04 <GPIO_PeripheralClkCtrl+0x1e0>)
 80009cc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80009d0:	6313      	str	r3, [r2, #48]	@ 0x30
			break;
 80009d2:	e002      	b.n	80009da <GPIO_PeripheralClkCtrl+0x1b6>
			break;
 80009d4:	bf00      	nop
 80009d6:	e000      	b.n	80009da <GPIO_PeripheralClkCtrl+0x1b6>
		default:
			break;
 80009d8:	bf00      	nop
		}

	}

}
 80009da:	bf00      	nop
 80009dc:	3714      	adds	r7, #20
 80009de:	46bd      	mov	sp, r7
 80009e0:	bc80      	pop	{r7}
 80009e2:	4770      	bx	lr
 80009e4:	40020000 	.word	0x40020000
 80009e8:	40020400 	.word	0x40020400
 80009ec:	40020800 	.word	0x40020800
 80009f0:	40020c00 	.word	0x40020c00
 80009f4:	40021000 	.word	0x40021000
 80009f8:	40021400 	.word	0x40021400
 80009fc:	40021800 	.word	0x40021800
 8000a00:	40021c00 	.word	0x40021c00
 8000a04:	40023800 	.word	0x40023800

08000a08 <GPIO_Init>:
 *
 * @Note 		-
 */

void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b086      	sub	sp, #24
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
	GPIO_PeripheralClkCtrl(pGPIOHandle->pGPIOx, ENABLE);
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	2101      	movs	r1, #1
 8000a16:	4618      	mov	r0, r3
 8000a18:	f7ff ff04 	bl	8000824 <GPIO_PeripheralClkCtrl>

	uint32_t temp=0;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	617b      	str	r3, [r7, #20]

	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <=GPIO_MODE_ANALOG ){
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	795b      	ldrb	r3, [r3, #5]
 8000a24:	2b03      	cmp	r3, #3
 8000a26:	d822      	bhi.n	8000a6e <GPIO_Init+0x66>

		//1. Configure mode of GPIO pin
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)) );
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	795b      	ldrb	r3, [r3, #5]
 8000a2c:	461a      	mov	r2, r3
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	791b      	ldrb	r3, [r3, #4]
 8000a32:	005b      	lsls	r3, r3, #1
 8000a34:	fa02 f303 	lsl.w	r3, r2, r3
 8000a38:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(3 << (2 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)) ); //clears the bit fields first before setting
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	681a      	ldr	r2, [r3, #0]
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	791b      	ldrb	r3, [r3, #4]
 8000a44:	005b      	lsls	r3, r3, #1
 8000a46:	2103      	movs	r1, #3
 8000a48:	fa01 f303 	lsl.w	r3, r1, r3
 8000a4c:	43db      	mvns	r3, r3
 8000a4e:	4619      	mov	r1, r3
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	400a      	ands	r2, r1
 8000a56:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; //sets the bit fields in the register
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	6819      	ldr	r1, [r3, #0]
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	697a      	ldr	r2, [r7, #20]
 8000a64:	430a      	orrs	r2, r1
 8000a66:	601a      	str	r2, [r3, #0]
		temp = 0;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	617b      	str	r3, [r7, #20]
 8000a6c:	e0ea      	b.n	8000c44 <GPIO_Init+0x23c>
		//1. pin must be in input configuration
		//2. configure the edge trigger (RT,FT,RFT)
		//3. ENABLE INTERRUPT DELIVERY FROM PERIPHERAL TO THE PROCEssor (on peripheral side)

		//clears bits at the same time setting to input mode since input mode is "00".
		pGPIOHandle->pGPIOx->MODER &= ~(3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	681a      	ldr	r2, [r3, #0]
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	791b      	ldrb	r3, [r3, #4]
 8000a78:	005b      	lsls	r3, r3, #1
 8000a7a:	2103      	movs	r1, #3
 8000a7c:	fa01 f303 	lsl.w	r3, r1, r3
 8000a80:	43db      	mvns	r3, r3
 8000a82:	4619      	mov	r1, r3
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	400a      	ands	r2, r1
 8000a8a:	601a      	str	r2, [r3, #0]

		switch(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode){
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	795b      	ldrb	r3, [r3, #5]
 8000a90:	2b06      	cmp	r3, #6
 8000a92:	d036      	beq.n	8000b02 <GPIO_Init+0xfa>
 8000a94:	2b06      	cmp	r3, #6
 8000a96:	dc4b      	bgt.n	8000b30 <GPIO_Init+0x128>
 8000a98:	2b04      	cmp	r3, #4
 8000a9a:	d002      	beq.n	8000aa2 <GPIO_Init+0x9a>
 8000a9c:	2b05      	cmp	r3, #5
 8000a9e:	d018      	beq.n	8000ad2 <GPIO_Init+0xca>
			//1. configure both FTSR & RTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
			break;
		default:
			break;
 8000aa0:	e046      	b.n	8000b30 <GPIO_Init+0x128>
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000aa2:	4b44      	ldr	r3, [pc, #272]	@ (8000bb4 <GPIO_Init+0x1ac>)
 8000aa4:	68db      	ldr	r3, [r3, #12]
 8000aa6:	687a      	ldr	r2, [r7, #4]
 8000aa8:	7912      	ldrb	r2, [r2, #4]
 8000aaa:	4611      	mov	r1, r2
 8000aac:	2201      	movs	r2, #1
 8000aae:	408a      	lsls	r2, r1
 8000ab0:	4611      	mov	r1, r2
 8000ab2:	4a40      	ldr	r2, [pc, #256]	@ (8000bb4 <GPIO_Init+0x1ac>)
 8000ab4:	430b      	orrs	r3, r1
 8000ab6:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000ab8:	4b3e      	ldr	r3, [pc, #248]	@ (8000bb4 <GPIO_Init+0x1ac>)
 8000aba:	689b      	ldr	r3, [r3, #8]
 8000abc:	687a      	ldr	r2, [r7, #4]
 8000abe:	7912      	ldrb	r2, [r2, #4]
 8000ac0:	4611      	mov	r1, r2
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	408a      	lsls	r2, r1
 8000ac6:	43d2      	mvns	r2, r2
 8000ac8:	4611      	mov	r1, r2
 8000aca:	4a3a      	ldr	r2, [pc, #232]	@ (8000bb4 <GPIO_Init+0x1ac>)
 8000acc:	400b      	ands	r3, r1
 8000ace:	6093      	str	r3, [r2, #8]
			break;
 8000ad0:	e02f      	b.n	8000b32 <GPIO_Init+0x12a>
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000ad2:	4b38      	ldr	r3, [pc, #224]	@ (8000bb4 <GPIO_Init+0x1ac>)
 8000ad4:	689b      	ldr	r3, [r3, #8]
 8000ad6:	687a      	ldr	r2, [r7, #4]
 8000ad8:	7912      	ldrb	r2, [r2, #4]
 8000ada:	4611      	mov	r1, r2
 8000adc:	2201      	movs	r2, #1
 8000ade:	408a      	lsls	r2, r1
 8000ae0:	4611      	mov	r1, r2
 8000ae2:	4a34      	ldr	r2, [pc, #208]	@ (8000bb4 <GPIO_Init+0x1ac>)
 8000ae4:	430b      	orrs	r3, r1
 8000ae6:	6093      	str	r3, [r2, #8]
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000ae8:	4b32      	ldr	r3, [pc, #200]	@ (8000bb4 <GPIO_Init+0x1ac>)
 8000aea:	68db      	ldr	r3, [r3, #12]
 8000aec:	687a      	ldr	r2, [r7, #4]
 8000aee:	7912      	ldrb	r2, [r2, #4]
 8000af0:	4611      	mov	r1, r2
 8000af2:	2201      	movs	r2, #1
 8000af4:	408a      	lsls	r2, r1
 8000af6:	43d2      	mvns	r2, r2
 8000af8:	4611      	mov	r1, r2
 8000afa:	4a2e      	ldr	r2, [pc, #184]	@ (8000bb4 <GPIO_Init+0x1ac>)
 8000afc:	400b      	ands	r3, r1
 8000afe:	60d3      	str	r3, [r2, #12]
			break;
 8000b00:	e017      	b.n	8000b32 <GPIO_Init+0x12a>
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000b02:	4b2c      	ldr	r3, [pc, #176]	@ (8000bb4 <GPIO_Init+0x1ac>)
 8000b04:	68db      	ldr	r3, [r3, #12]
 8000b06:	687a      	ldr	r2, [r7, #4]
 8000b08:	7912      	ldrb	r2, [r2, #4]
 8000b0a:	4611      	mov	r1, r2
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	408a      	lsls	r2, r1
 8000b10:	4611      	mov	r1, r2
 8000b12:	4a28      	ldr	r2, [pc, #160]	@ (8000bb4 <GPIO_Init+0x1ac>)
 8000b14:	430b      	orrs	r3, r1
 8000b16:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000b18:	4b26      	ldr	r3, [pc, #152]	@ (8000bb4 <GPIO_Init+0x1ac>)
 8000b1a:	689b      	ldr	r3, [r3, #8]
 8000b1c:	687a      	ldr	r2, [r7, #4]
 8000b1e:	7912      	ldrb	r2, [r2, #4]
 8000b20:	4611      	mov	r1, r2
 8000b22:	2201      	movs	r2, #1
 8000b24:	408a      	lsls	r2, r1
 8000b26:	4611      	mov	r1, r2
 8000b28:	4a22      	ldr	r2, [pc, #136]	@ (8000bb4 <GPIO_Init+0x1ac>)
 8000b2a:	430b      	orrs	r3, r1
 8000b2c:	6093      	str	r3, [r2, #8]
			break;
 8000b2e:	e000      	b.n	8000b32 <GPIO_Init+0x12a>
			break;
 8000b30:	bf00      	nop
		 * This part is where it chooses the specific EXTI line to program.
		 * temp1 chooses the specific EXTICR peripheral register (out of 4) to program
		 * With the given pin number, we then calculate how much left shift the bits need to program the specific
		 * EXTI which the GPIO number is associated with and stored into Lshift_val. EXTI0 = PIN 0's ----> EXTI15 = PIN 15's.
		 */
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	791b      	ldrb	r3, [r3, #4]
 8000b36:	089b      	lsrs	r3, r3, #2
 8000b38:	74fb      	strb	r3, [r7, #19]
		uint8_t Lshift_val = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	791b      	ldrb	r3, [r3, #4]
 8000b3e:	f003 0303 	and.w	r3, r3, #3
 8000b42:	74bb      	strb	r3, [r7, #18]

		/*translates the given GPIO port address into a specific GPIO port code for programming
		 * the SYSCFG EXTICR peripheral register.*/
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4a1b      	ldr	r2, [pc, #108]	@ (8000bb8 <GPIO_Init+0x1b0>)
 8000b4a:	4293      	cmp	r3, r2
 8000b4c:	d044      	beq.n	8000bd8 <GPIO_Init+0x1d0>
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	4a1a      	ldr	r2, [pc, #104]	@ (8000bbc <GPIO_Init+0x1b4>)
 8000b54:	4293      	cmp	r3, r2
 8000b56:	d02b      	beq.n	8000bb0 <GPIO_Init+0x1a8>
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a18      	ldr	r2, [pc, #96]	@ (8000bc0 <GPIO_Init+0x1b8>)
 8000b5e:	4293      	cmp	r3, r2
 8000b60:	d024      	beq.n	8000bac <GPIO_Init+0x1a4>
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	4a17      	ldr	r2, [pc, #92]	@ (8000bc4 <GPIO_Init+0x1bc>)
 8000b68:	4293      	cmp	r3, r2
 8000b6a:	d01d      	beq.n	8000ba8 <GPIO_Init+0x1a0>
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a15      	ldr	r2, [pc, #84]	@ (8000bc8 <GPIO_Init+0x1c0>)
 8000b72:	4293      	cmp	r3, r2
 8000b74:	d016      	beq.n	8000ba4 <GPIO_Init+0x19c>
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	4a14      	ldr	r2, [pc, #80]	@ (8000bcc <GPIO_Init+0x1c4>)
 8000b7c:	4293      	cmp	r3, r2
 8000b7e:	d00f      	beq.n	8000ba0 <GPIO_Init+0x198>
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4a12      	ldr	r2, [pc, #72]	@ (8000bd0 <GPIO_Init+0x1c8>)
 8000b86:	4293      	cmp	r3, r2
 8000b88:	d008      	beq.n	8000b9c <GPIO_Init+0x194>
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	4a11      	ldr	r2, [pc, #68]	@ (8000bd4 <GPIO_Init+0x1cc>)
 8000b90:	4293      	cmp	r3, r2
 8000b92:	d101      	bne.n	8000b98 <GPIO_Init+0x190>
 8000b94:	2307      	movs	r3, #7
 8000b96:	e020      	b.n	8000bda <GPIO_Init+0x1d2>
 8000b98:	2300      	movs	r3, #0
 8000b9a:	e01e      	b.n	8000bda <GPIO_Init+0x1d2>
 8000b9c:	2306      	movs	r3, #6
 8000b9e:	e01c      	b.n	8000bda <GPIO_Init+0x1d2>
 8000ba0:	2305      	movs	r3, #5
 8000ba2:	e01a      	b.n	8000bda <GPIO_Init+0x1d2>
 8000ba4:	2304      	movs	r3, #4
 8000ba6:	e018      	b.n	8000bda <GPIO_Init+0x1d2>
 8000ba8:	2303      	movs	r3, #3
 8000baa:	e016      	b.n	8000bda <GPIO_Init+0x1d2>
 8000bac:	2302      	movs	r3, #2
 8000bae:	e014      	b.n	8000bda <GPIO_Init+0x1d2>
 8000bb0:	2301      	movs	r3, #1
 8000bb2:	e012      	b.n	8000bda <GPIO_Init+0x1d2>
 8000bb4:	40013c00 	.word	0x40013c00
 8000bb8:	40020000 	.word	0x40020000
 8000bbc:	40020400 	.word	0x40020400
 8000bc0:	40020800 	.word	0x40020800
 8000bc4:	40020c00 	.word	0x40020c00
 8000bc8:	40021000 	.word	0x40021000
 8000bcc:	40021400 	.word	0x40021400
 8000bd0:	40021800 	.word	0x40021800
 8000bd4:	40021c00 	.word	0x40021c00
 8000bd8:	2300      	movs	r3, #0
 8000bda:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 8000bdc:	4b6a      	ldr	r3, [pc, #424]	@ (8000d88 <GPIO_Init+0x380>)
 8000bde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000be0:	4a69      	ldr	r2, [pc, #420]	@ (8000d88 <GPIO_Init+0x380>)
 8000be2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000be6:	6453      	str	r3, [r2, #68]	@ 0x44
		SYSCFG->EXTICR[temp1] &= ~(15 << (4*Lshift_val) ); //clears peripheral register bitfield
 8000be8:	4a68      	ldr	r2, [pc, #416]	@ (8000d8c <GPIO_Init+0x384>)
 8000bea:	7cfb      	ldrb	r3, [r7, #19]
 8000bec:	3302      	adds	r3, #2
 8000bee:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000bf2:	7cbb      	ldrb	r3, [r7, #18]
 8000bf4:	009b      	lsls	r3, r3, #2
 8000bf6:	210f      	movs	r1, #15
 8000bf8:	fa01 f303 	lsl.w	r3, r1, r3
 8000bfc:	43db      	mvns	r3, r3
 8000bfe:	4618      	mov	r0, r3
 8000c00:	4962      	ldr	r1, [pc, #392]	@ (8000d8c <GPIO_Init+0x384>)
 8000c02:	7cfb      	ldrb	r3, [r7, #19]
 8000c04:	4002      	ands	r2, r0
 8000c06:	3302      	adds	r3, #2
 8000c08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		SYSCFG->EXTICR[temp1] |= ( portcode << (4*Lshift_val) ); //clears peripheral register bitfield
 8000c0c:	4a5f      	ldr	r2, [pc, #380]	@ (8000d8c <GPIO_Init+0x384>)
 8000c0e:	7cfb      	ldrb	r3, [r7, #19]
 8000c10:	3302      	adds	r3, #2
 8000c12:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000c16:	7c79      	ldrb	r1, [r7, #17]
 8000c18:	7cbb      	ldrb	r3, [r7, #18]
 8000c1a:	009b      	lsls	r3, r3, #2
 8000c1c:	fa01 f303 	lsl.w	r3, r1, r3
 8000c20:	4618      	mov	r0, r3
 8000c22:	495a      	ldr	r1, [pc, #360]	@ (8000d8c <GPIO_Init+0x384>)
 8000c24:	7cfb      	ldrb	r3, [r7, #19]
 8000c26:	4302      	orrs	r2, r0
 8000c28:	3302      	adds	r3, #2
 8000c2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		/*
		 * /3. enable the EXTI interrupt delivery using IMR.
		 *     Basically unmasks the interrupt that will run through the specific EXTI line
		 */
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000c2e:	4b58      	ldr	r3, [pc, #352]	@ (8000d90 <GPIO_Init+0x388>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	687a      	ldr	r2, [r7, #4]
 8000c34:	7912      	ldrb	r2, [r2, #4]
 8000c36:	4611      	mov	r1, r2
 8000c38:	2201      	movs	r2, #1
 8000c3a:	408a      	lsls	r2, r1
 8000c3c:	4611      	mov	r1, r2
 8000c3e:	4a54      	ldr	r2, [pc, #336]	@ (8000d90 <GPIO_Init+0x388>)
 8000c40:	430b      	orrs	r3, r1
 8000c42:	6013      	str	r3, [r2, #0]
	}

	//2. Configure pup pud settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdCtrl << (2 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)) );
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	79db      	ldrb	r3, [r3, #7]
 8000c48:	461a      	mov	r2, r3
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	791b      	ldrb	r3, [r3, #4]
 8000c4e:	005b      	lsls	r3, r3, #1
 8000c50:	fa02 f303 	lsl.w	r3, r2, r3
 8000c54:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(3 << (2 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)) ); //clears the bit fields first before setting
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	68da      	ldr	r2, [r3, #12]
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	791b      	ldrb	r3, [r3, #4]
 8000c60:	005b      	lsls	r3, r3, #1
 8000c62:	2103      	movs	r1, #3
 8000c64:	fa01 f303 	lsl.w	r3, r1, r3
 8000c68:	43db      	mvns	r3, r3
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	400a      	ands	r2, r1
 8000c72:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp; //sets the bit fields
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	68d9      	ldr	r1, [r3, #12]
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	697a      	ldr	r2, [r7, #20]
 8000c80:	430a      	orrs	r2, r1
 8000c82:	60da      	str	r2, [r3, #12]
	temp = 0;
 8000c84:	2300      	movs	r3, #0
 8000c86:	617b      	str	r3, [r7, #20]

	//3. Configure output type & output speed(if set only at output mode)
	//if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_OUTPUT){

		//Only executes if user wants to set GPIO as output mode because no pushpull or open drain config for GPIO input mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOType << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	7a1b      	ldrb	r3, [r3, #8]
 8000c8c:	461a      	mov	r2, r3
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	791b      	ldrb	r3, [r3, #4]
 8000c92:	fa02 f303 	lsl.w	r3, r2, r3
 8000c96:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->OTYPER &= ~(1 << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) ); //clears the bit fields
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	685a      	ldr	r2, [r3, #4]
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	791b      	ldrb	r3, [r3, #4]
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	408b      	lsls	r3, r1
 8000ca8:	43db      	mvns	r3, r3
 8000caa:	4619      	mov	r1, r3
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	400a      	ands	r2, r1
 8000cb2:	605a      	str	r2, [r3, #4]
		pGPIOHandle->pGPIOx->OTYPER |= temp; //sets the bit fields
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	6859      	ldr	r1, [r3, #4]
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	697a      	ldr	r2, [r7, #20]
 8000cc0:	430a      	orrs	r2, r1
 8000cc2:	605a      	str	r2, [r3, #4]
		temp = 0;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	617b      	str	r3, [r7, #20]

		//sets GPIO output speed
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)) );
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	799b      	ldrb	r3, [r3, #6]
 8000ccc:	461a      	mov	r2, r3
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	791b      	ldrb	r3, [r3, #4]
 8000cd2:	005b      	lsls	r3, r3, #1
 8000cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd8:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->OSPEEDER &= ~(3 << (2 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)) ); //clears the bit fields
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	689a      	ldr	r2, [r3, #8]
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	791b      	ldrb	r3, [r3, #4]
 8000ce4:	005b      	lsls	r3, r3, #1
 8000ce6:	2103      	movs	r1, #3
 8000ce8:	fa01 f303 	lsl.w	r3, r1, r3
 8000cec:	43db      	mvns	r3, r3
 8000cee:	4619      	mov	r1, r3
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	400a      	ands	r2, r1
 8000cf6:	609a      	str	r2, [r3, #8]
		pGPIOHandle->pGPIOx->OSPEEDER |= temp; //sets the bit fields
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	6899      	ldr	r1, [r3, #8]
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	697a      	ldr	r2, [r7, #20]
 8000d04:	430a      	orrs	r2, r1
 8000d06:	609a      	str	r2, [r3, #8]
		temp = 0;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	617b      	str	r3, [r7, #20]
	//}

	//4. Configure alternate function setting (if GPIO is set at alternate function mode)
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN){
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	795b      	ldrb	r3, [r3, #5]
 8000d10:	2b02      	cmp	r3, #2
 8000d12:	d134      	bne.n	8000d7e <GPIO_Init+0x376>
		 * The resulting quotient selects whether AFRL = 0 or AFRH = 1 to be used as index in the AFR array
		 * Logic behind: any number that is less than 8 divided by 8 will result in a quotient of 0 since only the integer part is stored
		 * in the variable hence it will  use the 0 index which the AFRL address is at.
		 * If the number (pin number) is greater than 8, the resulting quotient is 1 hence will use the index 1 which the AFRH address is at
		 */
		uint8_t temp1 = ((pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) / 8);
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	791b      	ldrb	r3, [r3, #4]
 8000d18:	08db      	lsrs	r3, r3, #3
 8000d1a:	743b      	strb	r3, [r7, #16]

		/*
		 * the resulting modulo determines the left shift needed for setting the peripheral register
		 */
		uint8_t Lshift_val = ((pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) % 8);
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	791b      	ldrb	r3, [r3, #4]
 8000d20:	f003 0307 	and.w	r3, r3, #7
 8000d24:	73fb      	strb	r3, [r7, #15]

		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinAFMode << (4 * Lshift_val) );
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	7a5b      	ldrb	r3, [r3, #9]
 8000d2a:	461a      	mov	r2, r3
 8000d2c:	7bfb      	ldrb	r3, [r7, #15]
 8000d2e:	009b      	lsls	r3, r3, #2
 8000d30:	fa02 f303 	lsl.w	r3, r2, r3
 8000d34:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(15 << (4 * Lshift_val) ); //clears the bit fields in the register before setting
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	7c3a      	ldrb	r2, [r7, #16]
 8000d3c:	3208      	adds	r2, #8
 8000d3e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000d42:	7bfb      	ldrb	r3, [r7, #15]
 8000d44:	009b      	lsls	r3, r3, #2
 8000d46:	220f      	movs	r2, #15
 8000d48:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4c:	43db      	mvns	r3, r3
 8000d4e:	4618      	mov	r0, r3
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	7c3a      	ldrb	r2, [r7, #16]
 8000d56:	4001      	ands	r1, r0
 8000d58:	3208      	adds	r2, #8
 8000d5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= temp;  //Sets the bit fields in the register
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	7c3a      	ldrb	r2, [r7, #16]
 8000d64:	3208      	adds	r2, #8
 8000d66:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	7c3a      	ldrb	r2, [r7, #16]
 8000d70:	6979      	ldr	r1, [r7, #20]
 8000d72:	4301      	orrs	r1, r0
 8000d74:	3208      	adds	r2, #8
 8000d76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		temp = 0;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	617b      	str	r3, [r7, #20]
	}

}
 8000d7e:	bf00      	nop
 8000d80:	3718      	adds	r7, #24
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	40023800 	.word	0x40023800
 8000d8c:	40013800 	.word	0x40013800
 8000d90:	40013c00 	.word	0x40013c00

08000d94 <GPIO_IRQInterruptConfig>:
//4. identify the IRQ number on which the processor accepts the interrupt from that pin
//5. Configure the IRQ priority for the identified IRQ number (Processor side)
//6. enable interrupt reception on that IRQ number (processor side)
//7. implement the IRQ handler
void GPIO_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b085      	sub	sp, #20
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	460a      	mov	r2, r1
 8000d9e:	71fb      	strb	r3, [r7, #7]
 8000da0:	4613      	mov	r3, r2
 8000da2:	71bb      	strb	r3, [r7, #6]
	 * EX. IRQNumber = 76, Lshift_val = 76 % 32 = 12, so the needed left shift to program the bitfield
	 * for IRQNumber 76 is 12.
	 *
	 *
	 */
	uint8_t iNVIC = IRQNumber / 32;
 8000da4:	79fb      	ldrb	r3, [r7, #7]
 8000da6:	095b      	lsrs	r3, r3, #5
 8000da8:	73fb      	strb	r3, [r7, #15]
	uint8_t Lshift_val = IRQNumber % 32;
 8000daa:	79fb      	ldrb	r3, [r7, #7]
 8000dac:	f003 031f 	and.w	r3, r3, #31
 8000db0:	73bb      	strb	r3, [r7, #14]

	if(EnorDi == ENABLE){
 8000db2:	79bb      	ldrb	r3, [r7, #6]
 8000db4:	2b01      	cmp	r3, #1
 8000db6:	d114      	bne.n	8000de2 <GPIO_IRQInterruptConfig+0x4e>
		*(NVIC_ISER_BASE_ADDR + iNVIC) |= (1 << Lshift_val);
 8000db8:	7bfb      	ldrb	r3, [r7, #15]
 8000dba:	009b      	lsls	r3, r3, #2
 8000dbc:	f103 4360 	add.w	r3, r3, #3758096384	@ 0xe0000000
 8000dc0:	f503 4361 	add.w	r3, r3, #57600	@ 0xe100
 8000dc4:	681a      	ldr	r2, [r3, #0]
 8000dc6:	7bbb      	ldrb	r3, [r7, #14]
 8000dc8:	2101      	movs	r1, #1
 8000dca:	fa01 f303 	lsl.w	r3, r1, r3
 8000dce:	4619      	mov	r1, r3
 8000dd0:	7bfb      	ldrb	r3, [r7, #15]
 8000dd2:	009b      	lsls	r3, r3, #2
 8000dd4:	f103 4360 	add.w	r3, r3, #3758096384	@ 0xe0000000
 8000dd8:	f503 4361 	add.w	r3, r3, #57600	@ 0xe100
 8000ddc:	430a      	orrs	r2, r1
 8000dde:	601a      	str	r2, [r3, #0]
	}
	else{
		*(NVIC_ICER_BASE_ADDR + iNVIC) |= (1 << Lshift_val);
	}

}
 8000de0:	e00f      	b.n	8000e02 <GPIO_IRQInterruptConfig+0x6e>
		*(NVIC_ICER_BASE_ADDR + iNVIC) |= (1 << Lshift_val);
 8000de2:	7bfb      	ldrb	r3, [r7, #15]
 8000de4:	009a      	lsls	r2, r3, #2
 8000de6:	4b09      	ldr	r3, [pc, #36]	@ (8000e0c <GPIO_IRQInterruptConfig+0x78>)
 8000de8:	4413      	add	r3, r2
 8000dea:	681a      	ldr	r2, [r3, #0]
 8000dec:	7bbb      	ldrb	r3, [r7, #14]
 8000dee:	2101      	movs	r1, #1
 8000df0:	fa01 f303 	lsl.w	r3, r1, r3
 8000df4:	4618      	mov	r0, r3
 8000df6:	7bfb      	ldrb	r3, [r7, #15]
 8000df8:	0099      	lsls	r1, r3, #2
 8000dfa:	4b04      	ldr	r3, [pc, #16]	@ (8000e0c <GPIO_IRQInterruptConfig+0x78>)
 8000dfc:	440b      	add	r3, r1
 8000dfe:	4302      	orrs	r2, r0
 8000e00:	601a      	str	r2, [r3, #0]
}
 8000e02:	bf00      	nop
 8000e04:	3714      	adds	r7, #20
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bc80      	pop	{r7}
 8000e0a:	4770      	bx	lr
 8000e0c:	e000e180 	.word	0xe000e180

08000e10 <GPIO_IRQPriorityConfig>:
 * @return		- none
 *
 * @Note 		-
 */
void GPIO_IRQPriorityConfig(uint8_t IRQNumber, uint8_t IRQPriority)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b085      	sub	sp, #20
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	4603      	mov	r3, r0
 8000e18:	460a      	mov	r2, r1
 8000e1a:	71fb      	strb	r3, [r7, #7]
 8000e1c:	4613      	mov	r3, r2
 8000e1e:	71bb      	strb	r3, [r7, #6]
	uint8_t iprx = IRQNumber / 4; //gets the IPR register index for setting
 8000e20:	79fb      	ldrb	r3, [r7, #7]
 8000e22:	089b      	lsrs	r3, r3, #2
 8000e24:	73fb      	strb	r3, [r7, #15]
	uint8_t iprx_section = IRQNumber % 4; //determines which section of the IPR register to set.
 8000e26:	79fb      	ldrb	r3, [r7, #7]
 8000e28:	f003 0303 	and.w	r3, r3, #3
 8000e2c:	73bb      	strb	r3, [r7, #14]
	uint8_t Lshift_val = (8 - NUM_PRIO_BITS_IMPLEMENTED) + (8 * iprx_section);
 8000e2e:	7bbb      	ldrb	r3, [r7, #14]
 8000e30:	00db      	lsls	r3, r3, #3
 8000e32:	b2db      	uxtb	r3, r3
 8000e34:	3304      	adds	r3, #4
 8000e36:	737b      	strb	r3, [r7, #13]

	*(NVIC_IPR_BASE_ADDR + iprx) |= (IRQPriority << Lshift_val);
 8000e38:	7bfb      	ldrb	r3, [r7, #15]
 8000e3a:	009b      	lsls	r3, r3, #2
 8000e3c:	f103 4360 	add.w	r3, r3, #3758096384	@ 0xe0000000
 8000e40:	f503 4364 	add.w	r3, r3, #58368	@ 0xe400
 8000e44:	681a      	ldr	r2, [r3, #0]
 8000e46:	79b9      	ldrb	r1, [r7, #6]
 8000e48:	7b7b      	ldrb	r3, [r7, #13]
 8000e4a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e4e:	4619      	mov	r1, r3
 8000e50:	7bfb      	ldrb	r3, [r7, #15]
 8000e52:	009b      	lsls	r3, r3, #2
 8000e54:	f103 4360 	add.w	r3, r3, #3758096384	@ 0xe0000000
 8000e58:	f503 4364 	add.w	r3, r3, #58368	@ 0xe400
 8000e5c:	430a      	orrs	r2, r1
 8000e5e:	601a      	str	r2, [r3, #0]


}
 8000e60:	bf00      	nop
 8000e62:	3714      	adds	r7, #20
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bc80      	pop	{r7}
 8000e68:	4770      	bx	lr
	...

08000e6c <GPIO_IRQHandling>:

void GPIO_IRQHandling(uint8_t PinNumber)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b083      	sub	sp, #12
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	4603      	mov	r3, r0
 8000e74:	71fb      	strb	r3, [r7, #7]
	//clears the EXTI PR register with the corresponding pin number
	if(EXTI->PR & (1<<PinNumber)){
 8000e76:	4b0c      	ldr	r3, [pc, #48]	@ (8000ea8 <GPIO_IRQHandling+0x3c>)
 8000e78:	695b      	ldr	r3, [r3, #20]
 8000e7a:	79fa      	ldrb	r2, [r7, #7]
 8000e7c:	2101      	movs	r1, #1
 8000e7e:	fa01 f202 	lsl.w	r2, r1, r2
 8000e82:	4013      	ands	r3, r2
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d009      	beq.n	8000e9c <GPIO_IRQHandling+0x30>
		//clear
		EXTI->PR |= (1 << PinNumber);
 8000e88:	4b07      	ldr	r3, [pc, #28]	@ (8000ea8 <GPIO_IRQHandling+0x3c>)
 8000e8a:	695b      	ldr	r3, [r3, #20]
 8000e8c:	79fa      	ldrb	r2, [r7, #7]
 8000e8e:	2101      	movs	r1, #1
 8000e90:	fa01 f202 	lsl.w	r2, r1, r2
 8000e94:	4611      	mov	r1, r2
 8000e96:	4a04      	ldr	r2, [pc, #16]	@ (8000ea8 <GPIO_IRQHandling+0x3c>)
 8000e98:	430b      	orrs	r3, r1
 8000e9a:	6153      	str	r3, [r2, #20]
	}

}
 8000e9c:	bf00      	nop
 8000e9e:	370c      	adds	r7, #12
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bc80      	pop	{r7}
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop
 8000ea8:	40013c00 	.word	0x40013c00

08000eac <I2C_PeripheralClkCtrl>:
 * @return		- none
 *
 * @Note 		-
 */
void I2C_PeripheralClkCtrl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b085      	sub	sp, #20
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
 8000eb4:	460b      	mov	r3, r1
 8000eb6:	70fb      	strb	r3, [r7, #3]
	uint8_t temp1 = I2C_BASEADDR_TO_CODE(pI2Cx);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	4a2e      	ldr	r2, [pc, #184]	@ (8000f74 <I2C_PeripheralClkCtrl+0xc8>)
 8000ebc:	4293      	cmp	r3, r2
 8000ebe:	d00d      	beq.n	8000edc <I2C_PeripheralClkCtrl+0x30>
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	4a2d      	ldr	r2, [pc, #180]	@ (8000f78 <I2C_PeripheralClkCtrl+0xcc>)
 8000ec4:	4293      	cmp	r3, r2
 8000ec6:	d007      	beq.n	8000ed8 <I2C_PeripheralClkCtrl+0x2c>
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	4a2c      	ldr	r2, [pc, #176]	@ (8000f7c <I2C_PeripheralClkCtrl+0xd0>)
 8000ecc:	4293      	cmp	r3, r2
 8000ece:	d101      	bne.n	8000ed4 <I2C_PeripheralClkCtrl+0x28>
 8000ed0:	2302      	movs	r3, #2
 8000ed2:	e004      	b.n	8000ede <I2C_PeripheralClkCtrl+0x32>
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	e002      	b.n	8000ede <I2C_PeripheralClkCtrl+0x32>
 8000ed8:	2301      	movs	r3, #1
 8000eda:	e000      	b.n	8000ede <I2C_PeripheralClkCtrl+0x32>
 8000edc:	2300      	movs	r3, #0
 8000ede:	73fb      	strb	r3, [r7, #15]

	if(EnorDi == ENABLE){
 8000ee0:	78fb      	ldrb	r3, [r7, #3]
 8000ee2:	2b01      	cmp	r3, #1
 8000ee4:	d11e      	bne.n	8000f24 <I2C_PeripheralClkCtrl+0x78>
		switch(temp1){
 8000ee6:	7bfb      	ldrb	r3, [r7, #15]
 8000ee8:	2b02      	cmp	r3, #2
 8000eea:	d014      	beq.n	8000f16 <I2C_PeripheralClkCtrl+0x6a>
 8000eec:	2b02      	cmp	r3, #2
 8000eee:	dc38      	bgt.n	8000f62 <I2C_PeripheralClkCtrl+0xb6>
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d002      	beq.n	8000efa <I2C_PeripheralClkCtrl+0x4e>
 8000ef4:	2b01      	cmp	r3, #1
 8000ef6:	d007      	beq.n	8000f08 <I2C_PeripheralClkCtrl+0x5c>
			break;
		case 2:
			I2C3_PCLK_EN();
			break;
		default:
			break;
 8000ef8:	e033      	b.n	8000f62 <I2C_PeripheralClkCtrl+0xb6>
			I2C1_PCLK_EN();
 8000efa:	4b21      	ldr	r3, [pc, #132]	@ (8000f80 <I2C_PeripheralClkCtrl+0xd4>)
 8000efc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000efe:	4a20      	ldr	r2, [pc, #128]	@ (8000f80 <I2C_PeripheralClkCtrl+0xd4>)
 8000f00:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000f04:	6413      	str	r3, [r2, #64]	@ 0x40
			break;
 8000f06:	e02f      	b.n	8000f68 <I2C_PeripheralClkCtrl+0xbc>
			I2C2_PCLK_EN();
 8000f08:	4b1d      	ldr	r3, [pc, #116]	@ (8000f80 <I2C_PeripheralClkCtrl+0xd4>)
 8000f0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f0c:	4a1c      	ldr	r2, [pc, #112]	@ (8000f80 <I2C_PeripheralClkCtrl+0xd4>)
 8000f0e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000f12:	6413      	str	r3, [r2, #64]	@ 0x40
			break;
 8000f14:	e028      	b.n	8000f68 <I2C_PeripheralClkCtrl+0xbc>
			I2C3_PCLK_EN();
 8000f16:	4b1a      	ldr	r3, [pc, #104]	@ (8000f80 <I2C_PeripheralClkCtrl+0xd4>)
 8000f18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f1a:	4a19      	ldr	r2, [pc, #100]	@ (8000f80 <I2C_PeripheralClkCtrl+0xd4>)
 8000f1c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000f20:	6413      	str	r3, [r2, #64]	@ 0x40
			break;
 8000f22:	e021      	b.n	8000f68 <I2C_PeripheralClkCtrl+0xbc>
		}

	}
	else{
		switch(temp1){
 8000f24:	7bfb      	ldrb	r3, [r7, #15]
 8000f26:	2b02      	cmp	r3, #2
 8000f28:	d014      	beq.n	8000f54 <I2C_PeripheralClkCtrl+0xa8>
 8000f2a:	2b02      	cmp	r3, #2
 8000f2c:	dc1b      	bgt.n	8000f66 <I2C_PeripheralClkCtrl+0xba>
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d002      	beq.n	8000f38 <I2C_PeripheralClkCtrl+0x8c>
 8000f32:	2b01      	cmp	r3, #1
 8000f34:	d007      	beq.n	8000f46 <I2C_PeripheralClkCtrl+0x9a>
			break;
		case 2:
			I2C3_PCLK_DI();
			break;
		default:
			break;
 8000f36:	e016      	b.n	8000f66 <I2C_PeripheralClkCtrl+0xba>
			I2C1_PCLK_DI();
 8000f38:	4b11      	ldr	r3, [pc, #68]	@ (8000f80 <I2C_PeripheralClkCtrl+0xd4>)
 8000f3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f3c:	4a10      	ldr	r2, [pc, #64]	@ (8000f80 <I2C_PeripheralClkCtrl+0xd4>)
 8000f3e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8000f42:	6413      	str	r3, [r2, #64]	@ 0x40
			break;
 8000f44:	e010      	b.n	8000f68 <I2C_PeripheralClkCtrl+0xbc>
			I2C2_PCLK_DI();
 8000f46:	4b0e      	ldr	r3, [pc, #56]	@ (8000f80 <I2C_PeripheralClkCtrl+0xd4>)
 8000f48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f4a:	4a0d      	ldr	r2, [pc, #52]	@ (8000f80 <I2C_PeripheralClkCtrl+0xd4>)
 8000f4c:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8000f50:	6413      	str	r3, [r2, #64]	@ 0x40
			break;
 8000f52:	e009      	b.n	8000f68 <I2C_PeripheralClkCtrl+0xbc>
			I2C3_PCLK_DI();
 8000f54:	4b0a      	ldr	r3, [pc, #40]	@ (8000f80 <I2C_PeripheralClkCtrl+0xd4>)
 8000f56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f58:	4a09      	ldr	r2, [pc, #36]	@ (8000f80 <I2C_PeripheralClkCtrl+0xd4>)
 8000f5a:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8000f5e:	6413      	str	r3, [r2, #64]	@ 0x40
			break;
 8000f60:	e002      	b.n	8000f68 <I2C_PeripheralClkCtrl+0xbc>
			break;
 8000f62:	bf00      	nop
 8000f64:	e000      	b.n	8000f68 <I2C_PeripheralClkCtrl+0xbc>
			break;
 8000f66:	bf00      	nop
		}

	}
}
 8000f68:	bf00      	nop
 8000f6a:	3714      	adds	r7, #20
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bc80      	pop	{r7}
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	40005400 	.word	0x40005400
 8000f78:	40005800 	.word	0x40005800
 8000f7c:	40005c00 	.word	0x40005c00
 8000f80:	40023800 	.word	0x40023800

08000f84 <I2C_PeripheralControl>:
 * @return		- none
 *
 * @Note 		-
 */
void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
 8000f8c:	460b      	mov	r3, r1
 8000f8e:	70fb      	strb	r3, [r7, #3]
	if (EnorDi == ENABLE) {
 8000f90:	78fb      	ldrb	r3, [r7, #3]
 8000f92:	2b01      	cmp	r3, #1
 8000f94:	d106      	bne.n	8000fa4 <I2C_PeripheralControl+0x20>
		pI2Cx->CR1 |= (1 << I2C_CR1_PE); //Enable the peripheral
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f043 0201 	orr.w	r2, r3, #1
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	601a      	str	r2, [r3, #0]

	} else {
		pI2Cx->CR1 &= ~(1 << I2C_CR1_PE); //Disable the peripheral
	}
}
 8000fa2:	e005      	b.n	8000fb0 <I2C_PeripheralControl+0x2c>
		pI2Cx->CR1 &= ~(1 << I2C_CR1_PE); //Disable the peripheral
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f023 0201 	bic.w	r2, r3, #1
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	601a      	str	r2, [r3, #0]
}
 8000fb0:	bf00      	nop
 8000fb2:	370c      	adds	r7, #12
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bc80      	pop	{r7}
 8000fb8:	4770      	bx	lr
	...

08000fbc <I2C_Init>:
 * @return		- none
 *
 * @Note 		-
 */
void I2C_Init(I2C_Handle_t *pI2CHandle)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b086      	sub	sp, #24
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
	I2C_PeripheralClkCtrl(pI2CHandle->pI2Cx, ENABLE);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	2101      	movs	r1, #1
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f7ff ff6e 	bl	8000eac <I2C_PeripheralClkCtrl>

	uint32_t SCLSpeed = pI2CHandle->I2C_Config.I2C_SCLSpeed;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	617b      	str	r3, [r7, #20]
	uint16_t CCRVal;
	uint8_t temp = 0;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	74fb      	strb	r3, [r7, #19]

	//enables ACKing
	pI2CHandle->pI2Cx->CR1 |= 1 << I2C_CR1_ACK;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	681a      	ldr	r2, [r3, #0]
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8000fe8:	601a      	str	r2, [r3, #0]

	//fetches the current APB1 clock value
	uint32_t APB1Clock = RCC_GetPCLK1Value();
 8000fea:	f000 f8f5 	bl	80011d8 <RCC_GetPCLK1Value>
 8000fee:	60f8      	str	r0, [r7, #12]

	//clears the I2C_CR2:FREQ5:0 bitfield just to be sure thats its clean before setting
	pI2CHandle->pI2Cx->CR2 &= ~(63 << I2C_CR2_FREQ5_0);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	685a      	ldr	r2, [r3, #4]
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8000ffe:	605a      	str	r2, [r3, #4]

	//program the current APB1 clock freq into I2C_CR2:FREQ5_0
	//divided the APB1Clock value with 1 million, only need the ten millions and millions digit
	pI2CHandle->pI2Cx->CR2 |= (APB1Clock/1000000) << I2C_CR2_FREQ5_0;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	6859      	ldr	r1, [r3, #4]
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	4a33      	ldr	r2, [pc, #204]	@ (80010d8 <I2C_Init+0x11c>)
 800100a:	fba2 2303 	umull	r2, r3, r2, r3
 800100e:	0c9a      	lsrs	r2, r3, #18
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	430a      	orrs	r2, r1
 8001016:	605a      	str	r2, [r3, #4]

	//programs the user defined slave address to I2C_OAR1:ADD7_1 register
	pI2CHandle->pI2Cx->OAR1 |= pI2CHandle->I2C_Config.I2C_DeviceAddress << I2C_OAR1_ADD7_1;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	6899      	ldr	r1, [r3, #8]
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	7a1b      	ldrb	r3, [r3, #8]
 8001022:	005a      	lsls	r2, r3, #1
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	430a      	orrs	r2, r1
 800102a:	609a      	str	r2, [r3, #8]

	//set the 14th bit in OAR1 register to 1 as instructed by reference manual.
	pI2CHandle->pI2Cx->OAR1 |= 1 << I2C_OAR1_BIT14;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	689a      	ldr	r2, [r3, #8]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800103a:	609a      	str	r2, [r3, #8]

	//for standard mode at 100Kbps
	if(SCLSpeed <= I2C_SCL_SPEED_STANDARD)
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	4a27      	ldr	r2, [pc, #156]	@ (80010dc <I2C_Init+0x120>)
 8001040:	4293      	cmp	r3, r2
 8001042:	d80f      	bhi.n	8001064 <I2C_Init+0xa8>
		//set the MCU into master standard mode
		temp &= ~(1 << I2C_CCR_FS);

		//calculate the needed CCR , for some reason it will skip this calculation and go to
		//infinite loop, idk why probably kay float ni sya?
		CCRVal = APB1Clock / (2 * SCLSpeed);
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	005b      	lsls	r3, r3, #1
 8001048:	68fa      	ldr	r2, [r7, #12]
 800104a:	fbb2 f3f3 	udiv	r3, r2, r3
 800104e:	817b      	strh	r3, [r7, #10]

		//set the CCR value
		temp |= CCRVal << I2C_CCR_CCR11_0;
 8001050:	897b      	ldrh	r3, [r7, #10]
 8001052:	b2da      	uxtb	r2, r3
 8001054:	7cfb      	ldrb	r3, [r7, #19]
 8001056:	4313      	orrs	r3, r2
 8001058:	74fb      	strb	r3, [r7, #19]

		//programs the temp value into the CCR register
		pI2CHandle->pI2Cx->CCR = temp;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	7cfa      	ldrb	r2, [r7, #19]
 8001060:	61da      	str	r2, [r3, #28]
 8001062:	e029      	b.n	80010b8 <I2C_Init+0xfc>
		temp |= 1 << I2C_CCR_FS;

		//set the Fast Mode duty cycle
		temp |= pI2CHandle->I2C_Config.I2C_FMDutyCycle << I2C_CCR_DUTY;

		switch(SCLSpeed){
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	4a1e      	ldr	r2, [pc, #120]	@ (80010e0 <I2C_Init+0x124>)
 8001068:	4293      	cmp	r3, r2
 800106a:	d004      	beq.n	8001076 <I2C_Init+0xba>
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	4a1d      	ldr	r2, [pc, #116]	@ (80010e4 <I2C_Init+0x128>)
 8001070:	4293      	cmp	r3, r2
 8001072:	d012      	beq.n	800109a <I2C_Init+0xde>
			//programs the temp value into the CCR register
			pI2CHandle->pI2Cx->CCR = temp;
			break;

		default:
			break;
 8001074:	e020      	b.n	80010b8 <I2C_Init+0xfc>
			CCRVal = APB1Clock / (3 * SCLSpeed);
 8001076:	697a      	ldr	r2, [r7, #20]
 8001078:	4613      	mov	r3, r2
 800107a:	005b      	lsls	r3, r3, #1
 800107c:	4413      	add	r3, r2
 800107e:	68fa      	ldr	r2, [r7, #12]
 8001080:	fbb2 f3f3 	udiv	r3, r2, r3
 8001084:	817b      	strh	r3, [r7, #10]
			temp |= CCRVal << I2C_CCR_CCR11_0;
 8001086:	897b      	ldrh	r3, [r7, #10]
 8001088:	b2da      	uxtb	r2, r3
 800108a:	7cfb      	ldrb	r3, [r7, #19]
 800108c:	4313      	orrs	r3, r2
 800108e:	74fb      	strb	r3, [r7, #19]
			pI2CHandle->pI2Cx->CCR = temp;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	7cfa      	ldrb	r2, [r7, #19]
 8001096:	61da      	str	r2, [r3, #28]
			break;
 8001098:	e00e      	b.n	80010b8 <I2C_Init+0xfc>
			CCRVal = APB1Clock / (25 * SCLSpeed);
 800109a:	697a      	ldr	r2, [r7, #20]
 800109c:	4613      	mov	r3, r2
 800109e:	009b      	lsls	r3, r3, #2
 80010a0:	4413      	add	r3, r2
 80010a2:	009a      	lsls	r2, r3, #2
 80010a4:	4413      	add	r3, r2
 80010a6:	68fa      	ldr	r2, [r7, #12]
 80010a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80010ac:	817b      	strh	r3, [r7, #10]
			pI2CHandle->pI2Cx->CCR = temp;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	7cfa      	ldrb	r2, [r7, #19]
 80010b4:	61da      	str	r2, [r3, #28]
			break;
 80010b6:	bf00      	nop
		}
	}

	//TRISE configuration
	uint8_t trise_val;
	trise_val = Get_TriseValue(pI2CHandle);
 80010b8:	6878      	ldr	r0, [r7, #4]
 80010ba:	f000 f8dd 	bl	8001278 <Get_TriseValue>
 80010be:	4603      	mov	r3, r0
 80010c0:	727b      	strb	r3, [r7, #9]

	//programs the calculated trise value into the Trise register
	//masked the first 6 bits only since TRISE register is only 6 bits long.
	pI2CHandle->pI2Cx->TRISE = (trise_val & 0x3f);
 80010c2:	7a7a      	ldrb	r2, [r7, #9]
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80010cc:	621a      	str	r2, [r3, #32]
}
 80010ce:	bf00      	nop
 80010d0:	3718      	adds	r7, #24
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	431bde83 	.word	0x431bde83
 80010dc:	000186a0 	.word	0x000186a0
 80010e0:	00030d40 	.word	0x00030d40
 80010e4:	00061a80 	.word	0x00061a80

080010e8 <I2C_MasterSendData>:
 *
 * @Note 		- I'm thinking of sectioning this into individual "helper" functions
 * 	            - like one for generating START condition, one for sending data, etc. but haven't decided yet
 */
void I2C_MasterSendData(I2C_Handle_t *pI2CHandle, uint8_t *pTxBuffer, uint32_t Len, uint8_t SlaveAddr)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b086      	sub	sp, #24
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	60f8      	str	r0, [r7, #12]
 80010f0:	60b9      	str	r1, [r7, #8]
 80010f2:	607a      	str	r2, [r7, #4]
 80010f4:	70fb      	strb	r3, [r7, #3]

	uint16_t dummy_read __unused =0;
 80010f6:	2300      	movs	r3, #0
 80010f8:	82fb      	strh	r3, [r7, #22]

	//generate START condition
	pI2CHandle->pI2Cx->CR1 |= 1 << I2C_CR1_START;
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001108:	601a      	str	r2, [r3, #0]

	//wait for SB flag to be set which means start bit executed successfully
	while( I2C_GetSR1FlagStatus(pI2CHandle->pI2Cx, I2C_SR1_SB) == 0 );
 800110a:	bf00      	nop
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	2100      	movs	r1, #0
 8001112:	4618      	mov	r0, r3
 8001114:	f000 f904 	bl	8001320 <I2C_GetSR1FlagStatus>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d0f6      	beq.n	800110c <I2C_MasterSendData+0x24>

	//sets the r/nw bit to write mode
	SlaveAddr = SlaveAddr << 1;
 800111e:	78fb      	ldrb	r3, [r7, #3]
 8001120:	005b      	lsls	r3, r3, #1
 8001122:	70fb      	strb	r3, [r7, #3]
	SlaveAddr &= ~(1 << 0);
 8001124:	78fb      	ldrb	r3, [r7, #3]
 8001126:	f023 0301 	bic.w	r3, r3, #1
 800112a:	70fb      	strb	r3, [r7, #3]

	//write the slave address to be sent thru which also clears the SB flag.
	pI2CHandle->pI2Cx->DR |= SlaveAddr;
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	6919      	ldr	r1, [r3, #16]
 8001132:	78fa      	ldrb	r2, [r7, #3]
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	430a      	orrs	r2, r1
 800113a:	611a      	str	r2, [r3, #16]

	//waits for ADDR flag to be set which means address bit sent successfully at the same time reads SR1
	while( I2C_GetSR1FlagStatus(pI2CHandle->pI2Cx, I2C_SR1_ADDR) == 0 );
 800113c:	bf00      	nop
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	2101      	movs	r1, #1
 8001144:	4618      	mov	r0, r3
 8001146:	f000 f8eb 	bl	8001320 <I2C_GetSR1FlagStatus>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d0f6      	beq.n	800113e <I2C_MasterSendData+0x56>

	//dummy read from SR2 to clear the ADDR flag.
	dummy_read = pI2CHandle->pI2Cx->SR2;
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	699b      	ldr	r3, [r3, #24]
 8001156:	82fb      	strh	r3, [r7, #22]


	//start sending thru polling method
	while(Len > 0){
 8001158:	e012      	b.n	8001180 <I2C_MasterSendData+0x98>

		//check if shift register TX buffer is empty, if empty write the data into data register to be sent
		if( ((pI2CHandle->pI2Cx->SR1 >> I2C_SR1_TXE) & 0x1) == 1){
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	695b      	ldr	r3, [r3, #20]
 8001160:	09db      	lsrs	r3, r3, #7
 8001162:	f003 0301 	and.w	r3, r3, #1
 8001166:	2b01      	cmp	r3, #1
 8001168:	d10a      	bne.n	8001180 <I2C_MasterSendData+0x98>

			pI2CHandle->pI2Cx->DR = *pTxBuffer;
 800116a:	68bb      	ldr	r3, [r7, #8]
 800116c:	781a      	ldrb	r2, [r3, #0]
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	611a      	str	r2, [r3, #16]

			//decrements data length and increment pointer address to next byte is to be sent .
			Len--;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	3b01      	subs	r3, #1
 8001178:	607b      	str	r3, [r7, #4]
			pTxBuffer++;
 800117a:	68bb      	ldr	r3, [r7, #8]
 800117c:	3301      	adds	r3, #1
 800117e:	60bb      	str	r3, [r7, #8]
	while(Len > 0){
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d1e9      	bne.n	800115a <I2C_MasterSendData+0x72>
		}
	}

	//wait for TXE = 1 & BTF = 1 which means data register and shift register is empty
	while( I2C_GetSR1FlagStatus(pI2CHandle->pI2Cx, I2C_SR1_TXE) == 0);
 8001186:	bf00      	nop
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	2107      	movs	r1, #7
 800118e:	4618      	mov	r0, r3
 8001190:	f000 f8c6 	bl	8001320 <I2C_GetSR1FlagStatus>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d0f6      	beq.n	8001188 <I2C_MasterSendData+0xa0>
	while( I2C_GetSR1FlagStatus(pI2CHandle->pI2Cx, I2C_SR1_BTF) == 0);
 800119a:	bf00      	nop
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	2102      	movs	r1, #2
 80011a2:	4618      	mov	r0, r3
 80011a4:	f000 f8bc 	bl	8001320 <I2C_GetSR1FlagStatus>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d0f6      	beq.n	800119c <I2C_MasterSendData+0xb4>


	//cleans data register for the next transmission
	pI2CHandle->pI2Cx->DR &= ~(0xFF);
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	691a      	ldr	r2, [r3, #16]
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80011bc:	611a      	str	r2, [r3, #16]

	//generate the stop condition
	pI2CHandle->pI2Cx->CR1 |= 1 << I2C_CR1_STOP;
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	681a      	ldr	r2, [r3, #0]
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80011cc:	601a      	str	r2, [r3, #0]
}
 80011ce:	bf00      	nop
 80011d0:	3718      	adds	r7, #24
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
	...

080011d8 <RCC_GetPCLK1Value>:
 *
 * @return		- none
 *
 * @Note 		-
 */
uint32_t RCC_GetPCLK1Value(void) {
 80011d8:	b480      	push	{r7}
 80011da:	b085      	sub	sp, #20
 80011dc:	af00      	add	r7, sp, #0
	uint32_t pclk1, system_clk;
	uint8_t clk_src, ahb_prescaler, apb1_prescaler;

	// Get the system clock source
	clk_src = (RCC->CFGR >> 2) & 0x3;
 80011de:	4b23      	ldr	r3, [pc, #140]	@ (800126c <RCC_GetPCLK1Value+0x94>)
 80011e0:	689b      	ldr	r3, [r3, #8]
 80011e2:	089b      	lsrs	r3, r3, #2
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	f003 0303 	and.w	r3, r3, #3
 80011ea:	727b      	strb	r3, [r7, #9]

	if (clk_src == 0) {
 80011ec:	7a7b      	ldrb	r3, [r7, #9]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d102      	bne.n	80011f8 <RCC_GetPCLK1Value+0x20>
		// HSI oscillator used as system clock
		system_clk = 16e+6; // HSI frequency is 16 MHz
 80011f2:	4b1f      	ldr	r3, [pc, #124]	@ (8001270 <RCC_GetPCLK1Value+0x98>)
 80011f4:	60fb      	str	r3, [r7, #12]
 80011f6:	e004      	b.n	8001202 <RCC_GetPCLK1Value+0x2a>
	} else if (clk_src == 1) {
 80011f8:	7a7b      	ldrb	r3, [r7, #9]
 80011fa:	2b01      	cmp	r3, #1
 80011fc:	d101      	bne.n	8001202 <RCC_GetPCLK1Value+0x2a>
		// HSE oscillator used as system clock
		system_clk = 8e+6; // Assume HSE frequency is 8 MHz
 80011fe:	4b1d      	ldr	r3, [pc, #116]	@ (8001274 <RCC_GetPCLK1Value+0x9c>)
 8001200:	60fb      	str	r3, [r7, #12]
		// Calculate PLL output frequency (not shown here for brevity)
		//too complex, will add soon once I know how to use PLL as clock src.
	}

	// Get AHB prescaler
	ahb_prescaler = (RCC->CFGR >> 4) & 0xF;
 8001202:	4b1a      	ldr	r3, [pc, #104]	@ (800126c <RCC_GetPCLK1Value+0x94>)
 8001204:	689b      	ldr	r3, [r3, #8]
 8001206:	091b      	lsrs	r3, r3, #4
 8001208:	b2db      	uxtb	r3, r3
 800120a:	f003 030f 	and.w	r3, r3, #15
 800120e:	72fb      	strb	r3, [r7, #11]
	if (ahb_prescaler < 8) {
 8001210:	7afb      	ldrb	r3, [r7, #11]
 8001212:	2b07      	cmp	r3, #7
 8001214:	d802      	bhi.n	800121c <RCC_GetPCLK1Value+0x44>
		ahb_prescaler = 1; // No division
 8001216:	2301      	movs	r3, #1
 8001218:	72fb      	strb	r3, [r7, #11]
 800121a:	e005      	b.n	8001228 <RCC_GetPCLK1Value+0x50>
	} else {
		//this line is neat, this converts the binary value of the prescaler into its equivalent decimal value
		ahb_prescaler = 1 << (ahb_prescaler - 7); // 2, 4, 8, ..., 512
 800121c:	7afb      	ldrb	r3, [r7, #11]
 800121e:	3b07      	subs	r3, #7
 8001220:	2201      	movs	r2, #1
 8001222:	fa02 f303 	lsl.w	r3, r2, r3
 8001226:	72fb      	strb	r3, [r7, #11]
	}

	// Get APB1 prescaler
	apb1_prescaler = (RCC->CFGR >> 10) & 0x7;
 8001228:	4b10      	ldr	r3, [pc, #64]	@ (800126c <RCC_GetPCLK1Value+0x94>)
 800122a:	689b      	ldr	r3, [r3, #8]
 800122c:	0a9b      	lsrs	r3, r3, #10
 800122e:	b2db      	uxtb	r3, r3
 8001230:	f003 0307 	and.w	r3, r3, #7
 8001234:	72bb      	strb	r3, [r7, #10]
	if (apb1_prescaler < 4) {
 8001236:	7abb      	ldrb	r3, [r7, #10]
 8001238:	2b03      	cmp	r3, #3
 800123a:	d802      	bhi.n	8001242 <RCC_GetPCLK1Value+0x6a>
		apb1_prescaler = 1; // No division
 800123c:	2301      	movs	r3, #1
 800123e:	72bb      	strb	r3, [r7, #10]
 8001240:	e005      	b.n	800124e <RCC_GetPCLK1Value+0x76>
	} else {
		apb1_prescaler = 1 << (apb1_prescaler - 3); // 2, 4, 8, 16
 8001242:	7abb      	ldrb	r3, [r7, #10]
 8001244:	3b03      	subs	r3, #3
 8001246:	2201      	movs	r2, #1
 8001248:	fa02 f303 	lsl.w	r3, r2, r3
 800124c:	72bb      	strb	r3, [r7, #10]
	}

	// Calculate PCLK1
	pclk1 = (system_clk / ahb_prescaler) / apb1_prescaler;
 800124e:	7afb      	ldrb	r3, [r7, #11]
 8001250:	68fa      	ldr	r2, [r7, #12]
 8001252:	fbb2 f2f3 	udiv	r2, r2, r3
 8001256:	7abb      	ldrb	r3, [r7, #10]
 8001258:	fbb2 f3f3 	udiv	r3, r2, r3
 800125c:	607b      	str	r3, [r7, #4]

	return pclk1;
 800125e:	687b      	ldr	r3, [r7, #4]
}
 8001260:	4618      	mov	r0, r3
 8001262:	3714      	adds	r7, #20
 8001264:	46bd      	mov	sp, r7
 8001266:	bc80      	pop	{r7}
 8001268:	4770      	bx	lr
 800126a:	bf00      	nop
 800126c:	40023800 	.word	0x40023800
 8001270:	00f42400 	.word	0x00f42400
 8001274:	007a1200 	.word	0x007a1200

08001278 <Get_TriseValue>:
 *
 * @return		- uint8_t, returns the calculated trise value.
 *
 * @Note 		-
 */
uint8_t Get_TriseValue(I2C_Handle_t *pI2CHandle){
 8001278:	b580      	push	{r7, lr}
 800127a:	b086      	sub	sp, #24
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]

	uint8_t trise_val;
	uint32_t pclk1;

	uint32_t SCLSpeed = pI2CHandle->I2C_Config.I2C_SCLSpeed;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	613b      	str	r3, [r7, #16]

	pclk1 = RCC_GetPCLK1Value();
 8001286:	f7ff ffa7 	bl	80011d8 <RCC_GetPCLK1Value>
 800128a:	60f8      	str	r0, [r7, #12]


	if(SCLSpeed == I2C_SCL_SPEED_STANDARD){
 800128c:	693b      	ldr	r3, [r7, #16]
 800128e:	4a22      	ldr	r2, [pc, #136]	@ (8001318 <Get_TriseValue+0xa0>)
 8001290:	4293      	cmp	r3, r2
 8001292:	d119      	bne.n	80012c8 <Get_TriseValue+0x50>
		//if SCLSpeed is standard mode use 1000ns as numerator as per i2c spec
		trise_val = ( 1000e-9 * pclk1 ) + 1;
 8001294:	68f8      	ldr	r0, [r7, #12]
 8001296:	f7ff fa2b 	bl	80006f0 <__aeabi_ui2d>
 800129a:	a31b      	add	r3, pc, #108	@ (adr r3, 8001308 <Get_TriseValue+0x90>)
 800129c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012a0:	f7fe ffba 	bl	8000218 <__aeabi_dmul>
 80012a4:	4602      	mov	r2, r0
 80012a6:	460b      	mov	r3, r1
 80012a8:	4610      	mov	r0, r2
 80012aa:	4619      	mov	r1, r3
 80012ac:	f04f 0200 	mov.w	r2, #0
 80012b0:	4b1a      	ldr	r3, [pc, #104]	@ (800131c <Get_TriseValue+0xa4>)
 80012b2:	f7ff f8e1 	bl	8000478 <__adddf3>
 80012b6:	4602      	mov	r2, r0
 80012b8:	460b      	mov	r3, r1
 80012ba:	4610      	mov	r0, r2
 80012bc:	4619      	mov	r1, r3
 80012be:	f7ff fa91 	bl	80007e4 <__aeabi_d2uiz>
 80012c2:	4603      	mov	r3, r0
 80012c4:	75fb      	strb	r3, [r7, #23]
 80012c6:	e018      	b.n	80012fa <Get_TriseValue+0x82>
	}else{
		//If SCLSpeed is fast mode use 300ns as numerator as per i2c spec
		trise_val = ( 300e-9 * pclk1 ) + 1;
 80012c8:	68f8      	ldr	r0, [r7, #12]
 80012ca:	f7ff fa11 	bl	80006f0 <__aeabi_ui2d>
 80012ce:	a310      	add	r3, pc, #64	@ (adr r3, 8001310 <Get_TriseValue+0x98>)
 80012d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012d4:	f7fe ffa0 	bl	8000218 <__aeabi_dmul>
 80012d8:	4602      	mov	r2, r0
 80012da:	460b      	mov	r3, r1
 80012dc:	4610      	mov	r0, r2
 80012de:	4619      	mov	r1, r3
 80012e0:	f04f 0200 	mov.w	r2, #0
 80012e4:	4b0d      	ldr	r3, [pc, #52]	@ (800131c <Get_TriseValue+0xa4>)
 80012e6:	f7ff f8c7 	bl	8000478 <__adddf3>
 80012ea:	4602      	mov	r2, r0
 80012ec:	460b      	mov	r3, r1
 80012ee:	4610      	mov	r0, r2
 80012f0:	4619      	mov	r1, r3
 80012f2:	f7ff fa77 	bl	80007e4 <__aeabi_d2uiz>
 80012f6:	4603      	mov	r3, r0
 80012f8:	75fb      	strb	r3, [r7, #23]
	}

	return trise_val;
 80012fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	3718      	adds	r7, #24
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	f3af 8000 	nop.w
 8001308:	a0b5ed8d 	.word	0xa0b5ed8d
 800130c:	3eb0c6f7 	.word	0x3eb0c6f7
 8001310:	f40d8376 	.word	0xf40d8376
 8001314:	3e9421f5 	.word	0x3e9421f5
 8001318:	000186a0 	.word	0x000186a0
 800131c:	3ff00000 	.word	0x3ff00000

08001320 <I2C_GetSR1FlagStatus>:
 *
 * @return		- uint8_t, returns the flag status
 *
 * @Note 		-
 */
uint8_t I2C_GetSR1FlagStatus(I2C_RegDef_t *pI2Cx, uint8_t FlagName){
 8001320:	b480      	push	{r7}
 8001322:	b085      	sub	sp, #20
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
 8001328:	460b      	mov	r3, r1
 800132a:	70fb      	strb	r3, [r7, #3]

	//gets the flag status from SR1
	uint8_t flag_status = (pI2Cx->SR1 >> FlagName) & 0x0001;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	695a      	ldr	r2, [r3, #20]
 8001330:	78fb      	ldrb	r3, [r7, #3]
 8001332:	fa22 f303 	lsr.w	r3, r2, r3
 8001336:	b2db      	uxtb	r3, r3
 8001338:	f003 0301 	and.w	r3, r3, #1
 800133c:	73fb      	strb	r3, [r7, #15]

	//return the flag status
	return flag_status;
 800133e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001340:	4618      	mov	r0, r3
 8001342:	3714      	adds	r7, #20
 8001344:	46bd      	mov	sp, r7
 8001346:	bc80      	pop	{r7}
 8001348:	4770      	bx	lr
	...

0800134c <delay>:
#include <string.h>

uint8_t msg[] = "Hello World!";


void delay(void){
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0

	for(uint32_t i=0; i < 200000 ; i++);
 8001352:	2300      	movs	r3, #0
 8001354:	607b      	str	r3, [r7, #4]
 8001356:	e002      	b.n	800135e <delay+0x12>
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	3301      	adds	r3, #1
 800135c:	607b      	str	r3, [r7, #4]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	4a04      	ldr	r2, [pc, #16]	@ (8001374 <delay+0x28>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d9f8      	bls.n	8001358 <delay+0xc>
}
 8001366:	bf00      	nop
 8001368:	bf00      	nop
 800136a:	370c      	adds	r7, #12
 800136c:	46bd      	mov	sp, r7
 800136e:	bc80      	pop	{r7}
 8001370:	4770      	bx	lr
 8001372:	bf00      	nop
 8001374:	00030d3f 	.word	0x00030d3f

08001378 <gpio_init>:


I2C_Handle_t I2C_handle;

void gpio_init(void){
 8001378:	b580      	push	{r7, lr}
 800137a:	b084      	sub	sp, #16
 800137c:	af00      	add	r7, sp, #0
	GPIO_Handle_t Gpio_handle;

	//initialize PC13 user button
	Gpio_handle.pGPIOx = GPIOC;
 800137e:	4b0b      	ldr	r3, [pc, #44]	@ (80013ac <gpio_init+0x34>)
 8001380:	607b      	str	r3, [r7, #4]
	Gpio_handle.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IT_FT;
 8001382:	2304      	movs	r3, #4
 8001384:	727b      	strb	r3, [r7, #9]
	Gpio_handle.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN13;
 8001386:	230d      	movs	r3, #13
 8001388:	723b      	strb	r3, [r7, #8]
	Gpio_handle.GPIO_PinConfig.GPIO_PinAFMode = NONE;
 800138a:	2310      	movs	r3, #16
 800138c:	737b      	strb	r3, [r7, #13]
	Gpio_handle.GPIO_PinConfig.GPIO_PinOType = GPIO_OPTYPE_PUSHPULL;
 800138e:	2300      	movs	r3, #0
 8001390:	733b      	strb	r3, [r7, #12]
	Gpio_handle.GPIO_PinConfig.GPIO_PinPuPdCtrl = GPIO_NO_PULLUP_PULLDOWN;
 8001392:	2300      	movs	r3, #0
 8001394:	72fb      	strb	r3, [r7, #11]
	Gpio_handle.GPIO_PinConfig.GPIO_PinSpeed = GPIO_FAST_SPD;
 8001396:	2302      	movs	r3, #2
 8001398:	72bb      	strb	r3, [r7, #10]
	GPIO_Init(&Gpio_handle);
 800139a:	1d3b      	adds	r3, r7, #4
 800139c:	4618      	mov	r0, r3
 800139e:	f7ff fb33 	bl	8000a08 <GPIO_Init>

}
 80013a2:	bf00      	nop
 80013a4:	3710      	adds	r7, #16
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	40020800 	.word	0x40020800

080013b0 <i2c_gpioinit>:

void i2c_gpioinit(void){
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b084      	sub	sp, #16
 80013b4:	af00      	add	r7, sp, #0
	GPIO_Handle_t I2CGpio_handle;

	//initialize PC6 I2C SCL
	I2CGpio_handle.pGPIOx = GPIOB;
 80013b6:	4b0e      	ldr	r3, [pc, #56]	@ (80013f0 <i2c_gpioinit+0x40>)
 80013b8:	607b      	str	r3, [r7, #4]
	I2CGpio_handle.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 80013ba:	2302      	movs	r3, #2
 80013bc:	727b      	strb	r3, [r7, #9]
	I2CGpio_handle.GPIO_PinConfig.GPIO_PinAFMode = GPIO_AF4;
 80013be:	2304      	movs	r3, #4
 80013c0:	737b      	strb	r3, [r7, #13]
	I2CGpio_handle.GPIO_PinConfig.GPIO_PinOType = GPIO_OPTYPE_OPENDRAIN;
 80013c2:	2301      	movs	r3, #1
 80013c4:	733b      	strb	r3, [r7, #12]
	I2CGpio_handle.GPIO_PinConfig.GPIO_PinPuPdCtrl = GPIO_NO_PULLUP_PULLDOWN;
 80013c6:	2300      	movs	r3, #0
 80013c8:	72fb      	strb	r3, [r7, #11]
	I2CGpio_handle.GPIO_PinConfig.GPIO_PinSpeed = GPIO_FAST_SPD;
 80013ca:	2302      	movs	r3, #2
 80013cc:	72bb      	strb	r3, [r7, #10]

	I2CGpio_handle.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN6;
 80013ce:	2306      	movs	r3, #6
 80013d0:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2CGpio_handle);
 80013d2:	1d3b      	adds	r3, r7, #4
 80013d4:	4618      	mov	r0, r3
 80013d6:	f7ff fb17 	bl	8000a08 <GPIO_Init>

	//initialize PC7 I2C SDA
	I2CGpio_handle.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN7;
 80013da:	2307      	movs	r3, #7
 80013dc:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2CGpio_handle);
 80013de:	1d3b      	adds	r3, r7, #4
 80013e0:	4618      	mov	r0, r3
 80013e2:	f7ff fb11 	bl	8000a08 <GPIO_Init>
}
 80013e6:	bf00      	nop
 80013e8:	3710      	adds	r7, #16
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	40020400 	.word	0x40020400

080013f4 <i2c_init>:

void i2c_init(void){
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0

	I2C_handle.pI2Cx = I2C1;
 80013f8:	4b09      	ldr	r3, [pc, #36]	@ (8001420 <i2c_init+0x2c>)
 80013fa:	4a0a      	ldr	r2, [pc, #40]	@ (8001424 <i2c_init+0x30>)
 80013fc:	601a      	str	r2, [r3, #0]
	I2C_handle.I2C_Config.I2C_AckControl = I2C_ACK_ENABLE;
 80013fe:	4b08      	ldr	r3, [pc, #32]	@ (8001420 <i2c_init+0x2c>)
 8001400:	2201      	movs	r2, #1
 8001402:	725a      	strb	r2, [r3, #9]
	I2C_handle.I2C_Config.I2C_DeviceAddress = 0x61;
 8001404:	4b06      	ldr	r3, [pc, #24]	@ (8001420 <i2c_init+0x2c>)
 8001406:	2261      	movs	r2, #97	@ 0x61
 8001408:	721a      	strb	r2, [r3, #8]
	I2C_handle.I2C_Config.I2C_FMDutyCycle	= I2C_FM_DUTY_2;
 800140a:	4b05      	ldr	r3, [pc, #20]	@ (8001420 <i2c_init+0x2c>)
 800140c:	2200      	movs	r2, #0
 800140e:	729a      	strb	r2, [r3, #10]
	I2C_handle.I2C_Config.I2C_SCLSpeed	= I2C_SCL_SPEED_STANDARD;
 8001410:	4b03      	ldr	r3, [pc, #12]	@ (8001420 <i2c_init+0x2c>)
 8001412:	4a05      	ldr	r2, [pc, #20]	@ (8001428 <i2c_init+0x34>)
 8001414:	605a      	str	r2, [r3, #4]
	I2C_Init(&I2C_handle);
 8001416:	4802      	ldr	r0, [pc, #8]	@ (8001420 <i2c_init+0x2c>)
 8001418:	f7ff fdd0 	bl	8000fbc <I2C_Init>

}
 800141c:	bf00      	nop
 800141e:	bd80      	pop	{r7, pc}
 8001420:	2000002c 	.word	0x2000002c
 8001424:	40005400 	.word	0x40005400
 8001428:	000186a0 	.word	0x000186a0

0800142c <main>:

int main(void){
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0

	i2c_gpioinit();
 8001430:	f7ff ffbe 	bl	80013b0 <i2c_gpioinit>

	gpio_init();
 8001434:	f7ff ffa0 	bl	8001378 <gpio_init>

	i2c_init();
 8001438:	f7ff ffdc 	bl	80013f4 <i2c_init>

	//IRQ Configurations

	//ENABLED IRQ_NUMBER_EXTI10_15 = IRQ 40, TO BE RECEIVED AND PROCESSED BY THE CPU
	GPIO_IRQInterruptConfig(IRQ_NUMBER_EXTI10_15, ENABLE);
 800143c:	2101      	movs	r1, #1
 800143e:	2028      	movs	r0, #40	@ 0x28
 8001440:	f7ff fca8 	bl	8000d94 <GPIO_IRQInterruptConfig>

	//SETS THE PRIORITY OF IRQ 40 TO HIGHEST PRIOTITY THE LESSER THE NUMBER THE HIGHER THE PRIORITY
	GPIO_IRQPriorityConfig(IRQ_NUMBER_EXTI10_15, 1);
 8001444:	2101      	movs	r1, #1
 8001446:	2028      	movs	r0, #40	@ 0x28
 8001448:	f7ff fce2 	bl	8000e10 <GPIO_IRQPriorityConfig>

	I2C_PeripheralControl(I2C1, ENABLE);
 800144c:	2101      	movs	r1, #1
 800144e:	4802      	ldr	r0, [pc, #8]	@ (8001458 <main+0x2c>)
 8001450:	f7ff fd98 	bl	8000f84 <I2C_PeripheralControl>

	while(1){
 8001454:	bf00      	nop
 8001456:	e7fd      	b.n	8001454 <main+0x28>
 8001458:	40005400 	.word	0x40005400

0800145c <EXTI15_10_IRQHandler>:
	return 0;
}



void EXTI15_10_IRQHandler(){
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0

	delay();
 8001460:	f7ff ff74 	bl	800134c <delay>

	I2C_MasterSendData(&I2C_handle, msg, strlen((char*)msg), 0x68);
 8001464:	4806      	ldr	r0, [pc, #24]	@ (8001480 <EXTI15_10_IRQHandler+0x24>)
 8001466:	f7fe fecf 	bl	8000208 <strlen>
 800146a:	4602      	mov	r2, r0
 800146c:	2368      	movs	r3, #104	@ 0x68
 800146e:	4904      	ldr	r1, [pc, #16]	@ (8001480 <EXTI15_10_IRQHandler+0x24>)
 8001470:	4804      	ldr	r0, [pc, #16]	@ (8001484 <EXTI15_10_IRQHandler+0x28>)
 8001472:	f7ff fe39 	bl	80010e8 <I2C_MasterSendData>
	GPIO_IRQHandling(13);
 8001476:	200d      	movs	r0, #13
 8001478:	f7ff fcf8 	bl	8000e6c <GPIO_IRQHandling>

}
 800147c:	bf00      	nop
 800147e:	bd80      	pop	{r7, pc}
 8001480:	20000000 	.word	0x20000000
 8001484:	2000002c 	.word	0x2000002c

08001488 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001488:	480d      	ldr	r0, [pc, #52]	@ (80014c0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800148a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800148c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001490:	480c      	ldr	r0, [pc, #48]	@ (80014c4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001492:	490d      	ldr	r1, [pc, #52]	@ (80014c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001494:	4a0d      	ldr	r2, [pc, #52]	@ (80014cc <LoopForever+0xe>)
  movs r3, #0
 8001496:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001498:	e002      	b.n	80014a0 <LoopCopyDataInit>

0800149a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800149a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800149c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800149e:	3304      	adds	r3, #4

080014a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014a4:	d3f9      	bcc.n	800149a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014a6:	4a0a      	ldr	r2, [pc, #40]	@ (80014d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80014a8:	4c0a      	ldr	r4, [pc, #40]	@ (80014d4 <LoopForever+0x16>)
  movs r3, #0
 80014aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014ac:	e001      	b.n	80014b2 <LoopFillZerobss>

080014ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014b0:	3204      	adds	r2, #4

080014b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014b4:	d3fb      	bcc.n	80014ae <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80014b6:	f000 f811 	bl	80014dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80014ba:	f7ff ffb7 	bl	800142c <main>

080014be <LoopForever>:

LoopForever:
  b LoopForever
 80014be:	e7fe      	b.n	80014be <LoopForever>
  ldr   r0, =_estack
 80014c0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80014c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014c8:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80014cc:	0800154c 	.word	0x0800154c
  ldr r2, =_sbss
 80014d0:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80014d4:	20000038 	.word	0x20000038

080014d8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80014d8:	e7fe      	b.n	80014d8 <ADC_IRQHandler>
	...

080014dc <__libc_init_array>:
 80014dc:	b570      	push	{r4, r5, r6, lr}
 80014de:	4d0d      	ldr	r5, [pc, #52]	@ (8001514 <__libc_init_array+0x38>)
 80014e0:	4c0d      	ldr	r4, [pc, #52]	@ (8001518 <__libc_init_array+0x3c>)
 80014e2:	1b64      	subs	r4, r4, r5
 80014e4:	10a4      	asrs	r4, r4, #2
 80014e6:	2600      	movs	r6, #0
 80014e8:	42a6      	cmp	r6, r4
 80014ea:	d109      	bne.n	8001500 <__libc_init_array+0x24>
 80014ec:	4d0b      	ldr	r5, [pc, #44]	@ (800151c <__libc_init_array+0x40>)
 80014ee:	4c0c      	ldr	r4, [pc, #48]	@ (8001520 <__libc_init_array+0x44>)
 80014f0:	f000 f818 	bl	8001524 <_init>
 80014f4:	1b64      	subs	r4, r4, r5
 80014f6:	10a4      	asrs	r4, r4, #2
 80014f8:	2600      	movs	r6, #0
 80014fa:	42a6      	cmp	r6, r4
 80014fc:	d105      	bne.n	800150a <__libc_init_array+0x2e>
 80014fe:	bd70      	pop	{r4, r5, r6, pc}
 8001500:	f855 3b04 	ldr.w	r3, [r5], #4
 8001504:	4798      	blx	r3
 8001506:	3601      	adds	r6, #1
 8001508:	e7ee      	b.n	80014e8 <__libc_init_array+0xc>
 800150a:	f855 3b04 	ldr.w	r3, [r5], #4
 800150e:	4798      	blx	r3
 8001510:	3601      	adds	r6, #1
 8001512:	e7f2      	b.n	80014fa <__libc_init_array+0x1e>
 8001514:	08001544 	.word	0x08001544
 8001518:	08001544 	.word	0x08001544
 800151c:	08001544 	.word	0x08001544
 8001520:	08001548 	.word	0x08001548

08001524 <_init>:
 8001524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001526:	bf00      	nop
 8001528:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800152a:	bc08      	pop	{r3}
 800152c:	469e      	mov	lr, r3
 800152e:	4770      	bx	lr

08001530 <_fini>:
 8001530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001532:	bf00      	nop
 8001534:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001536:	bc08      	pop	{r3}
 8001538:	469e      	mov	lr, r3
 800153a:	4770      	bx	lr
