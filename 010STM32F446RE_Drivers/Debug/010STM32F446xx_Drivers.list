
010STM32F446xx_Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002398  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08002568  08002568  00003568  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002614  08002614  00004068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08002614  08002614  00003614  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800261c  0800261c  00004068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800261c  0800261c  0000361c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002620  08002620  00003620  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08002624  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000594  20000068  0800268c  00004068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005fc  0800268c  000045fc  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00004068  2**0
                  CONTENTS, READONLY
 12 .debug_info   000022d5  00000000  00000000  00004092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000090b  00000000  00000000  00006367  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000278  00000000  00000000  00006c78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000001c5  00000000  00000000  00006ef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003de8  00000000  00000000  000070b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000349e  00000000  00000000  0000ae9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000d5a0  00000000  00000000  0000e33b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0001b8db  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000010c0  00000000  00000000  0001b920  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  0001c9e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000068 	.word	0x20000068
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08002550 	.word	0x08002550

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000006c 	.word	0x2000006c
 800020c:	08002550 	.word	0x08002550

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <RCC_GetPCLK1Value>:
 *
 * @return		- none
 *
 * @Note 		-
 */
uint32_t RCC_GetPCLK1Value(void) {
 80002c0:	b480      	push	{r7}
 80002c2:	b085      	sub	sp, #20
 80002c4:	af00      	add	r7, sp, #0
	uint32_t pclk1, system_clk;
	uint8_t clk_src, ahb_prescaler, apb1_prescaler;

	// Get the system clock source
	clk_src = (RCC->CFGR >> 2) & 0x3;
 80002c6:	4b23      	ldr	r3, [pc, #140]	@ (8000354 <RCC_GetPCLK1Value+0x94>)
 80002c8:	689b      	ldr	r3, [r3, #8]
 80002ca:	089b      	lsrs	r3, r3, #2
 80002cc:	b2db      	uxtb	r3, r3
 80002ce:	f003 0303 	and.w	r3, r3, #3
 80002d2:	727b      	strb	r3, [r7, #9]

	if (clk_src == 0) {
 80002d4:	7a7b      	ldrb	r3, [r7, #9]
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d102      	bne.n	80002e0 <RCC_GetPCLK1Value+0x20>
		// HSI oscillator used as system clock
		system_clk = 16e+6; // HSI frequency is 16 MHz
 80002da:	4b1f      	ldr	r3, [pc, #124]	@ (8000358 <RCC_GetPCLK1Value+0x98>)
 80002dc:	60fb      	str	r3, [r7, #12]
 80002de:	e004      	b.n	80002ea <RCC_GetPCLK1Value+0x2a>
	} else if (clk_src == 1) {
 80002e0:	7a7b      	ldrb	r3, [r7, #9]
 80002e2:	2b01      	cmp	r3, #1
 80002e4:	d101      	bne.n	80002ea <RCC_GetPCLK1Value+0x2a>
		// HSE oscillator used as system clock
		system_clk = 8e+6; // Assume HSE frequency is 8 MHz
 80002e6:	4b1d      	ldr	r3, [pc, #116]	@ (800035c <RCC_GetPCLK1Value+0x9c>)
 80002e8:	60fb      	str	r3, [r7, #12]
		// Calculate PLL output frequency (not shown here for brevity)
		//too complex, will add soon once I know how to use PLL as clock src.
	}

	// Get AHB prescaler
	ahb_prescaler = (RCC->CFGR >> 4) & 0xF;
 80002ea:	4b1a      	ldr	r3, [pc, #104]	@ (8000354 <RCC_GetPCLK1Value+0x94>)
 80002ec:	689b      	ldr	r3, [r3, #8]
 80002ee:	091b      	lsrs	r3, r3, #4
 80002f0:	b2db      	uxtb	r3, r3
 80002f2:	f003 030f 	and.w	r3, r3, #15
 80002f6:	72fb      	strb	r3, [r7, #11]
	if (ahb_prescaler < 8) {
 80002f8:	7afb      	ldrb	r3, [r7, #11]
 80002fa:	2b07      	cmp	r3, #7
 80002fc:	d802      	bhi.n	8000304 <RCC_GetPCLK1Value+0x44>
		ahb_prescaler = 1; // No division
 80002fe:	2301      	movs	r3, #1
 8000300:	72fb      	strb	r3, [r7, #11]
 8000302:	e005      	b.n	8000310 <RCC_GetPCLK1Value+0x50>
	} else {
		//this line is neat, this converts the binary value of the prescaler into its equivalent decimal value
		ahb_prescaler = 1 << (ahb_prescaler - 7); // 2, 4, 8, ..., 512
 8000304:	7afb      	ldrb	r3, [r7, #11]
 8000306:	3b07      	subs	r3, #7
 8000308:	2201      	movs	r2, #1
 800030a:	fa02 f303 	lsl.w	r3, r2, r3
 800030e:	72fb      	strb	r3, [r7, #11]
	}

	// Get APB1 prescaler
	apb1_prescaler = (RCC->CFGR >> 10) & 0x7;
 8000310:	4b10      	ldr	r3, [pc, #64]	@ (8000354 <RCC_GetPCLK1Value+0x94>)
 8000312:	689b      	ldr	r3, [r3, #8]
 8000314:	0a9b      	lsrs	r3, r3, #10
 8000316:	b2db      	uxtb	r3, r3
 8000318:	f003 0307 	and.w	r3, r3, #7
 800031c:	72bb      	strb	r3, [r7, #10]
	if (apb1_prescaler < 4) {
 800031e:	7abb      	ldrb	r3, [r7, #10]
 8000320:	2b03      	cmp	r3, #3
 8000322:	d802      	bhi.n	800032a <RCC_GetPCLK1Value+0x6a>
		apb1_prescaler = 1; // No division
 8000324:	2301      	movs	r3, #1
 8000326:	72bb      	strb	r3, [r7, #10]
 8000328:	e005      	b.n	8000336 <RCC_GetPCLK1Value+0x76>
	} else {
		apb1_prescaler = 1 << (apb1_prescaler - 3); // 2, 4, 8, 16
 800032a:	7abb      	ldrb	r3, [r7, #10]
 800032c:	3b03      	subs	r3, #3
 800032e:	2201      	movs	r2, #1
 8000330:	fa02 f303 	lsl.w	r3, r2, r3
 8000334:	72bb      	strb	r3, [r7, #10]
	}

	// Calculate PCLK1
	pclk1 = (system_clk / ahb_prescaler) / apb1_prescaler;
 8000336:	7afb      	ldrb	r3, [r7, #11]
 8000338:	68fa      	ldr	r2, [r7, #12]
 800033a:	fbb2 f2f3 	udiv	r2, r2, r3
 800033e:	7abb      	ldrb	r3, [r7, #10]
 8000340:	fbb2 f3f3 	udiv	r3, r2, r3
 8000344:	607b      	str	r3, [r7, #4]

	return pclk1;
 8000346:	687b      	ldr	r3, [r7, #4]
}
 8000348:	4618      	mov	r0, r3
 800034a:	3714      	adds	r7, #20
 800034c:	46bd      	mov	sp, r7
 800034e:	bc80      	pop	{r7}
 8000350:	4770      	bx	lr
 8000352:	bf00      	nop
 8000354:	40023800 	.word	0x40023800
 8000358:	00f42400 	.word	0x00f42400
 800035c:	007a1200 	.word	0x007a1200

08000360 <RCC_GetPCLK2Value>:
 *
 * @return		- none
 *
 * @Note 		-
 */
uint32_t RCC_GetPCLK2Value(void) {
 8000360:	b480      	push	{r7}
 8000362:	b085      	sub	sp, #20
 8000364:	af00      	add	r7, sp, #0
	uint32_t pclk2, system_clk;
	uint8_t clk_src, ahb_prescaler, apb2_prescaler;

	// Get the system clock source
	clk_src = (RCC->CFGR >> 2) & 0x3;
 8000366:	4b23      	ldr	r3, [pc, #140]	@ (80003f4 <RCC_GetPCLK2Value+0x94>)
 8000368:	689b      	ldr	r3, [r3, #8]
 800036a:	089b      	lsrs	r3, r3, #2
 800036c:	b2db      	uxtb	r3, r3
 800036e:	f003 0303 	and.w	r3, r3, #3
 8000372:	727b      	strb	r3, [r7, #9]

	if (clk_src == 0) {
 8000374:	7a7b      	ldrb	r3, [r7, #9]
 8000376:	2b00      	cmp	r3, #0
 8000378:	d102      	bne.n	8000380 <RCC_GetPCLK2Value+0x20>
		// HSI oscillator used as system clock
		system_clk = 16e+6; // HSI frequency is 16 MHz
 800037a:	4b1f      	ldr	r3, [pc, #124]	@ (80003f8 <RCC_GetPCLK2Value+0x98>)
 800037c:	60fb      	str	r3, [r7, #12]
 800037e:	e004      	b.n	800038a <RCC_GetPCLK2Value+0x2a>
	} else if (clk_src == 1) {
 8000380:	7a7b      	ldrb	r3, [r7, #9]
 8000382:	2b01      	cmp	r3, #1
 8000384:	d101      	bne.n	800038a <RCC_GetPCLK2Value+0x2a>
		// HSE oscillator used as system clock
		system_clk = 8e+6; // Assume HSE frequency is 8 MHz
 8000386:	4b1d      	ldr	r3, [pc, #116]	@ (80003fc <RCC_GetPCLK2Value+0x9c>)
 8000388:	60fb      	str	r3, [r7, #12]
		// Calculate PLL output frequency (not shown here for brevity)
		//too complex, will add soon once I know how to use PLL as clock src.
	}

	// Get AHB prescaler
	ahb_prescaler = (RCC->CFGR >> 4) & 0xF;
 800038a:	4b1a      	ldr	r3, [pc, #104]	@ (80003f4 <RCC_GetPCLK2Value+0x94>)
 800038c:	689b      	ldr	r3, [r3, #8]
 800038e:	091b      	lsrs	r3, r3, #4
 8000390:	b2db      	uxtb	r3, r3
 8000392:	f003 030f 	and.w	r3, r3, #15
 8000396:	72fb      	strb	r3, [r7, #11]
	if (ahb_prescaler < 8) {
 8000398:	7afb      	ldrb	r3, [r7, #11]
 800039a:	2b07      	cmp	r3, #7
 800039c:	d802      	bhi.n	80003a4 <RCC_GetPCLK2Value+0x44>
		ahb_prescaler = 1; // No division
 800039e:	2301      	movs	r3, #1
 80003a0:	72fb      	strb	r3, [r7, #11]
 80003a2:	e005      	b.n	80003b0 <RCC_GetPCLK2Value+0x50>
	} else {
		//this line is neat, this converts the binary value of the prescaler into its equivalent decimal value
		ahb_prescaler = 1 << (ahb_prescaler - 7); // 2, 4, 8, ..., 512
 80003a4:	7afb      	ldrb	r3, [r7, #11]
 80003a6:	3b07      	subs	r3, #7
 80003a8:	2201      	movs	r2, #1
 80003aa:	fa02 f303 	lsl.w	r3, r2, r3
 80003ae:	72fb      	strb	r3, [r7, #11]
	}

	// Get APB2 prescaler
	apb2_prescaler = (RCC->CFGR >> 10) & 0x7;
 80003b0:	4b10      	ldr	r3, [pc, #64]	@ (80003f4 <RCC_GetPCLK2Value+0x94>)
 80003b2:	689b      	ldr	r3, [r3, #8]
 80003b4:	0a9b      	lsrs	r3, r3, #10
 80003b6:	b2db      	uxtb	r3, r3
 80003b8:	f003 0307 	and.w	r3, r3, #7
 80003bc:	72bb      	strb	r3, [r7, #10]
	if (apb2_prescaler < 4) {
 80003be:	7abb      	ldrb	r3, [r7, #10]
 80003c0:	2b03      	cmp	r3, #3
 80003c2:	d802      	bhi.n	80003ca <RCC_GetPCLK2Value+0x6a>
		apb2_prescaler = 1; // No division
 80003c4:	2301      	movs	r3, #1
 80003c6:	72bb      	strb	r3, [r7, #10]
 80003c8:	e005      	b.n	80003d6 <RCC_GetPCLK2Value+0x76>
	} else {
		apb2_prescaler = 1 << (apb2_prescaler - 3); // 2, 4, 8, 16
 80003ca:	7abb      	ldrb	r3, [r7, #10]
 80003cc:	3b03      	subs	r3, #3
 80003ce:	2201      	movs	r2, #1
 80003d0:	fa02 f303 	lsl.w	r3, r2, r3
 80003d4:	72bb      	strb	r3, [r7, #10]
	}

	// Calculate PCLK1
	pclk2 = (system_clk / ahb_prescaler) / apb2_prescaler;
 80003d6:	7afb      	ldrb	r3, [r7, #11]
 80003d8:	68fa      	ldr	r2, [r7, #12]
 80003da:	fbb2 f2f3 	udiv	r2, r2, r3
 80003de:	7abb      	ldrb	r3, [r7, #10]
 80003e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80003e4:	607b      	str	r3, [r7, #4]

	return pclk2;
 80003e6:	687b      	ldr	r3, [r7, #4]
}
 80003e8:	4618      	mov	r0, r3
 80003ea:	3714      	adds	r7, #20
 80003ec:	46bd      	mov	sp, r7
 80003ee:	bc80      	pop	{r7}
 80003f0:	4770      	bx	lr
 80003f2:	bf00      	nop
 80003f4:	40023800 	.word	0x40023800
 80003f8:	00f42400 	.word	0x00f42400
 80003fc:	007a1200 	.word	0x007a1200

08000400 <GPIO_PeripheralClkCtrl>:
 * @return		- none
 *
 * @Note 		-
 */
void GPIO_PeripheralClkCtrl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 8000400:	b480      	push	{r7}
 8000402:	b085      	sub	sp, #20
 8000404:	af00      	add	r7, sp, #0
 8000406:	6078      	str	r0, [r7, #4]
 8000408:	460b      	mov	r3, r1
 800040a:	70fb      	strb	r3, [r7, #3]
	 * translates the GPIO port base addresses into primitive integer data for
	 * ease of use in switch case statement or other applications that require
	 * a more primitive type of data.
	 * note: GPIO port base addresses which are pointers are not primitive data types
	 */
	uint8_t temp1 = GPIO_BASEADDR_TO_CODE(pGPIOx);
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	4a6c      	ldr	r2, [pc, #432]	@ (80005c0 <GPIO_PeripheralClkCtrl+0x1c0>)
 8000410:	4293      	cmp	r3, r2
 8000412:	d02b      	beq.n	800046c <GPIO_PeripheralClkCtrl+0x6c>
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	4a6b      	ldr	r2, [pc, #428]	@ (80005c4 <GPIO_PeripheralClkCtrl+0x1c4>)
 8000418:	4293      	cmp	r3, r2
 800041a:	d025      	beq.n	8000468 <GPIO_PeripheralClkCtrl+0x68>
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	4a6a      	ldr	r2, [pc, #424]	@ (80005c8 <GPIO_PeripheralClkCtrl+0x1c8>)
 8000420:	4293      	cmp	r3, r2
 8000422:	d01f      	beq.n	8000464 <GPIO_PeripheralClkCtrl+0x64>
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	4a69      	ldr	r2, [pc, #420]	@ (80005cc <GPIO_PeripheralClkCtrl+0x1cc>)
 8000428:	4293      	cmp	r3, r2
 800042a:	d019      	beq.n	8000460 <GPIO_PeripheralClkCtrl+0x60>
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	4a68      	ldr	r2, [pc, #416]	@ (80005d0 <GPIO_PeripheralClkCtrl+0x1d0>)
 8000430:	4293      	cmp	r3, r2
 8000432:	d013      	beq.n	800045c <GPIO_PeripheralClkCtrl+0x5c>
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	4a67      	ldr	r2, [pc, #412]	@ (80005d4 <GPIO_PeripheralClkCtrl+0x1d4>)
 8000438:	4293      	cmp	r3, r2
 800043a:	d00d      	beq.n	8000458 <GPIO_PeripheralClkCtrl+0x58>
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	4a66      	ldr	r2, [pc, #408]	@ (80005d8 <GPIO_PeripheralClkCtrl+0x1d8>)
 8000440:	4293      	cmp	r3, r2
 8000442:	d007      	beq.n	8000454 <GPIO_PeripheralClkCtrl+0x54>
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	4a65      	ldr	r2, [pc, #404]	@ (80005dc <GPIO_PeripheralClkCtrl+0x1dc>)
 8000448:	4293      	cmp	r3, r2
 800044a:	d101      	bne.n	8000450 <GPIO_PeripheralClkCtrl+0x50>
 800044c:	2307      	movs	r3, #7
 800044e:	e00e      	b.n	800046e <GPIO_PeripheralClkCtrl+0x6e>
 8000450:	2300      	movs	r3, #0
 8000452:	e00c      	b.n	800046e <GPIO_PeripheralClkCtrl+0x6e>
 8000454:	2306      	movs	r3, #6
 8000456:	e00a      	b.n	800046e <GPIO_PeripheralClkCtrl+0x6e>
 8000458:	2305      	movs	r3, #5
 800045a:	e008      	b.n	800046e <GPIO_PeripheralClkCtrl+0x6e>
 800045c:	2304      	movs	r3, #4
 800045e:	e006      	b.n	800046e <GPIO_PeripheralClkCtrl+0x6e>
 8000460:	2303      	movs	r3, #3
 8000462:	e004      	b.n	800046e <GPIO_PeripheralClkCtrl+0x6e>
 8000464:	2302      	movs	r3, #2
 8000466:	e002      	b.n	800046e <GPIO_PeripheralClkCtrl+0x6e>
 8000468:	2301      	movs	r3, #1
 800046a:	e000      	b.n	800046e <GPIO_PeripheralClkCtrl+0x6e>
 800046c:	2300      	movs	r3, #0
 800046e:	73fb      	strb	r3, [r7, #15]

	if(EnorDi == ENABLE){
 8000470:	78fb      	ldrb	r3, [r7, #3]
 8000472:	2b01      	cmp	r3, #1
 8000474:	d14e      	bne.n	8000514 <GPIO_PeripheralClkCtrl+0x114>
		/*
		 * I've used switch case statements for better readability compared to previous
		 * version of else if statements.
		 */
		switch(temp1){
 8000476:	7bfb      	ldrb	r3, [r7, #15]
 8000478:	2b07      	cmp	r3, #7
 800047a:	f200 8099 	bhi.w	80005b0 <GPIO_PeripheralClkCtrl+0x1b0>
 800047e:	a201      	add	r2, pc, #4	@ (adr r2, 8000484 <GPIO_PeripheralClkCtrl+0x84>)
 8000480:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000484:	080004a5 	.word	0x080004a5
 8000488:	080004b3 	.word	0x080004b3
 800048c:	080004c1 	.word	0x080004c1
 8000490:	080004cf 	.word	0x080004cf
 8000494:	080004dd 	.word	0x080004dd
 8000498:	080004eb 	.word	0x080004eb
 800049c:	080004f9 	.word	0x080004f9
 80004a0:	08000507 	.word	0x08000507
		case 0:
			GPIOA_PCLK_EN();
 80004a4:	4b4e      	ldr	r3, [pc, #312]	@ (80005e0 <GPIO_PeripheralClkCtrl+0x1e0>)
 80004a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004a8:	4a4d      	ldr	r2, [pc, #308]	@ (80005e0 <GPIO_PeripheralClkCtrl+0x1e0>)
 80004aa:	f043 0301 	orr.w	r3, r3, #1
 80004ae:	6313      	str	r3, [r2, #48]	@ 0x30
			break;
 80004b0:	e081      	b.n	80005b6 <GPIO_PeripheralClkCtrl+0x1b6>
		case 1:
			GPIOB_PCLK_EN();
 80004b2:	4b4b      	ldr	r3, [pc, #300]	@ (80005e0 <GPIO_PeripheralClkCtrl+0x1e0>)
 80004b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004b6:	4a4a      	ldr	r2, [pc, #296]	@ (80005e0 <GPIO_PeripheralClkCtrl+0x1e0>)
 80004b8:	f043 0302 	orr.w	r3, r3, #2
 80004bc:	6313      	str	r3, [r2, #48]	@ 0x30
			break;
 80004be:	e07a      	b.n	80005b6 <GPIO_PeripheralClkCtrl+0x1b6>
		case 2:
			GPIOC_PCLK_EN();
 80004c0:	4b47      	ldr	r3, [pc, #284]	@ (80005e0 <GPIO_PeripheralClkCtrl+0x1e0>)
 80004c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004c4:	4a46      	ldr	r2, [pc, #280]	@ (80005e0 <GPIO_PeripheralClkCtrl+0x1e0>)
 80004c6:	f043 0304 	orr.w	r3, r3, #4
 80004ca:	6313      	str	r3, [r2, #48]	@ 0x30
			break;
 80004cc:	e073      	b.n	80005b6 <GPIO_PeripheralClkCtrl+0x1b6>
		case 3:
			GPIOD_PCLK_EN();
 80004ce:	4b44      	ldr	r3, [pc, #272]	@ (80005e0 <GPIO_PeripheralClkCtrl+0x1e0>)
 80004d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004d2:	4a43      	ldr	r2, [pc, #268]	@ (80005e0 <GPIO_PeripheralClkCtrl+0x1e0>)
 80004d4:	f043 0308 	orr.w	r3, r3, #8
 80004d8:	6313      	str	r3, [r2, #48]	@ 0x30
			break;
 80004da:	e06c      	b.n	80005b6 <GPIO_PeripheralClkCtrl+0x1b6>
		case 4:
			GPIOE_PCLK_EN();
 80004dc:	4b40      	ldr	r3, [pc, #256]	@ (80005e0 <GPIO_PeripheralClkCtrl+0x1e0>)
 80004de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004e0:	4a3f      	ldr	r2, [pc, #252]	@ (80005e0 <GPIO_PeripheralClkCtrl+0x1e0>)
 80004e2:	f043 0310 	orr.w	r3, r3, #16
 80004e6:	6313      	str	r3, [r2, #48]	@ 0x30
			break;
 80004e8:	e065      	b.n	80005b6 <GPIO_PeripheralClkCtrl+0x1b6>
		case 5:
			GPIOF_PCLK_EN();
 80004ea:	4b3d      	ldr	r3, [pc, #244]	@ (80005e0 <GPIO_PeripheralClkCtrl+0x1e0>)
 80004ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004ee:	4a3c      	ldr	r2, [pc, #240]	@ (80005e0 <GPIO_PeripheralClkCtrl+0x1e0>)
 80004f0:	f043 0320 	orr.w	r3, r3, #32
 80004f4:	6313      	str	r3, [r2, #48]	@ 0x30
			break;
 80004f6:	e05e      	b.n	80005b6 <GPIO_PeripheralClkCtrl+0x1b6>
		case 6:
			GPIOG_PCLK_EN();
 80004f8:	4b39      	ldr	r3, [pc, #228]	@ (80005e0 <GPIO_PeripheralClkCtrl+0x1e0>)
 80004fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004fc:	4a38      	ldr	r2, [pc, #224]	@ (80005e0 <GPIO_PeripheralClkCtrl+0x1e0>)
 80004fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000502:	6313      	str	r3, [r2, #48]	@ 0x30
			break;
 8000504:	e057      	b.n	80005b6 <GPIO_PeripheralClkCtrl+0x1b6>
		case 7:
			GPIOH_PCLK_EN();
 8000506:	4b36      	ldr	r3, [pc, #216]	@ (80005e0 <GPIO_PeripheralClkCtrl+0x1e0>)
 8000508:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800050a:	4a35      	ldr	r2, [pc, #212]	@ (80005e0 <GPIO_PeripheralClkCtrl+0x1e0>)
 800050c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000510:	6313      	str	r3, [r2, #48]	@ 0x30
			break;
 8000512:	e050      	b.n	80005b6 <GPIO_PeripheralClkCtrl+0x1b6>
			break;
		}

	}
	else{
		switch(temp1){
 8000514:	7bfb      	ldrb	r3, [r7, #15]
 8000516:	2b07      	cmp	r3, #7
 8000518:	d84c      	bhi.n	80005b4 <GPIO_PeripheralClkCtrl+0x1b4>
 800051a:	a201      	add	r2, pc, #4	@ (adr r2, 8000520 <GPIO_PeripheralClkCtrl+0x120>)
 800051c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000520:	08000541 	.word	0x08000541
 8000524:	0800054f 	.word	0x0800054f
 8000528:	0800055d 	.word	0x0800055d
 800052c:	0800056b 	.word	0x0800056b
 8000530:	08000579 	.word	0x08000579
 8000534:	08000587 	.word	0x08000587
 8000538:	08000595 	.word	0x08000595
 800053c:	080005a3 	.word	0x080005a3
		case 0:
			GPIOA_PCLK_DI();
 8000540:	4b27      	ldr	r3, [pc, #156]	@ (80005e0 <GPIO_PeripheralClkCtrl+0x1e0>)
 8000542:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000544:	4a26      	ldr	r2, [pc, #152]	@ (80005e0 <GPIO_PeripheralClkCtrl+0x1e0>)
 8000546:	f023 0301 	bic.w	r3, r3, #1
 800054a:	6313      	str	r3, [r2, #48]	@ 0x30
			break;
 800054c:	e033      	b.n	80005b6 <GPIO_PeripheralClkCtrl+0x1b6>
		case 1:
			GPIOB_PCLK_DI();
 800054e:	4b24      	ldr	r3, [pc, #144]	@ (80005e0 <GPIO_PeripheralClkCtrl+0x1e0>)
 8000550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000552:	4a23      	ldr	r2, [pc, #140]	@ (80005e0 <GPIO_PeripheralClkCtrl+0x1e0>)
 8000554:	f023 0302 	bic.w	r3, r3, #2
 8000558:	6313      	str	r3, [r2, #48]	@ 0x30
			break;
 800055a:	e02c      	b.n	80005b6 <GPIO_PeripheralClkCtrl+0x1b6>
		case 2:
			GPIOC_PCLK_DI();
 800055c:	4b20      	ldr	r3, [pc, #128]	@ (80005e0 <GPIO_PeripheralClkCtrl+0x1e0>)
 800055e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000560:	4a1f      	ldr	r2, [pc, #124]	@ (80005e0 <GPIO_PeripheralClkCtrl+0x1e0>)
 8000562:	f023 0304 	bic.w	r3, r3, #4
 8000566:	6313      	str	r3, [r2, #48]	@ 0x30
			break;
 8000568:	e025      	b.n	80005b6 <GPIO_PeripheralClkCtrl+0x1b6>
		case 3:
			GPIOD_PCLK_DI();
 800056a:	4b1d      	ldr	r3, [pc, #116]	@ (80005e0 <GPIO_PeripheralClkCtrl+0x1e0>)
 800056c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800056e:	4a1c      	ldr	r2, [pc, #112]	@ (80005e0 <GPIO_PeripheralClkCtrl+0x1e0>)
 8000570:	f023 0308 	bic.w	r3, r3, #8
 8000574:	6313      	str	r3, [r2, #48]	@ 0x30
			break;
 8000576:	e01e      	b.n	80005b6 <GPIO_PeripheralClkCtrl+0x1b6>
		case 4:
			GPIOE_PCLK_DI();
 8000578:	4b19      	ldr	r3, [pc, #100]	@ (80005e0 <GPIO_PeripheralClkCtrl+0x1e0>)
 800057a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800057c:	4a18      	ldr	r2, [pc, #96]	@ (80005e0 <GPIO_PeripheralClkCtrl+0x1e0>)
 800057e:	f023 0310 	bic.w	r3, r3, #16
 8000582:	6313      	str	r3, [r2, #48]	@ 0x30
			break;
 8000584:	e017      	b.n	80005b6 <GPIO_PeripheralClkCtrl+0x1b6>
		case 5:
			GPIOF_PCLK_DI();
 8000586:	4b16      	ldr	r3, [pc, #88]	@ (80005e0 <GPIO_PeripheralClkCtrl+0x1e0>)
 8000588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800058a:	4a15      	ldr	r2, [pc, #84]	@ (80005e0 <GPIO_PeripheralClkCtrl+0x1e0>)
 800058c:	f023 0320 	bic.w	r3, r3, #32
 8000590:	6313      	str	r3, [r2, #48]	@ 0x30
			break;
 8000592:	e010      	b.n	80005b6 <GPIO_PeripheralClkCtrl+0x1b6>
		case 6:
			GPIOG_PCLK_DI();
 8000594:	4b12      	ldr	r3, [pc, #72]	@ (80005e0 <GPIO_PeripheralClkCtrl+0x1e0>)
 8000596:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000598:	4a11      	ldr	r2, [pc, #68]	@ (80005e0 <GPIO_PeripheralClkCtrl+0x1e0>)
 800059a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800059e:	6313      	str	r3, [r2, #48]	@ 0x30
			break;
 80005a0:	e009      	b.n	80005b6 <GPIO_PeripheralClkCtrl+0x1b6>
		case 7:
			GPIOH_PCLK_DI();
 80005a2:	4b0f      	ldr	r3, [pc, #60]	@ (80005e0 <GPIO_PeripheralClkCtrl+0x1e0>)
 80005a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005a6:	4a0e      	ldr	r2, [pc, #56]	@ (80005e0 <GPIO_PeripheralClkCtrl+0x1e0>)
 80005a8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80005ac:	6313      	str	r3, [r2, #48]	@ 0x30
			break;
 80005ae:	e002      	b.n	80005b6 <GPIO_PeripheralClkCtrl+0x1b6>
			break;
 80005b0:	bf00      	nop
 80005b2:	e000      	b.n	80005b6 <GPIO_PeripheralClkCtrl+0x1b6>
		default:
			break;
 80005b4:	bf00      	nop
		}

	}

}
 80005b6:	bf00      	nop
 80005b8:	3714      	adds	r7, #20
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bc80      	pop	{r7}
 80005be:	4770      	bx	lr
 80005c0:	40020000 	.word	0x40020000
 80005c4:	40020400 	.word	0x40020400
 80005c8:	40020800 	.word	0x40020800
 80005cc:	40020c00 	.word	0x40020c00
 80005d0:	40021000 	.word	0x40021000
 80005d4:	40021400 	.word	0x40021400
 80005d8:	40021800 	.word	0x40021800
 80005dc:	40021c00 	.word	0x40021c00
 80005e0:	40023800 	.word	0x40023800

080005e4 <GPIO_Init>:
 *
 * @Note 		-
 */

void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b086      	sub	sp, #24
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
	GPIO_PeripheralClkCtrl(pGPIOHandle->pGPIOx, ENABLE);
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	2101      	movs	r1, #1
 80005f2:	4618      	mov	r0, r3
 80005f4:	f7ff ff04 	bl	8000400 <GPIO_PeripheralClkCtrl>

	uint32_t temp=0;
 80005f8:	2300      	movs	r3, #0
 80005fa:	617b      	str	r3, [r7, #20]

	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <=GPIO_MODE_ANALOG ){
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	795b      	ldrb	r3, [r3, #5]
 8000600:	2b03      	cmp	r3, #3
 8000602:	d822      	bhi.n	800064a <GPIO_Init+0x66>

		//1. Configure mode of GPIO pin
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)) );
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	795b      	ldrb	r3, [r3, #5]
 8000608:	461a      	mov	r2, r3
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	791b      	ldrb	r3, [r3, #4]
 800060e:	005b      	lsls	r3, r3, #1
 8000610:	fa02 f303 	lsl.w	r3, r2, r3
 8000614:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(3 << (2 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)) ); //clears the bit fields first before setting
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	681a      	ldr	r2, [r3, #0]
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	791b      	ldrb	r3, [r3, #4]
 8000620:	005b      	lsls	r3, r3, #1
 8000622:	2103      	movs	r1, #3
 8000624:	fa01 f303 	lsl.w	r3, r1, r3
 8000628:	43db      	mvns	r3, r3
 800062a:	4619      	mov	r1, r3
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	400a      	ands	r2, r1
 8000632:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; //sets the bit fields in the register
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	6819      	ldr	r1, [r3, #0]
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	697a      	ldr	r2, [r7, #20]
 8000640:	430a      	orrs	r2, r1
 8000642:	601a      	str	r2, [r3, #0]
		temp = 0;
 8000644:	2300      	movs	r3, #0
 8000646:	617b      	str	r3, [r7, #20]
 8000648:	e0ea      	b.n	8000820 <GPIO_Init+0x23c>
		//1. pin must be in input configuration
		//2. configure the edge trigger (RT,FT,RFT)
		//3. ENABLE INTERRUPT DELIVERY FROM PERIPHERAL TO THE PROCEssor (on peripheral side)

		//clears bits at the same time setting to input mode since input mode is "00".
		pGPIOHandle->pGPIOx->MODER &= ~(3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	681a      	ldr	r2, [r3, #0]
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	791b      	ldrb	r3, [r3, #4]
 8000654:	005b      	lsls	r3, r3, #1
 8000656:	2103      	movs	r1, #3
 8000658:	fa01 f303 	lsl.w	r3, r1, r3
 800065c:	43db      	mvns	r3, r3
 800065e:	4619      	mov	r1, r3
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	400a      	ands	r2, r1
 8000666:	601a      	str	r2, [r3, #0]

		switch(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode){
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	795b      	ldrb	r3, [r3, #5]
 800066c:	2b06      	cmp	r3, #6
 800066e:	d036      	beq.n	80006de <GPIO_Init+0xfa>
 8000670:	2b06      	cmp	r3, #6
 8000672:	dc4b      	bgt.n	800070c <GPIO_Init+0x128>
 8000674:	2b04      	cmp	r3, #4
 8000676:	d002      	beq.n	800067e <GPIO_Init+0x9a>
 8000678:	2b05      	cmp	r3, #5
 800067a:	d018      	beq.n	80006ae <GPIO_Init+0xca>
			//1. configure both FTSR & RTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
			break;
		default:
			break;
 800067c:	e046      	b.n	800070c <GPIO_Init+0x128>
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800067e:	4b44      	ldr	r3, [pc, #272]	@ (8000790 <GPIO_Init+0x1ac>)
 8000680:	68db      	ldr	r3, [r3, #12]
 8000682:	687a      	ldr	r2, [r7, #4]
 8000684:	7912      	ldrb	r2, [r2, #4]
 8000686:	4611      	mov	r1, r2
 8000688:	2201      	movs	r2, #1
 800068a:	408a      	lsls	r2, r1
 800068c:	4611      	mov	r1, r2
 800068e:	4a40      	ldr	r2, [pc, #256]	@ (8000790 <GPIO_Init+0x1ac>)
 8000690:	430b      	orrs	r3, r1
 8000692:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000694:	4b3e      	ldr	r3, [pc, #248]	@ (8000790 <GPIO_Init+0x1ac>)
 8000696:	689b      	ldr	r3, [r3, #8]
 8000698:	687a      	ldr	r2, [r7, #4]
 800069a:	7912      	ldrb	r2, [r2, #4]
 800069c:	4611      	mov	r1, r2
 800069e:	2201      	movs	r2, #1
 80006a0:	408a      	lsls	r2, r1
 80006a2:	43d2      	mvns	r2, r2
 80006a4:	4611      	mov	r1, r2
 80006a6:	4a3a      	ldr	r2, [pc, #232]	@ (8000790 <GPIO_Init+0x1ac>)
 80006a8:	400b      	ands	r3, r1
 80006aa:	6093      	str	r3, [r2, #8]
			break;
 80006ac:	e02f      	b.n	800070e <GPIO_Init+0x12a>
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006ae:	4b38      	ldr	r3, [pc, #224]	@ (8000790 <GPIO_Init+0x1ac>)
 80006b0:	689b      	ldr	r3, [r3, #8]
 80006b2:	687a      	ldr	r2, [r7, #4]
 80006b4:	7912      	ldrb	r2, [r2, #4]
 80006b6:	4611      	mov	r1, r2
 80006b8:	2201      	movs	r2, #1
 80006ba:	408a      	lsls	r2, r1
 80006bc:	4611      	mov	r1, r2
 80006be:	4a34      	ldr	r2, [pc, #208]	@ (8000790 <GPIO_Init+0x1ac>)
 80006c0:	430b      	orrs	r3, r1
 80006c2:	6093      	str	r3, [r2, #8]
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006c4:	4b32      	ldr	r3, [pc, #200]	@ (8000790 <GPIO_Init+0x1ac>)
 80006c6:	68db      	ldr	r3, [r3, #12]
 80006c8:	687a      	ldr	r2, [r7, #4]
 80006ca:	7912      	ldrb	r2, [r2, #4]
 80006cc:	4611      	mov	r1, r2
 80006ce:	2201      	movs	r2, #1
 80006d0:	408a      	lsls	r2, r1
 80006d2:	43d2      	mvns	r2, r2
 80006d4:	4611      	mov	r1, r2
 80006d6:	4a2e      	ldr	r2, [pc, #184]	@ (8000790 <GPIO_Init+0x1ac>)
 80006d8:	400b      	ands	r3, r1
 80006da:	60d3      	str	r3, [r2, #12]
			break;
 80006dc:	e017      	b.n	800070e <GPIO_Init+0x12a>
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006de:	4b2c      	ldr	r3, [pc, #176]	@ (8000790 <GPIO_Init+0x1ac>)
 80006e0:	68db      	ldr	r3, [r3, #12]
 80006e2:	687a      	ldr	r2, [r7, #4]
 80006e4:	7912      	ldrb	r2, [r2, #4]
 80006e6:	4611      	mov	r1, r2
 80006e8:	2201      	movs	r2, #1
 80006ea:	408a      	lsls	r2, r1
 80006ec:	4611      	mov	r1, r2
 80006ee:	4a28      	ldr	r2, [pc, #160]	@ (8000790 <GPIO_Init+0x1ac>)
 80006f0:	430b      	orrs	r3, r1
 80006f2:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006f4:	4b26      	ldr	r3, [pc, #152]	@ (8000790 <GPIO_Init+0x1ac>)
 80006f6:	689b      	ldr	r3, [r3, #8]
 80006f8:	687a      	ldr	r2, [r7, #4]
 80006fa:	7912      	ldrb	r2, [r2, #4]
 80006fc:	4611      	mov	r1, r2
 80006fe:	2201      	movs	r2, #1
 8000700:	408a      	lsls	r2, r1
 8000702:	4611      	mov	r1, r2
 8000704:	4a22      	ldr	r2, [pc, #136]	@ (8000790 <GPIO_Init+0x1ac>)
 8000706:	430b      	orrs	r3, r1
 8000708:	6093      	str	r3, [r2, #8]
			break;
 800070a:	e000      	b.n	800070e <GPIO_Init+0x12a>
			break;
 800070c:	bf00      	nop
		 * This part is where it chooses the specific EXTI line to program.
		 * temp1 chooses the specific EXTICR peripheral register (out of 4) to program
		 * With the given pin number, we then calculate how much left shift the bits need to program the specific
		 * EXTI which the GPIO number is associated with and stored into Lshift_val. EXTI0 = PIN 0's ----> EXTI15 = PIN 15's.
		 */
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	791b      	ldrb	r3, [r3, #4]
 8000712:	089b      	lsrs	r3, r3, #2
 8000714:	74fb      	strb	r3, [r7, #19]
		uint8_t Lshift_val = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	791b      	ldrb	r3, [r3, #4]
 800071a:	f003 0303 	and.w	r3, r3, #3
 800071e:	74bb      	strb	r3, [r7, #18]

		/*translates the given GPIO port address into a specific GPIO port code for programming
		 * the SYSCFG EXTICR peripheral register.*/
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	4a1b      	ldr	r2, [pc, #108]	@ (8000794 <GPIO_Init+0x1b0>)
 8000726:	4293      	cmp	r3, r2
 8000728:	d044      	beq.n	80007b4 <GPIO_Init+0x1d0>
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	4a1a      	ldr	r2, [pc, #104]	@ (8000798 <GPIO_Init+0x1b4>)
 8000730:	4293      	cmp	r3, r2
 8000732:	d02b      	beq.n	800078c <GPIO_Init+0x1a8>
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	4a18      	ldr	r2, [pc, #96]	@ (800079c <GPIO_Init+0x1b8>)
 800073a:	4293      	cmp	r3, r2
 800073c:	d024      	beq.n	8000788 <GPIO_Init+0x1a4>
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	4a17      	ldr	r2, [pc, #92]	@ (80007a0 <GPIO_Init+0x1bc>)
 8000744:	4293      	cmp	r3, r2
 8000746:	d01d      	beq.n	8000784 <GPIO_Init+0x1a0>
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	4a15      	ldr	r2, [pc, #84]	@ (80007a4 <GPIO_Init+0x1c0>)
 800074e:	4293      	cmp	r3, r2
 8000750:	d016      	beq.n	8000780 <GPIO_Init+0x19c>
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	4a14      	ldr	r2, [pc, #80]	@ (80007a8 <GPIO_Init+0x1c4>)
 8000758:	4293      	cmp	r3, r2
 800075a:	d00f      	beq.n	800077c <GPIO_Init+0x198>
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	4a12      	ldr	r2, [pc, #72]	@ (80007ac <GPIO_Init+0x1c8>)
 8000762:	4293      	cmp	r3, r2
 8000764:	d008      	beq.n	8000778 <GPIO_Init+0x194>
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	4a11      	ldr	r2, [pc, #68]	@ (80007b0 <GPIO_Init+0x1cc>)
 800076c:	4293      	cmp	r3, r2
 800076e:	d101      	bne.n	8000774 <GPIO_Init+0x190>
 8000770:	2307      	movs	r3, #7
 8000772:	e020      	b.n	80007b6 <GPIO_Init+0x1d2>
 8000774:	2300      	movs	r3, #0
 8000776:	e01e      	b.n	80007b6 <GPIO_Init+0x1d2>
 8000778:	2306      	movs	r3, #6
 800077a:	e01c      	b.n	80007b6 <GPIO_Init+0x1d2>
 800077c:	2305      	movs	r3, #5
 800077e:	e01a      	b.n	80007b6 <GPIO_Init+0x1d2>
 8000780:	2304      	movs	r3, #4
 8000782:	e018      	b.n	80007b6 <GPIO_Init+0x1d2>
 8000784:	2303      	movs	r3, #3
 8000786:	e016      	b.n	80007b6 <GPIO_Init+0x1d2>
 8000788:	2302      	movs	r3, #2
 800078a:	e014      	b.n	80007b6 <GPIO_Init+0x1d2>
 800078c:	2301      	movs	r3, #1
 800078e:	e012      	b.n	80007b6 <GPIO_Init+0x1d2>
 8000790:	40013c00 	.word	0x40013c00
 8000794:	40020000 	.word	0x40020000
 8000798:	40020400 	.word	0x40020400
 800079c:	40020800 	.word	0x40020800
 80007a0:	40020c00 	.word	0x40020c00
 80007a4:	40021000 	.word	0x40021000
 80007a8:	40021400 	.word	0x40021400
 80007ac:	40021800 	.word	0x40021800
 80007b0:	40021c00 	.word	0x40021c00
 80007b4:	2300      	movs	r3, #0
 80007b6:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 80007b8:	4b6a      	ldr	r3, [pc, #424]	@ (8000964 <GPIO_Init+0x380>)
 80007ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007bc:	4a69      	ldr	r2, [pc, #420]	@ (8000964 <GPIO_Init+0x380>)
 80007be:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007c2:	6453      	str	r3, [r2, #68]	@ 0x44
		SYSCFG->EXTICR[temp1] &= ~(15 << (4*Lshift_val) ); //clears peripheral register bitfield
 80007c4:	4a68      	ldr	r2, [pc, #416]	@ (8000968 <GPIO_Init+0x384>)
 80007c6:	7cfb      	ldrb	r3, [r7, #19]
 80007c8:	3302      	adds	r3, #2
 80007ca:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80007ce:	7cbb      	ldrb	r3, [r7, #18]
 80007d0:	009b      	lsls	r3, r3, #2
 80007d2:	210f      	movs	r1, #15
 80007d4:	fa01 f303 	lsl.w	r3, r1, r3
 80007d8:	43db      	mvns	r3, r3
 80007da:	4618      	mov	r0, r3
 80007dc:	4962      	ldr	r1, [pc, #392]	@ (8000968 <GPIO_Init+0x384>)
 80007de:	7cfb      	ldrb	r3, [r7, #19]
 80007e0:	4002      	ands	r2, r0
 80007e2:	3302      	adds	r3, #2
 80007e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		SYSCFG->EXTICR[temp1] |= ( portcode << (4*Lshift_val) ); //clears peripheral register bitfield
 80007e8:	4a5f      	ldr	r2, [pc, #380]	@ (8000968 <GPIO_Init+0x384>)
 80007ea:	7cfb      	ldrb	r3, [r7, #19]
 80007ec:	3302      	adds	r3, #2
 80007ee:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80007f2:	7c79      	ldrb	r1, [r7, #17]
 80007f4:	7cbb      	ldrb	r3, [r7, #18]
 80007f6:	009b      	lsls	r3, r3, #2
 80007f8:	fa01 f303 	lsl.w	r3, r1, r3
 80007fc:	4618      	mov	r0, r3
 80007fe:	495a      	ldr	r1, [pc, #360]	@ (8000968 <GPIO_Init+0x384>)
 8000800:	7cfb      	ldrb	r3, [r7, #19]
 8000802:	4302      	orrs	r2, r0
 8000804:	3302      	adds	r3, #2
 8000806:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		/*
		 * /3. enable the EXTI interrupt delivery using IMR.
		 *     Basically unmasks the interrupt that will run through the specific EXTI line
		 */
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800080a:	4b58      	ldr	r3, [pc, #352]	@ (800096c <GPIO_Init+0x388>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	687a      	ldr	r2, [r7, #4]
 8000810:	7912      	ldrb	r2, [r2, #4]
 8000812:	4611      	mov	r1, r2
 8000814:	2201      	movs	r2, #1
 8000816:	408a      	lsls	r2, r1
 8000818:	4611      	mov	r1, r2
 800081a:	4a54      	ldr	r2, [pc, #336]	@ (800096c <GPIO_Init+0x388>)
 800081c:	430b      	orrs	r3, r1
 800081e:	6013      	str	r3, [r2, #0]
	}

	//2. Configure pup pud settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdCtrl << (2 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)) );
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	79db      	ldrb	r3, [r3, #7]
 8000824:	461a      	mov	r2, r3
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	791b      	ldrb	r3, [r3, #4]
 800082a:	005b      	lsls	r3, r3, #1
 800082c:	fa02 f303 	lsl.w	r3, r2, r3
 8000830:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(3 << (2 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)) ); //clears the bit fields first before setting
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	68da      	ldr	r2, [r3, #12]
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	791b      	ldrb	r3, [r3, #4]
 800083c:	005b      	lsls	r3, r3, #1
 800083e:	2103      	movs	r1, #3
 8000840:	fa01 f303 	lsl.w	r3, r1, r3
 8000844:	43db      	mvns	r3, r3
 8000846:	4619      	mov	r1, r3
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	400a      	ands	r2, r1
 800084e:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp; //sets the bit fields
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	68d9      	ldr	r1, [r3, #12]
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	697a      	ldr	r2, [r7, #20]
 800085c:	430a      	orrs	r2, r1
 800085e:	60da      	str	r2, [r3, #12]
	temp = 0;
 8000860:	2300      	movs	r3, #0
 8000862:	617b      	str	r3, [r7, #20]

	//3. Configure output type & output speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOType << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	7a1b      	ldrb	r3, [r3, #8]
 8000868:	461a      	mov	r2, r3
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	791b      	ldrb	r3, [r3, #4]
 800086e:	fa02 f303 	lsl.w	r3, r2, r3
 8000872:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~(1 << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) ); //clears the bit fields
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	685a      	ldr	r2, [r3, #4]
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	791b      	ldrb	r3, [r3, #4]
 800087e:	4619      	mov	r1, r3
 8000880:	2301      	movs	r3, #1
 8000882:	408b      	lsls	r3, r1
 8000884:	43db      	mvns	r3, r3
 8000886:	4619      	mov	r1, r3
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	400a      	ands	r2, r1
 800088e:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp; //sets the bit fields
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	6859      	ldr	r1, [r3, #4]
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	697a      	ldr	r2, [r7, #20]
 800089c:	430a      	orrs	r2, r1
 800089e:	605a      	str	r2, [r3, #4]
	temp = 0;
 80008a0:	2300      	movs	r3, #0
 80008a2:	617b      	str	r3, [r7, #20]

	//sets GPIO output speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)) );
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	799b      	ldrb	r3, [r3, #6]
 80008a8:	461a      	mov	r2, r3
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	791b      	ldrb	r3, [r3, #4]
 80008ae:	005b      	lsls	r3, r3, #1
 80008b0:	fa02 f303 	lsl.w	r3, r2, r3
 80008b4:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDER &= ~(3 << (2 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)) ); //clears the bit fields
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	689a      	ldr	r2, [r3, #8]
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	791b      	ldrb	r3, [r3, #4]
 80008c0:	005b      	lsls	r3, r3, #1
 80008c2:	2103      	movs	r1, #3
 80008c4:	fa01 f303 	lsl.w	r3, r1, r3
 80008c8:	43db      	mvns	r3, r3
 80008ca:	4619      	mov	r1, r3
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	400a      	ands	r2, r1
 80008d2:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDER |= temp; //sets the bit fields
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	6899      	ldr	r1, [r3, #8]
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	697a      	ldr	r2, [r7, #20]
 80008e0:	430a      	orrs	r2, r1
 80008e2:	609a      	str	r2, [r3, #8]
	temp = 0;
 80008e4:	2300      	movs	r3, #0
 80008e6:	617b      	str	r3, [r7, #20]


	//4. Configure alternate function setting (if GPIO is set at alternate function mode)
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN){
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	795b      	ldrb	r3, [r3, #5]
 80008ec:	2b02      	cmp	r3, #2
 80008ee:	d134      	bne.n	800095a <GPIO_Init+0x376>
		 * The resulting quotient selects whether AFRL = 0 or AFRH = 1 to be used as index in the AFR array
		 * Logic behind: any number that is less than 8 divided by 8 will result in a quotient of 0 since only the integer part is stored
		 * in the variable hence it will  use the 0 index which the AFRL address is at.
		 * If the number (pin number) is greater than 8, the resulting quotient is 1 hence will use the index 1 which the AFRH address is at
		 */
		uint8_t temp1 = ((pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) / 8);
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	791b      	ldrb	r3, [r3, #4]
 80008f4:	08db      	lsrs	r3, r3, #3
 80008f6:	743b      	strb	r3, [r7, #16]

		/*
		 * the resulting modulo determines the left shift needed for setting the peripheral register
		 */
		uint8_t Lshift_val = ((pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) % 8);
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	791b      	ldrb	r3, [r3, #4]
 80008fc:	f003 0307 	and.w	r3, r3, #7
 8000900:	73fb      	strb	r3, [r7, #15]

		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinAFMode << (4 * Lshift_val) );
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	7a5b      	ldrb	r3, [r3, #9]
 8000906:	461a      	mov	r2, r3
 8000908:	7bfb      	ldrb	r3, [r7, #15]
 800090a:	009b      	lsls	r3, r3, #2
 800090c:	fa02 f303 	lsl.w	r3, r2, r3
 8000910:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(15 << (4 * Lshift_val) ); //clears the bit fields in the register before setting
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	7c3a      	ldrb	r2, [r7, #16]
 8000918:	3208      	adds	r2, #8
 800091a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800091e:	7bfb      	ldrb	r3, [r7, #15]
 8000920:	009b      	lsls	r3, r3, #2
 8000922:	220f      	movs	r2, #15
 8000924:	fa02 f303 	lsl.w	r3, r2, r3
 8000928:	43db      	mvns	r3, r3
 800092a:	4618      	mov	r0, r3
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	7c3a      	ldrb	r2, [r7, #16]
 8000932:	4001      	ands	r1, r0
 8000934:	3208      	adds	r2, #8
 8000936:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= temp;  //Sets the bit fields in the register
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	7c3a      	ldrb	r2, [r7, #16]
 8000940:	3208      	adds	r2, #8
 8000942:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	7c3a      	ldrb	r2, [r7, #16]
 800094c:	6979      	ldr	r1, [r7, #20]
 800094e:	4301      	orrs	r1, r0
 8000950:	3208      	adds	r2, #8
 8000952:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		temp = 0;
 8000956:	2300      	movs	r3, #0
 8000958:	617b      	str	r3, [r7, #20]
	}

}
 800095a:	bf00      	nop
 800095c:	3718      	adds	r7, #24
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	40023800 	.word	0x40023800
 8000968:	40013800 	.word	0x40013800
 800096c:	40013c00 	.word	0x40013c00

08000970 <GPIO_ReadInputPin>:
 * @return		- uint8_t
 *
 * @Note 		-
 */
uint8_t GPIO_ReadInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 8000970:	b480      	push	{r7}
 8000972:	b085      	sub	sp, #20
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
 8000978:	460b      	mov	r3, r1
 800097a:	70fb      	strb	r3, [r7, #3]
	 * then right shift the data according the the pin number putting the
	 * target data to the 0th bit (LSB) it is then put through a bitwise AND operator
	 * with 0th bit left at 1 to only extract the 0th bit value and clears the remaining 31 bits.
	 */
	uint8_t value;
	value = (uint8_t) ((pGPIOx->IDR >> PinNumber) & 0x00000001);
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	691a      	ldr	r2, [r3, #16]
 8000980:	78fb      	ldrb	r3, [r7, #3]
 8000982:	fa22 f303 	lsr.w	r3, r2, r3
 8000986:	b2db      	uxtb	r3, r3
 8000988:	f003 0301 	and.w	r3, r3, #1
 800098c:	73fb      	strb	r3, [r7, #15]
	return value;
 800098e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000990:	4618      	mov	r0, r3
 8000992:	3714      	adds	r7, #20
 8000994:	46bd      	mov	sp, r7
 8000996:	bc80      	pop	{r7}
 8000998:	4770      	bx	lr
	...

0800099c <USART_PeripheralClkCtrl>:
 * @return		- none
 *
 * @Note 		-
 */
void USART_PeripheralClkCtrl(USART_RegDef_t *pUSARTx, uint8_t EnorDi)
{
 800099c:	b480      	push	{r7}
 800099e:	b085      	sub	sp, #20
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
 80009a4:	460b      	mov	r3, r1
 80009a6:	70fb      	strb	r3, [r7, #3]
	uint8_t temp1 = USART_BASEADDR_TO_CODE(pUSARTx);
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	4a54      	ldr	r2, [pc, #336]	@ (8000afc <USART_PeripheralClkCtrl+0x160>)
 80009ac:	4293      	cmp	r3, r2
 80009ae:	d01f      	beq.n	80009f0 <USART_PeripheralClkCtrl+0x54>
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	4a53      	ldr	r2, [pc, #332]	@ (8000b00 <USART_PeripheralClkCtrl+0x164>)
 80009b4:	4293      	cmp	r3, r2
 80009b6:	d019      	beq.n	80009ec <USART_PeripheralClkCtrl+0x50>
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	4a52      	ldr	r2, [pc, #328]	@ (8000b04 <USART_PeripheralClkCtrl+0x168>)
 80009bc:	4293      	cmp	r3, r2
 80009be:	d013      	beq.n	80009e8 <USART_PeripheralClkCtrl+0x4c>
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	4a51      	ldr	r2, [pc, #324]	@ (8000b08 <USART_PeripheralClkCtrl+0x16c>)
 80009c4:	4293      	cmp	r3, r2
 80009c6:	d00d      	beq.n	80009e4 <USART_PeripheralClkCtrl+0x48>
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	4a50      	ldr	r2, [pc, #320]	@ (8000b0c <USART_PeripheralClkCtrl+0x170>)
 80009cc:	4293      	cmp	r3, r2
 80009ce:	d007      	beq.n	80009e0 <USART_PeripheralClkCtrl+0x44>
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	4a4f      	ldr	r2, [pc, #316]	@ (8000b10 <USART_PeripheralClkCtrl+0x174>)
 80009d4:	4293      	cmp	r3, r2
 80009d6:	d101      	bne.n	80009dc <USART_PeripheralClkCtrl+0x40>
 80009d8:	2305      	movs	r3, #5
 80009da:	e00a      	b.n	80009f2 <USART_PeripheralClkCtrl+0x56>
 80009dc:	2300      	movs	r3, #0
 80009de:	e008      	b.n	80009f2 <USART_PeripheralClkCtrl+0x56>
 80009e0:	2304      	movs	r3, #4
 80009e2:	e006      	b.n	80009f2 <USART_PeripheralClkCtrl+0x56>
 80009e4:	2303      	movs	r3, #3
 80009e6:	e004      	b.n	80009f2 <USART_PeripheralClkCtrl+0x56>
 80009e8:	2302      	movs	r3, #2
 80009ea:	e002      	b.n	80009f2 <USART_PeripheralClkCtrl+0x56>
 80009ec:	2301      	movs	r3, #1
 80009ee:	e000      	b.n	80009f2 <USART_PeripheralClkCtrl+0x56>
 80009f0:	2300      	movs	r3, #0
 80009f2:	73fb      	strb	r3, [r7, #15]

	if(EnorDi == ENABLE){
 80009f4:	78fb      	ldrb	r3, [r7, #3]
 80009f6:	2b01      	cmp	r3, #1
 80009f8:	d13c      	bne.n	8000a74 <USART_PeripheralClkCtrl+0xd8>
		switch(temp1){
 80009fa:	7bfb      	ldrb	r3, [r7, #15]
 80009fc:	2b05      	cmp	r3, #5
 80009fe:	d875      	bhi.n	8000aec <USART_PeripheralClkCtrl+0x150>
 8000a00:	a201      	add	r2, pc, #4	@ (adr r2, 8000a08 <USART_PeripheralClkCtrl+0x6c>)
 8000a02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a06:	bf00      	nop
 8000a08:	08000a21 	.word	0x08000a21
 8000a0c:	08000a2f 	.word	0x08000a2f
 8000a10:	08000a3d 	.word	0x08000a3d
 8000a14:	08000a4b 	.word	0x08000a4b
 8000a18:	08000a59 	.word	0x08000a59
 8000a1c:	08000a67 	.word	0x08000a67
		case 0:
			USART1_PCLK_EN();
 8000a20:	4b3c      	ldr	r3, [pc, #240]	@ (8000b14 <USART_PeripheralClkCtrl+0x178>)
 8000a22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a24:	4a3b      	ldr	r2, [pc, #236]	@ (8000b14 <USART_PeripheralClkCtrl+0x178>)
 8000a26:	f043 0310 	orr.w	r3, r3, #16
 8000a2a:	6453      	str	r3, [r2, #68]	@ 0x44
			break;
 8000a2c:	e061      	b.n	8000af2 <USART_PeripheralClkCtrl+0x156>
		case 1:
			USART2_PCLK_EN();
 8000a2e:	4b39      	ldr	r3, [pc, #228]	@ (8000b14 <USART_PeripheralClkCtrl+0x178>)
 8000a30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a32:	4a38      	ldr	r2, [pc, #224]	@ (8000b14 <USART_PeripheralClkCtrl+0x178>)
 8000a34:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a38:	6413      	str	r3, [r2, #64]	@ 0x40
			break;
 8000a3a:	e05a      	b.n	8000af2 <USART_PeripheralClkCtrl+0x156>
		case 2:
			USART3_PCLK_EN();
 8000a3c:	4b35      	ldr	r3, [pc, #212]	@ (8000b14 <USART_PeripheralClkCtrl+0x178>)
 8000a3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a40:	4a34      	ldr	r2, [pc, #208]	@ (8000b14 <USART_PeripheralClkCtrl+0x178>)
 8000a42:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000a46:	6413      	str	r3, [r2, #64]	@ 0x40
			break;
 8000a48:	e053      	b.n	8000af2 <USART_PeripheralClkCtrl+0x156>
		case 3:
			UART4_PCLK_EN();
 8000a4a:	4b32      	ldr	r3, [pc, #200]	@ (8000b14 <USART_PeripheralClkCtrl+0x178>)
 8000a4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a4e:	4a31      	ldr	r2, [pc, #196]	@ (8000b14 <USART_PeripheralClkCtrl+0x178>)
 8000a50:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000a54:	6413      	str	r3, [r2, #64]	@ 0x40
			break;
 8000a56:	e04c      	b.n	8000af2 <USART_PeripheralClkCtrl+0x156>
		case 4:
			UART5_PCLK_EN();
 8000a58:	4b2e      	ldr	r3, [pc, #184]	@ (8000b14 <USART_PeripheralClkCtrl+0x178>)
 8000a5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a5c:	4a2d      	ldr	r2, [pc, #180]	@ (8000b14 <USART_PeripheralClkCtrl+0x178>)
 8000a5e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000a62:	6413      	str	r3, [r2, #64]	@ 0x40
			break;
 8000a64:	e045      	b.n	8000af2 <USART_PeripheralClkCtrl+0x156>
		case 5:
			USART6_PCLK_EN();
 8000a66:	4b2b      	ldr	r3, [pc, #172]	@ (8000b14 <USART_PeripheralClkCtrl+0x178>)
 8000a68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a6a:	4a2a      	ldr	r2, [pc, #168]	@ (8000b14 <USART_PeripheralClkCtrl+0x178>)
 8000a6c:	f043 0320 	orr.w	r3, r3, #32
 8000a70:	6453      	str	r3, [r2, #68]	@ 0x44
			break;
 8000a72:	e03e      	b.n	8000af2 <USART_PeripheralClkCtrl+0x156>
		default:
			break;
		}
	}
	else{
		switch(temp1){
 8000a74:	7bfb      	ldrb	r3, [r7, #15]
 8000a76:	2b05      	cmp	r3, #5
 8000a78:	d83a      	bhi.n	8000af0 <USART_PeripheralClkCtrl+0x154>
 8000a7a:	a201      	add	r2, pc, #4	@ (adr r2, 8000a80 <USART_PeripheralClkCtrl+0xe4>)
 8000a7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a80:	08000a99 	.word	0x08000a99
 8000a84:	08000aa7 	.word	0x08000aa7
 8000a88:	08000ab5 	.word	0x08000ab5
 8000a8c:	08000ac3 	.word	0x08000ac3
 8000a90:	08000ad1 	.word	0x08000ad1
 8000a94:	08000adf 	.word	0x08000adf
		case 0:
			USART1_PCLK_EN();
 8000a98:	4b1e      	ldr	r3, [pc, #120]	@ (8000b14 <USART_PeripheralClkCtrl+0x178>)
 8000a9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a9c:	4a1d      	ldr	r2, [pc, #116]	@ (8000b14 <USART_PeripheralClkCtrl+0x178>)
 8000a9e:	f043 0310 	orr.w	r3, r3, #16
 8000aa2:	6453      	str	r3, [r2, #68]	@ 0x44
			break;
 8000aa4:	e025      	b.n	8000af2 <USART_PeripheralClkCtrl+0x156>
		case 1:
			USART2_PCLK_DI();
 8000aa6:	4b1b      	ldr	r3, [pc, #108]	@ (8000b14 <USART_PeripheralClkCtrl+0x178>)
 8000aa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aaa:	4a1a      	ldr	r2, [pc, #104]	@ (8000b14 <USART_PeripheralClkCtrl+0x178>)
 8000aac:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8000ab0:	6413      	str	r3, [r2, #64]	@ 0x40
			break;
 8000ab2:	e01e      	b.n	8000af2 <USART_PeripheralClkCtrl+0x156>
		case 2:
			USART3_PCLK_DI();
 8000ab4:	4b17      	ldr	r3, [pc, #92]	@ (8000b14 <USART_PeripheralClkCtrl+0x178>)
 8000ab6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ab8:	4a16      	ldr	r2, [pc, #88]	@ (8000b14 <USART_PeripheralClkCtrl+0x178>)
 8000aba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000abe:	6413      	str	r3, [r2, #64]	@ 0x40
			break;
 8000ac0:	e017      	b.n	8000af2 <USART_PeripheralClkCtrl+0x156>
		case 3:
			UART4_PCLK_DI();
 8000ac2:	4b14      	ldr	r3, [pc, #80]	@ (8000b14 <USART_PeripheralClkCtrl+0x178>)
 8000ac4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ac6:	4a13      	ldr	r2, [pc, #76]	@ (8000b14 <USART_PeripheralClkCtrl+0x178>)
 8000ac8:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8000acc:	6413      	str	r3, [r2, #64]	@ 0x40
			break;
 8000ace:	e010      	b.n	8000af2 <USART_PeripheralClkCtrl+0x156>
		case 4:
			UART5_PCLK_DI();
 8000ad0:	4b10      	ldr	r3, [pc, #64]	@ (8000b14 <USART_PeripheralClkCtrl+0x178>)
 8000ad2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ad4:	4a0f      	ldr	r2, [pc, #60]	@ (8000b14 <USART_PeripheralClkCtrl+0x178>)
 8000ad6:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8000ada:	6413      	str	r3, [r2, #64]	@ 0x40
			break;
 8000adc:	e009      	b.n	8000af2 <USART_PeripheralClkCtrl+0x156>
		case 5:
			USART6_PCLK_DI();
 8000ade:	4b0d      	ldr	r3, [pc, #52]	@ (8000b14 <USART_PeripheralClkCtrl+0x178>)
 8000ae0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ae2:	4a0c      	ldr	r2, [pc, #48]	@ (8000b14 <USART_PeripheralClkCtrl+0x178>)
 8000ae4:	f023 0320 	bic.w	r3, r3, #32
 8000ae8:	6453      	str	r3, [r2, #68]	@ 0x44
			break;
 8000aea:	e002      	b.n	8000af2 <USART_PeripheralClkCtrl+0x156>
			break;
 8000aec:	bf00      	nop
 8000aee:	e000      	b.n	8000af2 <USART_PeripheralClkCtrl+0x156>
		default:
			break;
 8000af0:	bf00      	nop
		}
	}
}
 8000af2:	bf00      	nop
 8000af4:	3714      	adds	r7, #20
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bc80      	pop	{r7}
 8000afa:	4770      	bx	lr
 8000afc:	40011000 	.word	0x40011000
 8000b00:	40004400 	.word	0x40004400
 8000b04:	40004800 	.word	0x40004800
 8000b08:	40004c00 	.word	0x40004c00
 8000b0c:	40005000 	.word	0x40005000
 8000b10:	40011400 	.word	0x40011400
 8000b14:	40023800 	.word	0x40023800

08000b18 <USART_Init>:
 * @return		- none
 *
 * @Note 		-
 */
void USART_Init(USART_Handle_t *pUSARTHandle)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b084      	sub	sp, #16
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
	uint32_t tempreg=0;
 8000b20:	2300      	movs	r3, #0
 8000b22:	60fb      	str	r3, [r7, #12]

	/******************************** Configuration of CR1******************************************/

	//enable the Clock for given USART peripheral
	USART_PeripheralClkCtrl(pUSARTHandle->pUSARTx, ENABLE);
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	2101      	movs	r1, #1
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f7ff ff36 	bl	800099c <USART_PeripheralClkCtrl>

	//enable Tx and Rx USART/UART engines according to user configuration
	switch(pUSARTHandle->USART_Config.USART_Mode)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	791b      	ldrb	r3, [r3, #4]
 8000b34:	2b02      	cmp	r3, #2
 8000b36:	d00f      	beq.n	8000b58 <USART_Init+0x40>
 8000b38:	2b02      	cmp	r3, #2
 8000b3a:	dc12      	bgt.n	8000b62 <USART_Init+0x4a>
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d006      	beq.n	8000b4e <USART_Init+0x36>
 8000b40:	2b01      	cmp	r3, #1
 8000b42:	d10e      	bne.n	8000b62 <USART_Init+0x4a>
	{
	case USART_MODE_ONLY_RX:
		tempreg |= 1 << USART_CR1_RE; //enable receiver
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	f043 0304 	orr.w	r3, r3, #4
 8000b4a:	60fb      	str	r3, [r7, #12]
		break;
 8000b4c:	e00a      	b.n	8000b64 <USART_Init+0x4c>
	case USART_MODE_ONLY_TX:
		tempreg |= 1 << USART_CR1_TE; //enable transmitter
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	f043 0308 	orr.w	r3, r3, #8
 8000b54:	60fb      	str	r3, [r7, #12]
		break;
 8000b56:	e005      	b.n	8000b64 <USART_Init+0x4c>
	case USART_MODE_TXRX:
		tempreg |= ( (1 << USART_CR1_TE) | (1 << USART_CR1_RE) ); //enable both transmitter and receiver
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	f043 030c 	orr.w	r3, r3, #12
 8000b5e:	60fb      	str	r3, [r7, #12]
		break;
 8000b60:	e000      	b.n	8000b64 <USART_Init+0x4c>
	default:
		break;
 8000b62:	bf00      	nop
	}

	//configure the Word length configuration item
	tempreg |= pUSARTHandle->USART_Config.USART_WordLength << USART_CR1_M;
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	7b1b      	ldrb	r3, [r3, #12]
 8000b68:	031b      	lsls	r3, r3, #12
 8000b6a:	68fa      	ldr	r2, [r7, #12]
 8000b6c:	4313      	orrs	r3, r2
 8000b6e:	60fb      	str	r3, [r7, #12]

	//configure the parity control
	switch(pUSARTHandle->USART_Config.USART_ParityControl)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	7b9b      	ldrb	r3, [r3, #14]
 8000b74:	2b01      	cmp	r3, #1
 8000b76:	d002      	beq.n	8000b7e <USART_Init+0x66>
 8000b78:	2b02      	cmp	r3, #2
 8000b7a:	d005      	beq.n	8000b88 <USART_Init+0x70>
	case USART_PARITY_EN_ODD:
		tempreg |= ( (1 << USART_CR1_PCE) | (1 << USART_CR1_PS) ); //enable parity control & configure to odd parity
		//tempreg |= 1 << USART_CR1_PS; //enable odd parity
		break;
	default:
		break;
 8000b7c:	e009      	b.n	8000b92 <USART_Init+0x7a>
		tempreg |= 1 << USART_CR1_PCE; //enable parity control at the same time will enable even parity by default
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000b84:	60fb      	str	r3, [r7, #12]
		break;
 8000b86:	e004      	b.n	8000b92 <USART_Init+0x7a>
		tempreg |= ( (1 << USART_CR1_PCE) | (1 << USART_CR1_PS) ); //enable parity control & configure to odd parity
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8000b8e:	60fb      	str	r3, [r7, #12]
		break;
 8000b90:	bf00      	nop
	}

	//Program the CR1 register
	pUSARTHandle->pUSARTx->CR1 = tempreg;
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	68fa      	ldr	r2, [r7, #12]
 8000b98:	60da      	str	r2, [r3, #12]

	/******************************** Configuration of CR2******************************************/

	tempreg=0;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	60fb      	str	r3, [r7, #12]

	//configure the number of stop bits inserted during USART frame transmission
	tempreg |= pUSARTHandle->USART_Config.USART_StopBits << USART_CR2_STOP;
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	7b5b      	ldrb	r3, [r3, #13]
 8000ba2:	031b      	lsls	r3, r3, #12
 8000ba4:	68fa      	ldr	r2, [r7, #12]
 8000ba6:	4313      	orrs	r3, r2
 8000ba8:	60fb      	str	r3, [r7, #12]

	//Program the CR2 register
	pUSARTHandle->pUSARTx->CR2 = tempreg;
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	68fa      	ldr	r2, [r7, #12]
 8000bb0:	611a      	str	r2, [r3, #16]

	/******************************** Configuration of CR3******************************************/

	tempreg=0;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	60fb      	str	r3, [r7, #12]

	//Configuration of USART hardware flow control
	switch(pUSARTHandle->USART_Config.USART_HWFlowControl)
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	7bdb      	ldrb	r3, [r3, #15]
 8000bba:	2b03      	cmp	r3, #3
 8000bbc:	d010      	beq.n	8000be0 <USART_Init+0xc8>
 8000bbe:	2b03      	cmp	r3, #3
 8000bc0:	dc13      	bgt.n	8000bea <USART_Init+0xd2>
 8000bc2:	2b01      	cmp	r3, #1
 8000bc4:	d002      	beq.n	8000bcc <USART_Init+0xb4>
 8000bc6:	2b02      	cmp	r3, #2
 8000bc8:	d005      	beq.n	8000bd6 <USART_Init+0xbe>
	case USART_HW_FLOW_CTRL_CTS_RTS:
		tempreg |= ( (1 << USART_CR3_CTSE) | (1 << USART_CR3_RTSE) ); //enable CTS flow control & RTS flow control
		//tempreg |= 1 << USART_CR3_RTSE; //enable RTS flow control
		break;
	default:
		break;
 8000bca:	e00e      	b.n	8000bea <USART_Init+0xd2>
		tempreg |= 1 << USART_CR3_CTSE; //enable CTS flow control
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000bd2:	60fb      	str	r3, [r7, #12]
		break;
 8000bd4:	e00a      	b.n	8000bec <USART_Init+0xd4>
		tempreg |= 1 << USART_CR3_RTSE; //enable RTS flow control
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000bdc:	60fb      	str	r3, [r7, #12]
		break;
 8000bde:	e005      	b.n	8000bec <USART_Init+0xd4>
		tempreg |= ( (1 << USART_CR3_CTSE) | (1 << USART_CR3_RTSE) ); //enable CTS flow control & RTS flow control
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8000be6:	60fb      	str	r3, [r7, #12]
		break;
 8000be8:	e000      	b.n	8000bec <USART_Init+0xd4>
		break;
 8000bea:	bf00      	nop
	}

	pUSARTHandle->pUSARTx->CR3 = tempreg;
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	68fa      	ldr	r2, [r7, #12]
 8000bf2:	615a      	str	r2, [r3, #20]

	/******************************** Configuration of BRR(Baudrate register)******************************************/
	USART_SetBaudRate(pUSARTHandle->pUSARTx, pUSARTHandle->USART_Config.USART_Baud);
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681a      	ldr	r2, [r3, #0]
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	689b      	ldr	r3, [r3, #8]
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	4610      	mov	r0, r2
 8000c00:	f000 f8ea 	bl	8000dd8 <USART_SetBaudRate>
}
 8000c04:	bf00      	nop
 8000c06:	3710      	adds	r7, #16
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}

08000c0c <USART_SendData>:
 * @return		- none
 *
 * @Note 		-
 */
void USART_SendData(USART_Handle_t *pUSARTHandle, uint8_t *pTxBuffer, uint32_t Len)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b086      	sub	sp, #24
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	60f8      	str	r0, [r7, #12]
 8000c14:	60b9      	str	r1, [r7, #8]
 8000c16:	607a      	str	r2, [r7, #4]
	uint16_t *pdata;

	for(uint32_t i = 0 ; i < Len; i++)
 8000c18:	2300      	movs	r3, #0
 8000c1a:	617b      	str	r3, [r7, #20]
 8000c1c:	e036      	b.n	8000c8c <USART_SendData+0x80>
	{
		//wait until TXE flag is set in the SR
		while( USART_GetFlagStatus(pUSARTHandle->pUSARTx,USART_SR_TXE) == 0 );
 8000c1e:	bf00      	nop
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	2107      	movs	r1, #7
 8000c26:	4618      	mov	r0, r3
 8000c28:	f000 f8a6 	bl	8000d78 <USART_GetFlagStatus>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d0f6      	beq.n	8000c20 <USART_SendData+0x14>

		//Check the USART_WordLength item for 9BIT or 8BIT in a frame
		if(pUSARTHandle->USART_Config.USART_WordLength == USART_WORDLEN_9BITS)
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	7b1b      	ldrb	r3, [r3, #12]
 8000c36:	2b01      	cmp	r3, #1
 8000c38:	d11d      	bne.n	8000c76 <USART_SendData+0x6a>
		{
			//if 9BIT, load the DR with 2bytes masking the bits other than first 9 bits
			pdata = (uint16_t*) pTxBuffer;
 8000c3a:	68bb      	ldr	r3, [r7, #8]
 8000c3c:	613b      	str	r3, [r7, #16]

			//check for USART_ParityControl
			if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	7b9b      	ldrb	r3, [r3, #14]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d10e      	bne.n	8000c64 <USART_SendData+0x58>
			{
				//No parity is used in this transfer. so, 9bits of user data will be sent
				pUSARTHandle->pUSARTx->DR = (*pdata & (uint16_t)0x01FF);
 8000c46:	693b      	ldr	r3, [r7, #16]
 8000c48:	881b      	ldrh	r3, [r3, #0]
 8000c4a:	461a      	mov	r2, r3
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000c54:	605a      	str	r2, [r3, #4]

				//increment pTxBuffer twice
				pTxBuffer++;
 8000c56:	68bb      	ldr	r3, [r7, #8]
 8000c58:	3301      	adds	r3, #1
 8000c5a:	60bb      	str	r3, [r7, #8]
				pTxBuffer++;
 8000c5c:	68bb      	ldr	r3, [r7, #8]
 8000c5e:	3301      	adds	r3, #1
 8000c60:	60bb      	str	r3, [r7, #8]
 8000c62:	e010      	b.n	8000c86 <USART_SendData+0x7a>
			}
			else
			{
				//Parity bit is used in this transfer . so , 8bits of user data will be sent
				pUSARTHandle->pUSARTx->DR = (*pTxBuffer  & (uint8_t)0xFF);
 8000c64:	68bb      	ldr	r3, [r7, #8]
 8000c66:	781a      	ldrb	r2, [r3, #0]
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	605a      	str	r2, [r3, #4]

				//The 9th bit will be replaced by parity bit by the hardware
				pTxBuffer++;
 8000c6e:	68bb      	ldr	r3, [r7, #8]
 8000c70:	3301      	adds	r3, #1
 8000c72:	60bb      	str	r3, [r7, #8]
 8000c74:	e007      	b.n	8000c86 <USART_SendData+0x7a>
			}
		}
		else
		{
			//This is 8bit data transfer
			pUSARTHandle->pUSARTx->DR = (*pTxBuffer  & (uint8_t)0xFF);
 8000c76:	68bb      	ldr	r3, [r7, #8]
 8000c78:	781a      	ldrb	r2, [r3, #0]
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	605a      	str	r2, [r3, #4]

			//increment the buffer address
			pTxBuffer++;
 8000c80:	68bb      	ldr	r3, [r7, #8]
 8000c82:	3301      	adds	r3, #1
 8000c84:	60bb      	str	r3, [r7, #8]
	for(uint32_t i = 0 ; i < Len; i++)
 8000c86:	697b      	ldr	r3, [r7, #20]
 8000c88:	3301      	adds	r3, #1
 8000c8a:	617b      	str	r3, [r7, #20]
 8000c8c:	697a      	ldr	r2, [r7, #20]
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	429a      	cmp	r2, r3
 8000c92:	d3c4      	bcc.n	8000c1e <USART_SendData+0x12>
		}

	}

	//wait till TC flag is set in the SR
	while( USART_GetFlagStatus(pUSARTHandle->pUSARTx,USART_SR_TC) == 0 );
 8000c94:	bf00      	nop
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	2106      	movs	r1, #6
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f000 f86b 	bl	8000d78 <USART_GetFlagStatus>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d0f6      	beq.n	8000c96 <USART_SendData+0x8a>

}
 8000ca8:	bf00      	nop
 8000caa:	bf00      	nop
 8000cac:	3718      	adds	r7, #24
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}

08000cb2 <USART_ReceiveDataIT>:
 * @return		- none
 *
 * @Note 		-
 */
uint8_t USART_ReceiveDataIT(USART_Handle_t *pUSARTHandle,uint8_t *pRxBuffer, uint32_t Len)
{
 8000cb2:	b480      	push	{r7}
 8000cb4:	b087      	sub	sp, #28
 8000cb6:	af00      	add	r7, sp, #0
 8000cb8:	60f8      	str	r0, [r7, #12]
 8000cba:	60b9      	str	r1, [r7, #8]
 8000cbc:	607a      	str	r2, [r7, #4]
	uint8_t rxstate = pUSARTHandle->RxBusyState;
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000cc4:	75fb      	strb	r3, [r7, #23]

	if(rxstate != USART_BUSY_IN_RX)
 8000cc6:	7dfb      	ldrb	r3, [r7, #23]
 8000cc8:	2b01      	cmp	r3, #1
 8000cca:	d011      	beq.n	8000cf0 <USART_ReceiveDataIT+0x3e>
	{
		pUSARTHandle->RxLen = Len;
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	687a      	ldr	r2, [r7, #4]
 8000cd0:	61da      	str	r2, [r3, #28]
		pUSARTHandle->pRxBuffer = pRxBuffer;
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	68ba      	ldr	r2, [r7, #8]
 8000cd6:	615a      	str	r2, [r3, #20]
		pUSARTHandle->RxBusyState = USART_BUSY_IN_RX;
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	2201      	movs	r2, #1
 8000cdc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

		pUSARTHandle->pUSARTx->CR1 |= (1 << USART_CR1_RXNEIE); //enable RXNE interrupt
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	68da      	ldr	r2, [r3, #12]
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	f042 0220 	orr.w	r2, r2, #32
 8000cee:	60da      	str	r2, [r3, #12]

	}

	return rxstate;
 8000cf0:	7dfb      	ldrb	r3, [r7, #23]

}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	371c      	adds	r7, #28
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bc80      	pop	{r7}
 8000cfa:	4770      	bx	lr

08000cfc <USART_IRQInterruptConfig>:
 * @return		- none
 *
 * @Note 		-
 */
void USART_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b085      	sub	sp, #20
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	4603      	mov	r3, r0
 8000d04:	460a      	mov	r2, r1
 8000d06:	71fb      	strb	r3, [r7, #7]
 8000d08:	4613      	mov	r3, r2
 8000d0a:	71bb      	strb	r3, [r7, #6]
	uint8_t iNVIC = IRQNumber / 32; //Gets the NVIC_ISER register index to program
 8000d0c:	79fb      	ldrb	r3, [r7, #7]
 8000d0e:	095b      	lsrs	r3, r3, #5
 8000d10:	73fb      	strb	r3, [r7, #15]
	uint8_t Lshift_val = IRQNumber % 32; //CALCULATES THE LEFT SHIFT VALUE FOR THE BITFIELD
 8000d12:	79fb      	ldrb	r3, [r7, #7]
 8000d14:	f003 031f 	and.w	r3, r3, #31
 8000d18:	73bb      	strb	r3, [r7, #14]

	if(EnorDi == ENABLE){
 8000d1a:	79bb      	ldrb	r3, [r7, #6]
 8000d1c:	2b01      	cmp	r3, #1
 8000d1e:	d114      	bne.n	8000d4a <USART_IRQInterruptConfig+0x4e>
		//ENABLE THE IRQ NUMBER
		*(NVIC_ISER_BASE_ADDR + iNVIC) |= (1 << Lshift_val);
 8000d20:	7bfb      	ldrb	r3, [r7, #15]
 8000d22:	009b      	lsls	r3, r3, #2
 8000d24:	f103 4360 	add.w	r3, r3, #3758096384	@ 0xe0000000
 8000d28:	f503 4361 	add.w	r3, r3, #57600	@ 0xe100
 8000d2c:	681a      	ldr	r2, [r3, #0]
 8000d2e:	7bbb      	ldrb	r3, [r7, #14]
 8000d30:	2101      	movs	r1, #1
 8000d32:	fa01 f303 	lsl.w	r3, r1, r3
 8000d36:	4619      	mov	r1, r3
 8000d38:	7bfb      	ldrb	r3, [r7, #15]
 8000d3a:	009b      	lsls	r3, r3, #2
 8000d3c:	f103 4360 	add.w	r3, r3, #3758096384	@ 0xe0000000
 8000d40:	f503 4361 	add.w	r3, r3, #57600	@ 0xe100
 8000d44:	430a      	orrs	r2, r1
 8000d46:	601a      	str	r2, [r3, #0]
	}
	else{
		//DISABLE THE IRQ NUMBER
		*(NVIC_ICER_BASE_ADDR + iNVIC) |= (1 << Lshift_val);
	}
}
 8000d48:	e00f      	b.n	8000d6a <USART_IRQInterruptConfig+0x6e>
		*(NVIC_ICER_BASE_ADDR + iNVIC) |= (1 << Lshift_val);
 8000d4a:	7bfb      	ldrb	r3, [r7, #15]
 8000d4c:	009a      	lsls	r2, r3, #2
 8000d4e:	4b09      	ldr	r3, [pc, #36]	@ (8000d74 <USART_IRQInterruptConfig+0x78>)
 8000d50:	4413      	add	r3, r2
 8000d52:	681a      	ldr	r2, [r3, #0]
 8000d54:	7bbb      	ldrb	r3, [r7, #14]
 8000d56:	2101      	movs	r1, #1
 8000d58:	fa01 f303 	lsl.w	r3, r1, r3
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	7bfb      	ldrb	r3, [r7, #15]
 8000d60:	0099      	lsls	r1, r3, #2
 8000d62:	4b04      	ldr	r3, [pc, #16]	@ (8000d74 <USART_IRQInterruptConfig+0x78>)
 8000d64:	440b      	add	r3, r1
 8000d66:	4302      	orrs	r2, r0
 8000d68:	601a      	str	r2, [r3, #0]
}
 8000d6a:	bf00      	nop
 8000d6c:	3714      	adds	r7, #20
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bc80      	pop	{r7}
 8000d72:	4770      	bx	lr
 8000d74:	e000e180 	.word	0xe000e180

08000d78 <USART_GetFlagStatus>:
 * @return		- uint8_t, returns the flag status
 *
 * @Note 		-
 */
uint8_t USART_GetFlagStatus(USART_RegDef_t *pUSARTx, uint8_t FlagName)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b085      	sub	sp, #20
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
 8000d80:	460b      	mov	r3, r1
 8000d82:	70fb      	strb	r3, [r7, #3]

	//gets the flag status from SR
	uint8_t flag_status = (pUSARTx->SR >> FlagName) & 0x0001;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681a      	ldr	r2, [r3, #0]
 8000d88:	78fb      	ldrb	r3, [r7, #3]
 8000d8a:	fa22 f303 	lsr.w	r3, r2, r3
 8000d8e:	b2db      	uxtb	r3, r3
 8000d90:	f003 0301 	and.w	r3, r3, #1
 8000d94:	73fb      	strb	r3, [r7, #15]

	//return the flag status
	return flag_status;
 8000d96:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d98:	4618      	mov	r0, r3
 8000d9a:	3714      	adds	r7, #20
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bc80      	pop	{r7}
 8000da0:	4770      	bx	lr

08000da2 <USART_PeripheralControl>:
 * @return		- none
 *
 * @Note 		-
 */
void USART_PeripheralControl(USART_RegDef_t *pUSARTx, uint8_t EnorDi)
{
 8000da2:	b480      	push	{r7}
 8000da4:	b083      	sub	sp, #12
 8000da6:	af00      	add	r7, sp, #0
 8000da8:	6078      	str	r0, [r7, #4]
 8000daa:	460b      	mov	r3, r1
 8000dac:	70fb      	strb	r3, [r7, #3]
	if (EnorDi == ENABLE) {
 8000dae:	78fb      	ldrb	r3, [r7, #3]
 8000db0:	2b01      	cmp	r3, #1
 8000db2:	d106      	bne.n	8000dc2 <USART_PeripheralControl+0x20>
		pUSARTx->CR1 |= (1 << USART_CR1_UE); //Enable the peripheral
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	68db      	ldr	r3, [r3, #12]
 8000db8:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	60da      	str	r2, [r3, #12]
	} else {
		pUSARTx->CR1 &= ~(1 << USART_CR1_UE); //Disable the peripheral
	}
}
 8000dc0:	e005      	b.n	8000dce <USART_PeripheralControl+0x2c>
		pUSARTx->CR1 &= ~(1 << USART_CR1_UE); //Disable the peripheral
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	68db      	ldr	r3, [r3, #12]
 8000dc6:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	60da      	str	r2, [r3, #12]
}
 8000dce:	bf00      	nop
 8000dd0:	370c      	adds	r7, #12
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bc80      	pop	{r7}
 8000dd6:	4770      	bx	lr

08000dd8 <USART_SetBaudRate>:
 * @return            -
 *
 * @Note              -
 */
void USART_SetBaudRate(USART_RegDef_t *pUSARTx, uint32_t BaudRate)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b088      	sub	sp, #32
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
 8000de0:	6039      	str	r1, [r7, #0]
	uint32_t PCLKx;
	uint32_t usartdiv;

	//Mantissa and Fraction variables
	uint32_t M_part,F_part;
	uint32_t tempreg=0;
 8000de2:	2300      	movs	r3, #0
 8000de4:	613b      	str	r3, [r7, #16]

	//fetch the APB clock value
	if(pUSARTx == USART1 || pUSARTx == USART6)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	4a31      	ldr	r2, [pc, #196]	@ (8000eb0 <USART_SetBaudRate+0xd8>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d003      	beq.n	8000df6 <USART_SetBaudRate+0x1e>
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	4a30      	ldr	r2, [pc, #192]	@ (8000eb4 <USART_SetBaudRate+0xdc>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d103      	bne.n	8000dfe <USART_SetBaudRate+0x26>
	{
		//USART1 and USART6 are hanging on APB2 bus
		PCLKx = RCC_GetPCLK2Value();
 8000df6:	f7ff fab3 	bl	8000360 <RCC_GetPCLK2Value>
 8000dfa:	61f8      	str	r0, [r7, #28]
 8000dfc:	e002      	b.n	8000e04 <USART_SetBaudRate+0x2c>
	}else
	{
		//the rest of USART peripheral are in APB1 bus
		PCLKx = RCC_GetPCLK1Value();
 8000dfe:	f7ff fa5f 	bl	80002c0 <RCC_GetPCLK1Value>
 8000e02:	61f8      	str	r0, [r7, #28]
	}

	//Check if OVER8 = 1
	if( pUSARTx->CR1 & (1 << USART_CR1_OVER8) )
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	68db      	ldr	r3, [r3, #12]
 8000e08:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d00b      	beq.n	8000e28 <USART_SetBaudRate+0x50>
	{
		//OVER8 = 1 , over sampling by 8
		usartdiv = ( (25 * PCLKx) / (2 *BaudRate) );
 8000e10:	69fa      	ldr	r2, [r7, #28]
 8000e12:	4613      	mov	r3, r2
 8000e14:	009b      	lsls	r3, r3, #2
 8000e16:	4413      	add	r3, r2
 8000e18:	009a      	lsls	r2, r3, #2
 8000e1a:	441a      	add	r2, r3
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	005b      	lsls	r3, r3, #1
 8000e20:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e24:	61bb      	str	r3, [r7, #24]
 8000e26:	e00a      	b.n	8000e3e <USART_SetBaudRate+0x66>
	}else
	{
		//over sampling by 16
		usartdiv = ( (25 * PCLKx) / (4 * BaudRate) );
 8000e28:	69fa      	ldr	r2, [r7, #28]
 8000e2a:	4613      	mov	r3, r2
 8000e2c:	009b      	lsls	r3, r3, #2
 8000e2e:	4413      	add	r3, r2
 8000e30:	009a      	lsls	r2, r3, #2
 8000e32:	441a      	add	r2, r3
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	009b      	lsls	r3, r3, #2
 8000e38:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e3c:	61bb      	str	r3, [r7, #24]
	}

	//Calculate the Mantissa part
	M_part = usartdiv/100;
 8000e3e:	69bb      	ldr	r3, [r7, #24]
 8000e40:	4a1d      	ldr	r2, [pc, #116]	@ (8000eb8 <USART_SetBaudRate+0xe0>)
 8000e42:	fba2 2303 	umull	r2, r3, r2, r3
 8000e46:	095b      	lsrs	r3, r3, #5
 8000e48:	60fb      	str	r3, [r7, #12]

	//Place the Mantissa part in appropriate bit position . refer USART_BRR
	tempreg |= M_part << 4;
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	011b      	lsls	r3, r3, #4
 8000e4e:	693a      	ldr	r2, [r7, #16]
 8000e50:	4313      	orrs	r3, r2
 8000e52:	613b      	str	r3, [r7, #16]

	//Extract the fraction part
	F_part = (usartdiv - (M_part * 100));
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	2264      	movs	r2, #100	@ 0x64
 8000e58:	fb02 f303 	mul.w	r3, r2, r3
 8000e5c:	69ba      	ldr	r2, [r7, #24]
 8000e5e:	1ad3      	subs	r3, r2, r3
 8000e60:	617b      	str	r3, [r7, #20]

	//Calculate the final fractional
	//check if OVER8 = 1
	if(pUSARTx->CR1 & ( 1 << USART_CR1_OVER8))
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	68db      	ldr	r3, [r3, #12]
 8000e66:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d00a      	beq.n	8000e84 <USART_SetBaudRate+0xac>
	{
		//OVER8 = 1 , over sampling by 8
		/*
		 * the "+50" is for the roundup factor
		 */
		F_part = ( ( (F_part * 8)+ 50 ) / 100 ) & ((uint8_t)0x07 ); //mask only the first 3 bits
 8000e6e:	697b      	ldr	r3, [r7, #20]
 8000e70:	00db      	lsls	r3, r3, #3
 8000e72:	3332      	adds	r3, #50	@ 0x32
 8000e74:	4a10      	ldr	r2, [pc, #64]	@ (8000eb8 <USART_SetBaudRate+0xe0>)
 8000e76:	fba2 2303 	umull	r2, r3, r2, r3
 8000e7a:	095b      	lsrs	r3, r3, #5
 8000e7c:	f003 0307 	and.w	r3, r3, #7
 8000e80:	617b      	str	r3, [r7, #20]
 8000e82:	e009      	b.n	8000e98 <USART_SetBaudRate+0xc0>
		//as indicated in reference manual to keep 4th bit clear

	}else
	{
		//over sampling by 16
		F_part = ((( F_part * 16)+ 50) / 100) & ((uint8_t)0x0F);
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	3332      	adds	r3, #50	@ 0x32
 8000e8a:	4a0b      	ldr	r2, [pc, #44]	@ (8000eb8 <USART_SetBaudRate+0xe0>)
 8000e8c:	fba2 2303 	umull	r2, r3, r2, r3
 8000e90:	095b      	lsrs	r3, r3, #5
 8000e92:	f003 030f 	and.w	r3, r3, #15
 8000e96:	617b      	str	r3, [r7, #20]

	}

	//Place the fractional part in appropriate bit position . refer USART_BRR
	tempreg |= F_part;
 8000e98:	693a      	ldr	r2, [r7, #16]
 8000e9a:	697b      	ldr	r3, [r7, #20]
 8000e9c:	4313      	orrs	r3, r2
 8000e9e:	613b      	str	r3, [r7, #16]

	//copy the value of tempreg in to BRR register
	pUSARTx->BRR = tempreg;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	693a      	ldr	r2, [r7, #16]
 8000ea4:	609a      	str	r2, [r3, #8]
}
 8000ea6:	bf00      	nop
 8000ea8:	3720      	adds	r7, #32
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	40011000 	.word	0x40011000
 8000eb4:	40011400 	.word	0x40011400
 8000eb8:	51eb851f 	.word	0x51eb851f

08000ebc <USART_IRQHandling>:
 *
 * @Note              -

 */
void USART_IRQHandling(USART_Handle_t *pUSARTHandle)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b088      	sub	sp, #32
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
	uint32_t temp1 , temp2, temp3;

	/*************************Check for TC flag ********************************************/

	//check the state of TC bit in the SR
	temp1 = USART_GetFlagStatus(pUSARTHandle->pUSARTx, USART_SR_TC);
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	2106      	movs	r1, #6
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f7ff ff54 	bl	8000d78 <USART_GetFlagStatus>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	61fb      	str	r3, [r7, #28]

	//check the state of TCEIE bit
	temp2 = (pUSARTHandle->pUSARTx->CR1 >> USART_CR1_TCIE) & 0x0001;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	68db      	ldr	r3, [r3, #12]
 8000eda:	099b      	lsrs	r3, r3, #6
 8000edc:	f003 0301 	and.w	r3, r3, #1
 8000ee0:	61bb      	str	r3, [r7, #24]

	if(temp1 && temp2 )
 8000ee2:	69fb      	ldr	r3, [r7, #28]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d029      	beq.n	8000f3c <USART_IRQHandling+0x80>
 8000ee8:	69bb      	ldr	r3, [r7, #24]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d026      	beq.n	8000f3c <USART_IRQHandling+0x80>
	{
		//this interrupt is because of TC

		//close transmission and call application callback if TxLen is zero
		if ( pUSARTHandle->TxBusyState == USART_BUSY_IN_TX)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ef4:	2b02      	cmp	r3, #2
 8000ef6:	d121      	bne.n	8000f3c <USART_IRQHandling+0x80>
		{
			//Check the TxLen . If it is zero then close the data transmission
			if(pUSARTHandle->TxLen == 0 )
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	699b      	ldr	r3, [r3, #24]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d11d      	bne.n	8000f3c <USART_IRQHandling+0x80>
			{
				//clear the TC flag
				pUSARTHandle->pUSARTx->SR &= ~( 1 << USART_SR_TC);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	681a      	ldr	r2, [r3, #0]
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000f0e:	601a      	str	r2, [r3, #0]

				//clear the TCIE control bit
				pUSARTHandle->pUSARTx->CR1 &= ~( 1 << USART_CR1_TCIE);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	68da      	ldr	r2, [r3, #12]
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000f1e:	60da      	str	r2, [r3, #12]

				//Reset application state
				pUSARTHandle->TxBusyState = USART_READY;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	2200      	movs	r2, #0
 8000f24:	f883 2020 	strb.w	r2, [r3, #32]

				//Reset Buffer address to NULL
				pUSARTHandle->pTxBuffer = NULL;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	611a      	str	r2, [r3, #16]

				//Reset length to zero
				pUSARTHandle->TxLen = 0;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	2200      	movs	r2, #0
 8000f32:	619a      	str	r2, [r3, #24]

				//Call the applicaton call back with event USART_EVENT_TX_CMPLT
				USART_ApplicationEventCallback(pUSARTHandle,USART_EVENT_TX_CMPLT);
 8000f34:	2101      	movs	r1, #1
 8000f36:	6878      	ldr	r0, [r7, #4]
 8000f38:	f000 fa80 	bl	800143c <USART_ApplicationEventCallback>
	}

	/*************************Check for TXE flag ********************************************/

	//check the state of TXE bit in the SR
	temp1 = USART_GetFlagStatus(pUSARTHandle->pUSARTx, USART_SR_TXE);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	2107      	movs	r1, #7
 8000f42:	4618      	mov	r0, r3
 8000f44:	f7ff ff18 	bl	8000d78 <USART_GetFlagStatus>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	61fb      	str	r3, [r7, #28]

	//check the state of TXEIE bit in CR1
	temp2 = (pUSARTHandle->pUSARTx->CR1 >> USART_CR1_TXEIE) & 0x0001;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	68db      	ldr	r3, [r3, #12]
 8000f52:	09db      	lsrs	r3, r3, #7
 8000f54:	f003 0301 	and.w	r3, r3, #1
 8000f58:	61bb      	str	r3, [r7, #24]


	if(temp1 && temp2 )
 8000f5a:	69fb      	ldr	r3, [r7, #28]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d05b      	beq.n	8001018 <USART_IRQHandling+0x15c>
 8000f60:	69bb      	ldr	r3, [r7, #24]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d058      	beq.n	8001018 <USART_IRQHandling+0x15c>
	{
		//this interrupt is because of TXE

		if(pUSARTHandle->TxBusyState == USART_BUSY_IN_TX && pUSARTHandle->TxLen > 0 )
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f6c:	2b02      	cmp	r3, #2
 8000f6e:	d153      	bne.n	8001018 <USART_IRQHandling+0x15c>
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	699b      	ldr	r3, [r3, #24]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d04f      	beq.n	8001018 <USART_IRQHandling+0x15c>
		{
			//Keep sending data until Txlen reaches to zero

			//Check USART_WordLength 9BIT or 8BIT data frame
			if(pUSARTHandle->USART_Config.USART_WordLength == USART_WORDLEN_9BITS)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	7b1b      	ldrb	r3, [r3, #12]
 8000f7c:	2b01      	cmp	r3, #1
 8000f7e:	d12f      	bne.n	8000fe0 <USART_IRQHandling+0x124>
			{
				uint16_t *pdata;

				//if 9BIT , load the DR with 2bytes masking the bits other than first 9 bits
				pdata = (uint16_t*) pUSARTHandle->pTxBuffer;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	691b      	ldr	r3, [r3, #16]
 8000f84:	617b      	str	r3, [r7, #20]

				//check for USART_ParityControl
				if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	7b9b      	ldrb	r3, [r3, #14]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d117      	bne.n	8000fbe <USART_IRQHandling+0x102>
				{
					//No parity is used in this transfer , so, 9bits of user data will be sent
					//loading only first 9 bits , so we have to mask with the value 0x01FF
					pUSARTHandle->pUSARTx->DR = (*pdata & (uint16_t)0x01FF);
 8000f8e:	697b      	ldr	r3, [r7, #20]
 8000f90:	881b      	ldrh	r3, [r3, #0]
 8000f92:	461a      	mov	r2, r3
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000f9c:	605a      	str	r2, [r3, #4]

					//Implement the code to increment pTxBuffer twice
					pUSARTHandle->pTxBuffer++;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	691b      	ldr	r3, [r3, #16]
 8000fa2:	1c5a      	adds	r2, r3, #1
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	611a      	str	r2, [r3, #16]
					pUSARTHandle->pTxBuffer++;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	691b      	ldr	r3, [r3, #16]
 8000fac:	1c5a      	adds	r2, r3, #1
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	611a      	str	r2, [r3, #16]

					//decrement the length
					pUSARTHandle->TxLen--;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	699b      	ldr	r3, [r3, #24]
 8000fb6:	1e5a      	subs	r2, r3, #1
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	619a      	str	r2, [r3, #24]
 8000fbc:	e020      	b.n	8001000 <USART_IRQHandling+0x144>
				}
				else
				{
					//Parity bit is used in this transfer . so , 8bits of user data will be sent
					pUSARTHandle->pUSARTx->DR = (*(pUSARTHandle->pTxBuffer)  & (uint8_t)0xFF);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	691b      	ldr	r3, [r3, #16]
 8000fc2:	781a      	ldrb	r2, [r3, #0]
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	605a      	str	r2, [r3, #4]

					//The 9th bit will be replaced by parity bit by the hardware
					pUSARTHandle->pTxBuffer++;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	691b      	ldr	r3, [r3, #16]
 8000fce:	1c5a      	adds	r2, r3, #1
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	611a      	str	r2, [r3, #16]

					//decrement the length
					pUSARTHandle->TxLen--;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	699b      	ldr	r3, [r3, #24]
 8000fd8:	1e5a      	subs	r2, r3, #1
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	619a      	str	r2, [r3, #24]
 8000fde:	e00f      	b.n	8001000 <USART_IRQHandling+0x144>
				}
			}
			else
			{
				//This is 8bit data transfer
				pUSARTHandle->pUSARTx->DR = (*(pUSARTHandle->pTxBuffer)  & (uint8_t)0xFF);
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	691b      	ldr	r3, [r3, #16]
 8000fe4:	781a      	ldrb	r2, [r3, #0]
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	605a      	str	r2, [r3, #4]

				//Implement the code to increment the buffer address
				pUSARTHandle->pTxBuffer++;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	691b      	ldr	r3, [r3, #16]
 8000ff0:	1c5a      	adds	r2, r3, #1
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	611a      	str	r2, [r3, #16]

				//Implement the code to decrement the length
				pUSARTHandle->TxLen--;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	699b      	ldr	r3, [r3, #24]
 8000ffa:	1e5a      	subs	r2, r3, #1
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	619a      	str	r2, [r3, #24]
			}

			if (pUSARTHandle->TxLen == 0 )
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	699b      	ldr	r3, [r3, #24]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d107      	bne.n	8001018 <USART_IRQHandling+0x15c>
			{
				//TxLen is zero
				//Implement the code to clear the TXEIE bit (disable interrupt for TXE flag )
				pUSARTHandle->pUSARTx->CR1 &= ~( 1 << USART_CR1_TXEIE );
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	68da      	ldr	r2, [r3, #12]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001016:	60da      	str	r2, [r3, #12]
		}
	}

	/*************************Check for RXNE flag ********************************************/

	temp1 = USART_GetFlagStatus(pUSARTHandle->pUSARTx, USART_SR_RXNE);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	2105      	movs	r1, #5
 800101e:	4618      	mov	r0, r3
 8001020:	f7ff feaa 	bl	8000d78 <USART_GetFlagStatus>
 8001024:	4603      	mov	r3, r0
 8001026:	61fb      	str	r3, [r7, #28]

	temp2 = (pUSARTHandle->pUSARTx->CR1 >> USART_CR1_RXNEIE) & 0x0001;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	68db      	ldr	r3, [r3, #12]
 800102e:	095b      	lsrs	r3, r3, #5
 8001030:	f003 0301 	and.w	r3, r3, #1
 8001034:	61bb      	str	r3, [r7, #24]


	if(temp1 && temp2 )
 8001036:	69fb      	ldr	r3, [r7, #28]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d073      	beq.n	8001124 <USART_IRQHandling+0x268>
 800103c:	69bb      	ldr	r3, [r7, #24]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d070      	beq.n	8001124 <USART_IRQHandling+0x268>
	{
		//this interrupt is because of rxne

		//check if the RxBusyState is USART_BUSY_IN_RX and RxLen > 0
		if(pUSARTHandle->RxBusyState == USART_BUSY_IN_RX && pUSARTHandle->RxLen > 0)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001048:	2b01      	cmp	r3, #1
 800104a:	d16b      	bne.n	8001124 <USART_IRQHandling+0x268>
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	69db      	ldr	r3, [r3, #28]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d067      	beq.n	8001124 <USART_IRQHandling+0x268>
		{
			//Check the USART_WordLength to decide whether we are going to receive 9bit of data in a frame or 8 bit
			if(pUSARTHandle->USART_Config.USART_WordLength == USART_WORDLEN_9BITS)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	7b1b      	ldrb	r3, [r3, #12]
 8001058:	2b01      	cmp	r3, #1
 800105a:	d12f      	bne.n	80010bc <USART_IRQHandling+0x200>
			{
				//receive 9bit data in a frame

				//Now, check are we using USART_ParityControl control or not
				if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	7b9b      	ldrb	r3, [r3, #14]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d119      	bne.n	8001098 <USART_IRQHandling+0x1dc>
				{
					//No parity is used. so, all 9bits will be of user data

					//read only first 9 bits so mask the DR with 0x01FF
					*((uint16_t*) pUSARTHandle->pRxBuffer) = (pUSARTHandle->pUSARTx->DR  & (uint16_t)0x01FF);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	b29a      	uxth	r2, r3
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	695b      	ldr	r3, [r3, #20]
 8001070:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001074:	b292      	uxth	r2, r2
 8001076:	801a      	strh	r2, [r3, #0]

					//Now increment the pRxBuffer two times
					pUSARTHandle->pRxBuffer++;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	695b      	ldr	r3, [r3, #20]
 800107c:	1c5a      	adds	r2, r3, #1
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	615a      	str	r2, [r3, #20]
					pUSARTHandle->pRxBuffer++;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	695b      	ldr	r3, [r3, #20]
 8001086:	1c5a      	adds	r2, r3, #1
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	615a      	str	r2, [r3, #20]

					//Implement the code to decrement the length
					pUSARTHandle->RxLen -= 2;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	69db      	ldr	r3, [r3, #28]
 8001090:	1e9a      	subs	r2, r3, #2
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	61da      	str	r2, [r3, #28]
 8001096:	e031      	b.n	80010fc <USART_IRQHandling+0x240>
				}
				else
				{
					//Parity is used. so, 8bits will be of user data and 1 bit is parity
					*(pUSARTHandle->pRxBuffer) = (pUSARTHandle->pUSARTx->DR  & (uint8_t)0xFF);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	685a      	ldr	r2, [r3, #4]
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	695b      	ldr	r3, [r3, #20]
 80010a2:	b2d2      	uxtb	r2, r2
 80010a4:	701a      	strb	r2, [r3, #0]

					//Now increment the pRxBuffer
					pUSARTHandle->pRxBuffer++;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	695b      	ldr	r3, [r3, #20]
 80010aa:	1c5a      	adds	r2, r3, #1
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	615a      	str	r2, [r3, #20]

					//Implement the code to decrement the length
					pUSARTHandle->RxLen --;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	69db      	ldr	r3, [r3, #28]
 80010b4:	1e5a      	subs	r2, r3, #1
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	61da      	str	r2, [r3, #28]
 80010ba:	e01f      	b.n	80010fc <USART_IRQHandling+0x240>
			else
			{
				//receive 8bit data in a frame

				//check are we using USART_ParityControl control or not
				if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	7b9b      	ldrb	r3, [r3, #14]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d107      	bne.n	80010d4 <USART_IRQHandling+0x218>
				{
					//No parity is used 8bits will be of user data

					//read 8 bits from DR
					*(pUSARTHandle->pRxBuffer) = (uint8_t) (pUSARTHandle->pUSARTx->DR  & (uint8_t)0xFF);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	685a      	ldr	r2, [r3, #4]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	695b      	ldr	r3, [r3, #20]
 80010ce:	b2d2      	uxtb	r2, r2
 80010d0:	701a      	strb	r2, [r3, #0]
 80010d2:	e009      	b.n	80010e8 <USART_IRQHandling+0x22c>
				else
				{
					//Parity is used, so , 7 bits will be of user data and 1 bit is parity

					//read only 7 bits , hence mask the DR with 0X7F
					*(pUSARTHandle->pRxBuffer) = (uint8_t) (pUSARTHandle->pUSARTx->DR  & (uint8_t)0x7F);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	b2da      	uxtb	r2, r3
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	695b      	ldr	r3, [r3, #20]
 80010e0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80010e4:	b2d2      	uxtb	r2, r2
 80010e6:	701a      	strb	r2, [r3, #0]

				}

				//increment the pRxBuffer
				pUSARTHandle->pRxBuffer++;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	695b      	ldr	r3, [r3, #20]
 80010ec:	1c5a      	adds	r2, r3, #1
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	615a      	str	r2, [r3, #20]

				//decrement the length
				pUSARTHandle->RxLen --;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	69db      	ldr	r3, [r3, #28]
 80010f6:	1e5a      	subs	r2, r3, #1
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	61da      	str	r2, [r3, #28]
			}

			if(pUSARTHandle->RxLen == 0)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	69db      	ldr	r3, [r3, #28]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d10f      	bne.n	8001124 <USART_IRQHandling+0x268>
			{
				//disable the rxneie
				pUSARTHandle->pUSARTx->CR1 &= ~( 1 << USART_CR1_RXNEIE );
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	68da      	ldr	r2, [r3, #12]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f022 0220 	bic.w	r2, r2, #32
 8001112:	60da      	str	r2, [r3, #12]
				pUSARTHandle->RxBusyState = USART_READY;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2200      	movs	r2, #0
 8001118:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
				USART_ApplicationEventCallback(pUSARTHandle,USART_EVENT_RX_CMPLT);
 800111c:	2102      	movs	r1, #2
 800111e:	6878      	ldr	r0, [r7, #4]
 8001120:	f000 f98c 	bl	800143c <USART_ApplicationEventCallback>

	/*************************Check for CTS flag ********************************************/
	//Note : CTS feature is not applicable for UART4 and UART5

	//check the status of CTS bit in the SR
	temp1 = USART_GetFlagStatus(pUSARTHandle->pUSARTx, USART_SR_CTS);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	2109      	movs	r1, #9
 800112a:	4618      	mov	r0, r3
 800112c:	f7ff fe24 	bl	8000d78 <USART_GetFlagStatus>
 8001130:	4603      	mov	r3, r0
 8001132:	61fb      	str	r3, [r7, #28]

	//check the state of CTSE bit in CR3
	temp2 = pUSARTHandle->pUSARTx->CR3 & ( 1 << USART_CR3_CTSE);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	695b      	ldr	r3, [r3, #20]
 800113a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800113e:	61bb      	str	r3, [r7, #24]

	//check the state of CTSIE bit in CR3 (This bit is not available for UART4 & UART5.)
	temp3 = pUSARTHandle->pUSARTx->CR3 & ( 1 << USART_CR3_CTSIE);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	695b      	ldr	r3, [r3, #20]
 8001146:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800114a:	613b      	str	r3, [r7, #16]


	if(temp1  && temp2 && temp3)
 800114c:	69fb      	ldr	r3, [r7, #28]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d011      	beq.n	8001176 <USART_IRQHandling+0x2ba>
 8001152:	69bb      	ldr	r3, [r7, #24]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d00e      	beq.n	8001176 <USART_IRQHandling+0x2ba>
 8001158:	693b      	ldr	r3, [r7, #16]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d00b      	beq.n	8001176 <USART_IRQHandling+0x2ba>
	{
		//Implement the code to clear the CTS flag in SR
		pUSARTHandle->pUSARTx->SR &= ~(1 << USART_SR_CTS);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	681a      	ldr	r2, [r3, #0]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800116c:	601a      	str	r2, [r3, #0]

		//this interrupt is because of cts
		USART_ApplicationEventCallback(pUSARTHandle,USART_EVENT_CTS);
 800116e:	2104      	movs	r1, #4
 8001170:	6878      	ldr	r0, [r7, #4]
 8001172:	f000 f963 	bl	800143c <USART_ApplicationEventCallback>
	}

	/*************************Check for IDLE detection flag ********************************************/

	//check the status of IDLE flag bit in the SR
	temp1 = USART_GetFlagStatus(pUSARTHandle->pUSARTx, USART_SR_IDLE);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	2104      	movs	r1, #4
 800117c:	4618      	mov	r0, r3
 800117e:	f7ff fdfb 	bl	8000d78 <USART_GetFlagStatus>
 8001182:	4603      	mov	r3, r0
 8001184:	61fb      	str	r3, [r7, #28]

	//check the state of IDLEIE bit in CR1
	temp2 = pUSARTHandle->pUSARTx->CR3 & ( 1 << USART_CR3_CTSE);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	695b      	ldr	r3, [r3, #20]
 800118c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001190:	61bb      	str	r3, [r7, #24]


	if(temp1 && temp2)
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d00e      	beq.n	80011b6 <USART_IRQHandling+0x2fa>
 8001198:	69bb      	ldr	r3, [r7, #24]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d00b      	beq.n	80011b6 <USART_IRQHandling+0x2fa>
	{
		uint32_t dummyread __unusedatr;

		dummyread = pUSARTHandle->pUSARTx->SR; //Read SR to clear IDLE flag
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	60fb      	str	r3, [r7, #12]
		dummyread = pUSARTHandle->pUSARTx->DR; //Read DR to clear IDLE flag
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	60fb      	str	r3, [r7, #12]

		//this interrupt is because of idle
		USART_ApplicationEventCallback(pUSARTHandle,USART_EVENT_IDLE);
 80011ae:	2103      	movs	r1, #3
 80011b0:	6878      	ldr	r0, [r7, #4]
 80011b2:	f000 f943 	bl	800143c <USART_ApplicationEventCallback>
	}

	/*************************Check for Overrun detection flag ********************************************/

	//Implement the code to check the status of ORE flag  in the SR
	temp1 = pUSARTHandle->pUSARTx->SR & USART_SR_ORE;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f003 0303 	and.w	r3, r3, #3
 80011c0:	61fb      	str	r3, [r7, #28]

	//Implement the code to check the status of RXNEIE  bit in the CR1
	temp2 = pUSARTHandle->pUSARTx->CR1 & USART_CR1_RXNEIE;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	68db      	ldr	r3, [r3, #12]
 80011c8:	f003 0305 	and.w	r3, r3, #5
 80011cc:	61bb      	str	r3, [r7, #24]


	if(temp1  && temp2 )
 80011ce:	69fb      	ldr	r3, [r7, #28]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d006      	beq.n	80011e2 <USART_IRQHandling+0x326>
 80011d4:	69bb      	ldr	r3, [r7, #24]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d003      	beq.n	80011e2 <USART_IRQHandling+0x326>
	{
		//Need not to clear the ORE flag here, instead give an api for the application to clear the ORE flag .

		//this interrupt is because of Overrun error
		USART_ApplicationEventCallback(pUSARTHandle,USART_EVENT_ORE);
 80011da:	2107      	movs	r1, #7
 80011dc:	6878      	ldr	r0, [r7, #4]
 80011de:	f000 f92d 	bl	800143c <USART_ApplicationEventCallback>

	//Noise Flag, Overrun error and Framing Error in multibuffer communication
	//We dont discuss multibuffer communication in this course. please refer to the RM
	//The blow code will get executed in only if multibuffer mode is used.

	temp2 =  pUSARTHandle->pUSARTx->CR3 & ( 1 << USART_CR3_EIE) ;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	695b      	ldr	r3, [r3, #20]
 80011e8:	f003 0301 	and.w	r3, r3, #1
 80011ec:	61bb      	str	r3, [r7, #24]

	if(temp2 )
 80011ee:	69bb      	ldr	r3, [r7, #24]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d01e      	beq.n	8001232 <USART_IRQHandling+0x376>
	{
		temp1 = pUSARTHandle->pUSARTx->SR;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	61fb      	str	r3, [r7, #28]
		if(temp1 & ( 1 << USART_SR_FE))
 80011fc:	69fb      	ldr	r3, [r7, #28]
 80011fe:	f003 0302 	and.w	r3, r3, #2
 8001202:	2b00      	cmp	r3, #0
 8001204:	d003      	beq.n	800120e <USART_IRQHandling+0x352>
			/*
				This bit is set by hardware when a de-synchronization, excessive noise or a break character
				is detected. It is cleared by a software sequence (an read to the USART_SR register
				followed by a read to the USART_DR register).
			 */
			USART_ApplicationEventCallback(pUSARTHandle,USART_ERREVENT_FE);
 8001206:	2106      	movs	r1, #6
 8001208:	6878      	ldr	r0, [r7, #4]
 800120a:	f000 f917 	bl	800143c <USART_ApplicationEventCallback>
		}

		if(temp1 & ( 1 << USART_SR_NE) )
 800120e:	69fb      	ldr	r3, [r7, #28]
 8001210:	f003 0304 	and.w	r3, r3, #4
 8001214:	2b00      	cmp	r3, #0
 8001216:	d003      	beq.n	8001220 <USART_IRQHandling+0x364>
			/*
				This bit is set by hardware when noise is detected on a received frame. It is cleared by a
				software sequence (an read to the USART_SR register followed by a read to the
				USART_DR register).
			 */
			USART_ApplicationEventCallback(pUSARTHandle,USART_ERREVENT_NE);
 8001218:	2108      	movs	r1, #8
 800121a:	6878      	ldr	r0, [r7, #4]
 800121c:	f000 f90e 	bl	800143c <USART_ApplicationEventCallback>
		}

		if(temp1 & ( 1 << USART_SR_ORE) )
 8001220:	69fb      	ldr	r3, [r7, #28]
 8001222:	f003 0308 	and.w	r3, r3, #8
 8001226:	2b00      	cmp	r3, #0
 8001228:	d003      	beq.n	8001232 <USART_IRQHandling+0x376>
		{
			USART_ApplicationEventCallback(pUSARTHandle,USART_ERREVENT_ORE);
 800122a:	2109      	movs	r1, #9
 800122c:	6878      	ldr	r0, [r7, #4]
 800122e:	f000 f905 	bl	800143c <USART_ApplicationEventCallback>
		}
	}

}
 8001232:	bf00      	nop
 8001234:	3720      	adds	r7, #32
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
	...

0800123c <USART1_Init>:

uint8_t g_data = 0;


void USART1_Init(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
	usart2_handle.pUSARTx = USART1;
 8001240:	4b0d      	ldr	r3, [pc, #52]	@ (8001278 <USART1_Init+0x3c>)
 8001242:	4a0e      	ldr	r2, [pc, #56]	@ (800127c <USART1_Init+0x40>)
 8001244:	601a      	str	r2, [r3, #0]
	usart2_handle.USART_Config.USART_Baud = USART_STD_BAUD_115200;
 8001246:	4b0c      	ldr	r3, [pc, #48]	@ (8001278 <USART1_Init+0x3c>)
 8001248:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800124c:	609a      	str	r2, [r3, #8]
	usart2_handle.USART_Config.USART_HWFlowControl = USART_HW_FLOW_CTRL_NONE;
 800124e:	4b0a      	ldr	r3, [pc, #40]	@ (8001278 <USART1_Init+0x3c>)
 8001250:	2200      	movs	r2, #0
 8001252:	73da      	strb	r2, [r3, #15]
	usart2_handle.USART_Config.USART_Mode = USART_MODE_TXRX;
 8001254:	4b08      	ldr	r3, [pc, #32]	@ (8001278 <USART1_Init+0x3c>)
 8001256:	2202      	movs	r2, #2
 8001258:	711a      	strb	r2, [r3, #4]
	usart2_handle.USART_Config.USART_StopBits = USART_STOPBITS_1;
 800125a:	4b07      	ldr	r3, [pc, #28]	@ (8001278 <USART1_Init+0x3c>)
 800125c:	2200      	movs	r2, #0
 800125e:	735a      	strb	r2, [r3, #13]
	usart2_handle.USART_Config.USART_WordLength = USART_WORDLEN_8BITS;
 8001260:	4b05      	ldr	r3, [pc, #20]	@ (8001278 <USART1_Init+0x3c>)
 8001262:	2200      	movs	r2, #0
 8001264:	731a      	strb	r2, [r3, #12]
	usart2_handle.USART_Config.USART_ParityControl = USART_PARITY_DISABLE;
 8001266:	4b04      	ldr	r3, [pc, #16]	@ (8001278 <USART1_Init+0x3c>)
 8001268:	2200      	movs	r2, #0
 800126a:	739a      	strb	r2, [r3, #14]
	USART_Init(&usart2_handle);
 800126c:	4802      	ldr	r0, [pc, #8]	@ (8001278 <USART1_Init+0x3c>)
 800126e:	f7ff fc53 	bl	8000b18 <USART_Init>
}
 8001272:	bf00      	nop
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	20000484 	.word	0x20000484
 800127c:	40011000 	.word	0x40011000

08001280 <USART1_GPIOInit>:

void USART1_GPIOInit(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b084      	sub	sp, #16
 8001284:	af00      	add	r7, sp, #0
	GPIO_Handle_t usart_gpios;

	usart_gpios.pGPIOx = GPIOB;
 8001286:	4b0e      	ldr	r3, [pc, #56]	@ (80012c0 <USART1_GPIOInit+0x40>)
 8001288:	607b      	str	r3, [r7, #4]
	usart_gpios.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 800128a:	2302      	movs	r3, #2
 800128c:	727b      	strb	r3, [r7, #9]
	usart_gpios.GPIO_PinConfig.GPIO_PinOType = GPIO_OPTYPE_PUSHPULL;
 800128e:	2300      	movs	r3, #0
 8001290:	733b      	strb	r3, [r7, #12]
	usart_gpios.GPIO_PinConfig.GPIO_PinPuPdCtrl = GPIO_PULLUP_EN;
 8001292:	2301      	movs	r3, #1
 8001294:	72fb      	strb	r3, [r7, #11]
	usart_gpios.GPIO_PinConfig.GPIO_PinSpeed = GPIO_FAST_SPD;
 8001296:	2302      	movs	r3, #2
 8001298:	72bb      	strb	r3, [r7, #10]
	usart_gpios.GPIO_PinConfig.GPIO_PinAFMode = 7;
 800129a:	2307      	movs	r3, #7
 800129c:	737b      	strb	r3, [r7, #13]

	usart_gpios.GPIO_PinConfig.GPIO_PinNumber  = GPIO_PIN6; //PB6 TX
 800129e:	2306      	movs	r3, #6
 80012a0:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&usart_gpios);
 80012a2:	1d3b      	adds	r3, r7, #4
 80012a4:	4618      	mov	r0, r3
 80012a6:	f7ff f99d 	bl	80005e4 <GPIO_Init>

	usart_gpios.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN7; //PB7 RX
 80012aa:	2307      	movs	r3, #7
 80012ac:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&usart_gpios);
 80012ae:	1d3b      	adds	r3, r7, #4
 80012b0:	4618      	mov	r0, r3
 80012b2:	f7ff f997 	bl	80005e4 <GPIO_Init>

}
 80012b6:	bf00      	nop
 80012b8:	3710      	adds	r7, #16
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	40020400 	.word	0x40020400

080012c4 <GPIO_ButtonInit>:

void GPIO_ButtonInit(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b084      	sub	sp, #16
 80012c8:	af00      	add	r7, sp, #0
	GPIO_Handle_t GPIOBtn;

	//this is btn gpio configuration
	GPIOBtn.pGPIOx = GPIOC;
 80012ca:	4b09      	ldr	r3, [pc, #36]	@ (80012f0 <GPIO_ButtonInit+0x2c>)
 80012cc:	607b      	str	r3, [r7, #4]
	GPIOBtn.GPIO_PinConfig.GPIO_PinNumber = 13;
 80012ce:	230d      	movs	r3, #13
 80012d0:	723b      	strb	r3, [r7, #8]
	GPIOBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_INPUT;
 80012d2:	2300      	movs	r3, #0
 80012d4:	727b      	strb	r3, [r7, #9]
	GPIOBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_FAST_SPD;
 80012d6:	2302      	movs	r3, #2
 80012d8:	72bb      	strb	r3, [r7, #10]
	GPIOBtn.GPIO_PinConfig.GPIO_PinPuPdCtrl = GPIO_NO_PULLUP_PULLDOWN;
 80012da:	2300      	movs	r3, #0
 80012dc:	72fb      	strb	r3, [r7, #11]

	GPIO_Init(&GPIOBtn);
 80012de:	1d3b      	adds	r3, r7, #4
 80012e0:	4618      	mov	r0, r3
 80012e2:	f7ff f97f 	bl	80005e4 <GPIO_Init>
}
 80012e6:	bf00      	nop
 80012e8:	3710      	adds	r7, #16
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	40020800 	.word	0x40020800

080012f4 <delay>:

void delay(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
	for(uint32_t i = 0 ; i < 500000/2 ; i ++);
 80012fa:	2300      	movs	r3, #0
 80012fc:	607b      	str	r3, [r7, #4]
 80012fe:	e002      	b.n	8001306 <delay+0x12>
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	3301      	adds	r3, #1
 8001304:	607b      	str	r3, [r7, #4]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	4a04      	ldr	r2, [pc, #16]	@ (800131c <delay+0x28>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d9f8      	bls.n	8001300 <delay+0xc>
}
 800130e:	bf00      	nop
 8001310:	bf00      	nop
 8001312:	370c      	adds	r7, #12
 8001314:	46bd      	mov	sp, r7
 8001316:	bc80      	pop	{r7}
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	0003d08f 	.word	0x0003d08f

08001320 <main>:
int main(void)
{
 8001320:	b590      	push	{r4, r7, lr}
 8001322:	b083      	sub	sp, #12
 8001324:	af00      	add	r7, sp, #0
	uint32_t cnt = 0;
 8001326:	2300      	movs	r3, #0
 8001328:	607b      	str	r3, [r7, #4]

	USART1_GPIOInit();
 800132a:	f7ff ffa9 	bl	8001280 <USART1_GPIOInit>
    USART1_Init();
 800132e:	f7ff ff85 	bl	800123c <USART1_Init>

    GPIO_ButtonInit();
 8001332:	f7ff ffc7 	bl	80012c4 <GPIO_ButtonInit>

    USART_IRQInterruptConfig(IRQ_NUMBER_USART1,ENABLE);
 8001336:	2101      	movs	r1, #1
 8001338:	2025      	movs	r0, #37	@ 0x25
 800133a:	f7ff fcdf 	bl	8000cfc <USART_IRQInterruptConfig>

    USART_PeripheralControl(USART1,ENABLE);
 800133e:	2101      	movs	r1, #1
 8001340:	482f      	ldr	r0, [pc, #188]	@ (8001400 <main+0xe0>)
 8001342:	f7ff fd2e 	bl	8000da2 <USART_PeripheralControl>

    printf("Application is running\n");
 8001346:	482f      	ldr	r0, [pc, #188]	@ (8001404 <main+0xe4>)
 8001348:	f000 faa6 	bl	8001898 <puts>

    //do forever
    while(1)
    {
		//wait till button is pressed
		while( GPIO_ReadInputPin(GPIOC,13) == 1 );
 800134c:	bf00      	nop
 800134e:	210d      	movs	r1, #13
 8001350:	482d      	ldr	r0, [pc, #180]	@ (8001408 <main+0xe8>)
 8001352:	f7ff fb0d 	bl	8000970 <GPIO_ReadInputPin>
 8001356:	4603      	mov	r3, r0
 8001358:	2b01      	cmp	r3, #1
 800135a:	d0f8      	beq.n	800134e <main+0x2e>

		//to avoid button de-bouncing related issues 200ms of delay
		delay();
 800135c:	f7ff ffca 	bl	80012f4 <delay>

		// Next message index ; make sure that cnt value doesn't cross 2
		cnt = cnt % 3;
 8001360:	687a      	ldr	r2, [r7, #4]
 8001362:	4b2a      	ldr	r3, [pc, #168]	@ (800140c <main+0xec>)
 8001364:	fba3 1302 	umull	r1, r3, r3, r2
 8001368:	0859      	lsrs	r1, r3, #1
 800136a:	460b      	mov	r3, r1
 800136c:	005b      	lsls	r3, r3, #1
 800136e:	440b      	add	r3, r1
 8001370:	1ad3      	subs	r3, r2, r3
 8001372:	607b      	str	r3, [r7, #4]

		//First lets enable the reception in interrupt mode
		//this code enables the receive interrupt
		while ( USART_ReceiveDataIT(&usart2_handle,rx_buf,strlen(msg[cnt])) != USART_READY );
 8001374:	bf00      	nop
 8001376:	4a26      	ldr	r2, [pc, #152]	@ (8001410 <main+0xf0>)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800137e:	4618      	mov	r0, r3
 8001380:	f7fe ff46 	bl	8000210 <strlen>
 8001384:	4603      	mov	r3, r0
 8001386:	461a      	mov	r2, r3
 8001388:	4922      	ldr	r1, [pc, #136]	@ (8001414 <main+0xf4>)
 800138a:	4823      	ldr	r0, [pc, #140]	@ (8001418 <main+0xf8>)
 800138c:	f7ff fc91 	bl	8000cb2 <USART_ReceiveDataIT>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d1ef      	bne.n	8001376 <main+0x56>

		//Send the msg indexed by cnt in blocking mode
    	USART_SendData( &usart2_handle, (uint8_t*)msg[cnt], strlen(msg[cnt]) );
 8001396:	4a1e      	ldr	r2, [pc, #120]	@ (8001410 <main+0xf0>)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800139e:	4a1c      	ldr	r2, [pc, #112]	@ (8001410 <main+0xf0>)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013a6:	4618      	mov	r0, r3
 80013a8:	f7fe ff32 	bl	8000210 <strlen>
 80013ac:	4603      	mov	r3, r0
 80013ae:	461a      	mov	r2, r3
 80013b0:	4621      	mov	r1, r4
 80013b2:	4819      	ldr	r0, [pc, #100]	@ (8001418 <main+0xf8>)
 80013b4:	f7ff fc2a 	bl	8000c0c <USART_SendData>

    	printf("Transmitted : %s\n",msg[cnt]);
 80013b8:	4a15      	ldr	r2, [pc, #84]	@ (8001410 <main+0xf0>)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013c0:	4619      	mov	r1, r3
 80013c2:	4816      	ldr	r0, [pc, #88]	@ (800141c <main+0xfc>)
 80013c4:	f000 fa00 	bl	80017c8 <iprintf>


    	//Now lets wait until all the bytes are received from the arduino .
    	//When all the bytes are received rxCmplt will be SET in application callback
    	while(rxCmplt != SET);
 80013c8:	bf00      	nop
 80013ca:	4b15      	ldr	r3, [pc, #84]	@ (8001420 <main+0x100>)
 80013cc:	781b      	ldrb	r3, [r3, #0]
 80013ce:	2b01      	cmp	r3, #1
 80013d0:	d1fb      	bne.n	80013ca <main+0xaa>

    	//just make sure that last byte should be null otherwise %s fails while printing
    	rx_buf[strlen(msg[cnt])+ 1] = '\0';
 80013d2:	4a0f      	ldr	r2, [pc, #60]	@ (8001410 <main+0xf0>)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013da:	4618      	mov	r0, r3
 80013dc:	f7fe ff18 	bl	8000210 <strlen>
 80013e0:	4603      	mov	r3, r0
 80013e2:	3301      	adds	r3, #1
 80013e4:	4a0b      	ldr	r2, [pc, #44]	@ (8001414 <main+0xf4>)
 80013e6:	2100      	movs	r1, #0
 80013e8:	54d1      	strb	r1, [r2, r3]

    	//Print what we received from the arduino
    	printf("Received    : %s\n",rx_buf);
 80013ea:	490a      	ldr	r1, [pc, #40]	@ (8001414 <main+0xf4>)
 80013ec:	480d      	ldr	r0, [pc, #52]	@ (8001424 <main+0x104>)
 80013ee:	f000 f9eb 	bl	80017c8 <iprintf>

    	//invalidate the flag
    	rxCmplt = RESET;
 80013f2:	4b0b      	ldr	r3, [pc, #44]	@ (8001420 <main+0x100>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	701a      	strb	r2, [r3, #0]

    	//move on to next message indexed in msg[]
    	cnt ++;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	3301      	adds	r3, #1
 80013fc:	607b      	str	r3, [r7, #4]
		while( GPIO_ReadInputPin(GPIOC,13) == 1 );
 80013fe:	e7a5      	b.n	800134c <main+0x2c>
 8001400:	40011000 	.word	0x40011000
 8001404:	080025a0 	.word	0x080025a0
 8001408:	40020800 	.word	0x40020800
 800140c:	aaaaaaab 	.word	0xaaaaaaab
 8001410:	20000000 	.word	0x20000000
 8001414:	20000084 	.word	0x20000084
 8001418:	20000484 	.word	0x20000484
 800141c:	080025b8 	.word	0x080025b8
 8001420:	200004a8 	.word	0x200004a8
 8001424:	080025cc 	.word	0x080025cc

08001428 <USART1_IRQHandler>:
	return 0;
}


void USART1_IRQHandler(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
	USART_IRQHandling(&usart2_handle);
 800142c:	4802      	ldr	r0, [pc, #8]	@ (8001438 <USART1_IRQHandler+0x10>)
 800142e:	f7ff fd45 	bl	8000ebc <USART_IRQHandling>
}
 8001432:	bf00      	nop
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	20000484 	.word	0x20000484

0800143c <USART_ApplicationEventCallback>:




void USART_ApplicationEventCallback( USART_Handle_t *pUSARTHandle,uint8_t ApEv)
{
 800143c:	b480      	push	{r7}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
 8001444:	460b      	mov	r3, r1
 8001446:	70fb      	strb	r3, [r7, #3]
   if(ApEv == USART_EVENT_RX_CMPLT)
 8001448:	78fb      	ldrb	r3, [r7, #3]
 800144a:	2b02      	cmp	r3, #2
 800144c:	d102      	bne.n	8001454 <USART_ApplicationEventCallback+0x18>
   {
			rxCmplt = SET;
 800144e:	4b04      	ldr	r3, [pc, #16]	@ (8001460 <USART_ApplicationEventCallback+0x24>)
 8001450:	2201      	movs	r2, #1
 8001452:	701a      	strb	r2, [r3, #0]

   }else if (ApEv == USART_EVENT_TX_CMPLT)
   {
	   ;
   }
}
 8001454:	bf00      	nop
 8001456:	370c      	adds	r7, #12
 8001458:	46bd      	mov	sp, r7
 800145a:	bc80      	pop	{r7}
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop
 8001460:	200004a8 	.word	0x200004a8

08001464 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8001464:	b480      	push	{r7}
 8001466:	b083      	sub	sp, #12
 8001468:	af00      	add	r7, sp, #0
 800146a:	4603      	mov	r3, r0
 800146c:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 800146e:	4b0e      	ldr	r3, [pc, #56]	@ (80014a8 <ITM_SendChar+0x44>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4a0d      	ldr	r2, [pc, #52]	@ (80014a8 <ITM_SendChar+0x44>)
 8001474:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001478:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 800147a:	4b0c      	ldr	r3, [pc, #48]	@ (80014ac <ITM_SendChar+0x48>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4a0b      	ldr	r2, [pc, #44]	@ (80014ac <ITM_SendChar+0x48>)
 8001480:	f043 0301 	orr.w	r3, r3, #1
 8001484:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8001486:	bf00      	nop
 8001488:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f003 0301 	and.w	r3, r3, #1
 8001492:	2b00      	cmp	r3, #0
 8001494:	d0f8      	beq.n	8001488 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8001496:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 800149a:	79fb      	ldrb	r3, [r7, #7]
 800149c:	6013      	str	r3, [r2, #0]
}
 800149e:	bf00      	nop
 80014a0:	370c      	adds	r7, #12
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bc80      	pop	{r7}
 80014a6:	4770      	bx	lr
 80014a8:	e000edfc 	.word	0xe000edfc
 80014ac:	e0000e00 	.word	0xe0000e00

080014b0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b086      	sub	sp, #24
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	60f8      	str	r0, [r7, #12]
 80014b8:	60b9      	str	r1, [r7, #8]
 80014ba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014bc:	2300      	movs	r3, #0
 80014be:	617b      	str	r3, [r7, #20]
 80014c0:	e00a      	b.n	80014d8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80014c2:	f3af 8000 	nop.w
 80014c6:	4601      	mov	r1, r0
 80014c8:	68bb      	ldr	r3, [r7, #8]
 80014ca:	1c5a      	adds	r2, r3, #1
 80014cc:	60ba      	str	r2, [r7, #8]
 80014ce:	b2ca      	uxtb	r2, r1
 80014d0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	3301      	adds	r3, #1
 80014d6:	617b      	str	r3, [r7, #20]
 80014d8:	697a      	ldr	r2, [r7, #20]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	429a      	cmp	r2, r3
 80014de:	dbf0      	blt.n	80014c2 <_read+0x12>
  }

  return len;
 80014e0:	687b      	ldr	r3, [r7, #4]
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	3718      	adds	r7, #24
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}

080014ea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80014ea:	b580      	push	{r7, lr}
 80014ec:	b086      	sub	sp, #24
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	60f8      	str	r0, [r7, #12]
 80014f2:	60b9      	str	r1, [r7, #8]
 80014f4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014f6:	2300      	movs	r3, #0
 80014f8:	617b      	str	r3, [r7, #20]
 80014fa:	e009      	b.n	8001510 <_write+0x26>
  {
   // __io_putchar(*ptr++);
    ITM_SendChar(*ptr++);
 80014fc:	68bb      	ldr	r3, [r7, #8]
 80014fe:	1c5a      	adds	r2, r3, #1
 8001500:	60ba      	str	r2, [r7, #8]
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	4618      	mov	r0, r3
 8001506:	f7ff ffad 	bl	8001464 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	3301      	adds	r3, #1
 800150e:	617b      	str	r3, [r7, #20]
 8001510:	697a      	ldr	r2, [r7, #20]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	429a      	cmp	r2, r3
 8001516:	dbf1      	blt.n	80014fc <_write+0x12>
  }
  return len;
 8001518:	687b      	ldr	r3, [r7, #4]
}
 800151a:	4618      	mov	r0, r3
 800151c:	3718      	adds	r7, #24
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}

08001522 <_close>:

int _close(int file)
{
 8001522:	b480      	push	{r7}
 8001524:	b083      	sub	sp, #12
 8001526:	af00      	add	r7, sp, #0
 8001528:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800152a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800152e:	4618      	mov	r0, r3
 8001530:	370c      	adds	r7, #12
 8001532:	46bd      	mov	sp, r7
 8001534:	bc80      	pop	{r7}
 8001536:	4770      	bx	lr

08001538 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001538:	b480      	push	{r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
 8001540:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001548:	605a      	str	r2, [r3, #4]
  return 0;
 800154a:	2300      	movs	r3, #0
}
 800154c:	4618      	mov	r0, r3
 800154e:	370c      	adds	r7, #12
 8001550:	46bd      	mov	sp, r7
 8001552:	bc80      	pop	{r7}
 8001554:	4770      	bx	lr

08001556 <_isatty>:

int _isatty(int file)
{
 8001556:	b480      	push	{r7}
 8001558:	b083      	sub	sp, #12
 800155a:	af00      	add	r7, sp, #0
 800155c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800155e:	2301      	movs	r3, #1
}
 8001560:	4618      	mov	r0, r3
 8001562:	370c      	adds	r7, #12
 8001564:	46bd      	mov	sp, r7
 8001566:	bc80      	pop	{r7}
 8001568:	4770      	bx	lr

0800156a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800156a:	b480      	push	{r7}
 800156c:	b085      	sub	sp, #20
 800156e:	af00      	add	r7, sp, #0
 8001570:	60f8      	str	r0, [r7, #12]
 8001572:	60b9      	str	r1, [r7, #8]
 8001574:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001576:	2300      	movs	r3, #0
}
 8001578:	4618      	mov	r0, r3
 800157a:	3714      	adds	r7, #20
 800157c:	46bd      	mov	sp, r7
 800157e:	bc80      	pop	{r7}
 8001580:	4770      	bx	lr
	...

08001584 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b086      	sub	sp, #24
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800158c:	4a14      	ldr	r2, [pc, #80]	@ (80015e0 <_sbrk+0x5c>)
 800158e:	4b15      	ldr	r3, [pc, #84]	@ (80015e4 <_sbrk+0x60>)
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001598:	4b13      	ldr	r3, [pc, #76]	@ (80015e8 <_sbrk+0x64>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d102      	bne.n	80015a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015a0:	4b11      	ldr	r3, [pc, #68]	@ (80015e8 <_sbrk+0x64>)
 80015a2:	4a12      	ldr	r2, [pc, #72]	@ (80015ec <_sbrk+0x68>)
 80015a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015a6:	4b10      	ldr	r3, [pc, #64]	@ (80015e8 <_sbrk+0x64>)
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	4413      	add	r3, r2
 80015ae:	693a      	ldr	r2, [r7, #16]
 80015b0:	429a      	cmp	r2, r3
 80015b2:	d207      	bcs.n	80015c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015b4:	f000 fa9e 	bl	8001af4 <__errno>
 80015b8:	4603      	mov	r3, r0
 80015ba:	220c      	movs	r2, #12
 80015bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015be:	f04f 33ff 	mov.w	r3, #4294967295
 80015c2:	e009      	b.n	80015d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015c4:	4b08      	ldr	r3, [pc, #32]	@ (80015e8 <_sbrk+0x64>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015ca:	4b07      	ldr	r3, [pc, #28]	@ (80015e8 <_sbrk+0x64>)
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	4413      	add	r3, r2
 80015d2:	4a05      	ldr	r2, [pc, #20]	@ (80015e8 <_sbrk+0x64>)
 80015d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015d6:	68fb      	ldr	r3, [r7, #12]
}
 80015d8:	4618      	mov	r0, r3
 80015da:	3718      	adds	r7, #24
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	20020000 	.word	0x20020000
 80015e4:	00000400 	.word	0x00000400
 80015e8:	200004ac 	.word	0x200004ac
 80015ec:	20000600 	.word	0x20000600

080015f0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80015f0:	480d      	ldr	r0, [pc, #52]	@ (8001628 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80015f2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80015f4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015f8:	480c      	ldr	r0, [pc, #48]	@ (800162c <LoopForever+0x6>)
  ldr r1, =_edata
 80015fa:	490d      	ldr	r1, [pc, #52]	@ (8001630 <LoopForever+0xa>)
  ldr r2, =_sidata
 80015fc:	4a0d      	ldr	r2, [pc, #52]	@ (8001634 <LoopForever+0xe>)
  movs r3, #0
 80015fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001600:	e002      	b.n	8001608 <LoopCopyDataInit>

08001602 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001602:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001604:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001606:	3304      	adds	r3, #4

08001608 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001608:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800160a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800160c:	d3f9      	bcc.n	8001602 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800160e:	4a0a      	ldr	r2, [pc, #40]	@ (8001638 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001610:	4c0a      	ldr	r4, [pc, #40]	@ (800163c <LoopForever+0x16>)
  movs r3, #0
 8001612:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001614:	e001      	b.n	800161a <LoopFillZerobss>

08001616 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001616:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001618:	3204      	adds	r2, #4

0800161a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800161a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800161c:	d3fb      	bcc.n	8001616 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800161e:	f000 fa6f 	bl	8001b00 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001622:	f7ff fe7d 	bl	8001320 <main>

08001626 <LoopForever>:

LoopForever:
  b LoopForever
 8001626:	e7fe      	b.n	8001626 <LoopForever>
  ldr   r0, =_estack
 8001628:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800162c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001630:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001634:	08002624 	.word	0x08002624
  ldr r2, =_sbss
 8001638:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 800163c:	200005fc 	.word	0x200005fc

08001640 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001640:	e7fe      	b.n	8001640 <ADC_IRQHandler>
	...

08001644 <std>:
 8001644:	2300      	movs	r3, #0
 8001646:	b510      	push	{r4, lr}
 8001648:	4604      	mov	r4, r0
 800164a:	e9c0 3300 	strd	r3, r3, [r0]
 800164e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001652:	6083      	str	r3, [r0, #8]
 8001654:	8181      	strh	r1, [r0, #12]
 8001656:	6643      	str	r3, [r0, #100]	@ 0x64
 8001658:	81c2      	strh	r2, [r0, #14]
 800165a:	6183      	str	r3, [r0, #24]
 800165c:	4619      	mov	r1, r3
 800165e:	2208      	movs	r2, #8
 8001660:	305c      	adds	r0, #92	@ 0x5c
 8001662:	f000 f9f9 	bl	8001a58 <memset>
 8001666:	4b0d      	ldr	r3, [pc, #52]	@ (800169c <std+0x58>)
 8001668:	6263      	str	r3, [r4, #36]	@ 0x24
 800166a:	4b0d      	ldr	r3, [pc, #52]	@ (80016a0 <std+0x5c>)
 800166c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800166e:	4b0d      	ldr	r3, [pc, #52]	@ (80016a4 <std+0x60>)
 8001670:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8001672:	4b0d      	ldr	r3, [pc, #52]	@ (80016a8 <std+0x64>)
 8001674:	6323      	str	r3, [r4, #48]	@ 0x30
 8001676:	4b0d      	ldr	r3, [pc, #52]	@ (80016ac <std+0x68>)
 8001678:	6224      	str	r4, [r4, #32]
 800167a:	429c      	cmp	r4, r3
 800167c:	d006      	beq.n	800168c <std+0x48>
 800167e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8001682:	4294      	cmp	r4, r2
 8001684:	d002      	beq.n	800168c <std+0x48>
 8001686:	33d0      	adds	r3, #208	@ 0xd0
 8001688:	429c      	cmp	r4, r3
 800168a:	d105      	bne.n	8001698 <std+0x54>
 800168c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8001690:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001694:	f000 ba58 	b.w	8001b48 <__retarget_lock_init_recursive>
 8001698:	bd10      	pop	{r4, pc}
 800169a:	bf00      	nop
 800169c:	080018a9 	.word	0x080018a9
 80016a0:	080018cb 	.word	0x080018cb
 80016a4:	08001903 	.word	0x08001903
 80016a8:	08001927 	.word	0x08001927
 80016ac:	200004b0 	.word	0x200004b0

080016b0 <stdio_exit_handler>:
 80016b0:	4a02      	ldr	r2, [pc, #8]	@ (80016bc <stdio_exit_handler+0xc>)
 80016b2:	4903      	ldr	r1, [pc, #12]	@ (80016c0 <stdio_exit_handler+0x10>)
 80016b4:	4803      	ldr	r0, [pc, #12]	@ (80016c4 <stdio_exit_handler+0x14>)
 80016b6:	f000 b869 	b.w	800178c <_fwalk_sglue>
 80016ba:	bf00      	nop
 80016bc:	2000000c 	.word	0x2000000c
 80016c0:	080023d9 	.word	0x080023d9
 80016c4:	2000001c 	.word	0x2000001c

080016c8 <cleanup_stdio>:
 80016c8:	6841      	ldr	r1, [r0, #4]
 80016ca:	4b0c      	ldr	r3, [pc, #48]	@ (80016fc <cleanup_stdio+0x34>)
 80016cc:	4299      	cmp	r1, r3
 80016ce:	b510      	push	{r4, lr}
 80016d0:	4604      	mov	r4, r0
 80016d2:	d001      	beq.n	80016d8 <cleanup_stdio+0x10>
 80016d4:	f000 fe80 	bl	80023d8 <_fflush_r>
 80016d8:	68a1      	ldr	r1, [r4, #8]
 80016da:	4b09      	ldr	r3, [pc, #36]	@ (8001700 <cleanup_stdio+0x38>)
 80016dc:	4299      	cmp	r1, r3
 80016de:	d002      	beq.n	80016e6 <cleanup_stdio+0x1e>
 80016e0:	4620      	mov	r0, r4
 80016e2:	f000 fe79 	bl	80023d8 <_fflush_r>
 80016e6:	68e1      	ldr	r1, [r4, #12]
 80016e8:	4b06      	ldr	r3, [pc, #24]	@ (8001704 <cleanup_stdio+0x3c>)
 80016ea:	4299      	cmp	r1, r3
 80016ec:	d004      	beq.n	80016f8 <cleanup_stdio+0x30>
 80016ee:	4620      	mov	r0, r4
 80016f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80016f4:	f000 be70 	b.w	80023d8 <_fflush_r>
 80016f8:	bd10      	pop	{r4, pc}
 80016fa:	bf00      	nop
 80016fc:	200004b0 	.word	0x200004b0
 8001700:	20000518 	.word	0x20000518
 8001704:	20000580 	.word	0x20000580

08001708 <global_stdio_init.part.0>:
 8001708:	b510      	push	{r4, lr}
 800170a:	4b0b      	ldr	r3, [pc, #44]	@ (8001738 <global_stdio_init.part.0+0x30>)
 800170c:	4c0b      	ldr	r4, [pc, #44]	@ (800173c <global_stdio_init.part.0+0x34>)
 800170e:	4a0c      	ldr	r2, [pc, #48]	@ (8001740 <global_stdio_init.part.0+0x38>)
 8001710:	601a      	str	r2, [r3, #0]
 8001712:	4620      	mov	r0, r4
 8001714:	2200      	movs	r2, #0
 8001716:	2104      	movs	r1, #4
 8001718:	f7ff ff94 	bl	8001644 <std>
 800171c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8001720:	2201      	movs	r2, #1
 8001722:	2109      	movs	r1, #9
 8001724:	f7ff ff8e 	bl	8001644 <std>
 8001728:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800172c:	2202      	movs	r2, #2
 800172e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001732:	2112      	movs	r1, #18
 8001734:	f7ff bf86 	b.w	8001644 <std>
 8001738:	200005e8 	.word	0x200005e8
 800173c:	200004b0 	.word	0x200004b0
 8001740:	080016b1 	.word	0x080016b1

08001744 <__sfp_lock_acquire>:
 8001744:	4801      	ldr	r0, [pc, #4]	@ (800174c <__sfp_lock_acquire+0x8>)
 8001746:	f000 ba00 	b.w	8001b4a <__retarget_lock_acquire_recursive>
 800174a:	bf00      	nop
 800174c:	200005f1 	.word	0x200005f1

08001750 <__sfp_lock_release>:
 8001750:	4801      	ldr	r0, [pc, #4]	@ (8001758 <__sfp_lock_release+0x8>)
 8001752:	f000 b9fb 	b.w	8001b4c <__retarget_lock_release_recursive>
 8001756:	bf00      	nop
 8001758:	200005f1 	.word	0x200005f1

0800175c <__sinit>:
 800175c:	b510      	push	{r4, lr}
 800175e:	4604      	mov	r4, r0
 8001760:	f7ff fff0 	bl	8001744 <__sfp_lock_acquire>
 8001764:	6a23      	ldr	r3, [r4, #32]
 8001766:	b11b      	cbz	r3, 8001770 <__sinit+0x14>
 8001768:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800176c:	f7ff bff0 	b.w	8001750 <__sfp_lock_release>
 8001770:	4b04      	ldr	r3, [pc, #16]	@ (8001784 <__sinit+0x28>)
 8001772:	6223      	str	r3, [r4, #32]
 8001774:	4b04      	ldr	r3, [pc, #16]	@ (8001788 <__sinit+0x2c>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d1f5      	bne.n	8001768 <__sinit+0xc>
 800177c:	f7ff ffc4 	bl	8001708 <global_stdio_init.part.0>
 8001780:	e7f2      	b.n	8001768 <__sinit+0xc>
 8001782:	bf00      	nop
 8001784:	080016c9 	.word	0x080016c9
 8001788:	200005e8 	.word	0x200005e8

0800178c <_fwalk_sglue>:
 800178c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001790:	4607      	mov	r7, r0
 8001792:	4688      	mov	r8, r1
 8001794:	4614      	mov	r4, r2
 8001796:	2600      	movs	r6, #0
 8001798:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800179c:	f1b9 0901 	subs.w	r9, r9, #1
 80017a0:	d505      	bpl.n	80017ae <_fwalk_sglue+0x22>
 80017a2:	6824      	ldr	r4, [r4, #0]
 80017a4:	2c00      	cmp	r4, #0
 80017a6:	d1f7      	bne.n	8001798 <_fwalk_sglue+0xc>
 80017a8:	4630      	mov	r0, r6
 80017aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80017ae:	89ab      	ldrh	r3, [r5, #12]
 80017b0:	2b01      	cmp	r3, #1
 80017b2:	d907      	bls.n	80017c4 <_fwalk_sglue+0x38>
 80017b4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80017b8:	3301      	adds	r3, #1
 80017ba:	d003      	beq.n	80017c4 <_fwalk_sglue+0x38>
 80017bc:	4629      	mov	r1, r5
 80017be:	4638      	mov	r0, r7
 80017c0:	47c0      	blx	r8
 80017c2:	4306      	orrs	r6, r0
 80017c4:	3568      	adds	r5, #104	@ 0x68
 80017c6:	e7e9      	b.n	800179c <_fwalk_sglue+0x10>

080017c8 <iprintf>:
 80017c8:	b40f      	push	{r0, r1, r2, r3}
 80017ca:	b507      	push	{r0, r1, r2, lr}
 80017cc:	4906      	ldr	r1, [pc, #24]	@ (80017e8 <iprintf+0x20>)
 80017ce:	ab04      	add	r3, sp, #16
 80017d0:	6808      	ldr	r0, [r1, #0]
 80017d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80017d6:	6881      	ldr	r1, [r0, #8]
 80017d8:	9301      	str	r3, [sp, #4]
 80017da:	f000 fad9 	bl	8001d90 <_vfiprintf_r>
 80017de:	b003      	add	sp, #12
 80017e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80017e4:	b004      	add	sp, #16
 80017e6:	4770      	bx	lr
 80017e8:	20000018 	.word	0x20000018

080017ec <_puts_r>:
 80017ec:	6a03      	ldr	r3, [r0, #32]
 80017ee:	b570      	push	{r4, r5, r6, lr}
 80017f0:	6884      	ldr	r4, [r0, #8]
 80017f2:	4605      	mov	r5, r0
 80017f4:	460e      	mov	r6, r1
 80017f6:	b90b      	cbnz	r3, 80017fc <_puts_r+0x10>
 80017f8:	f7ff ffb0 	bl	800175c <__sinit>
 80017fc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80017fe:	07db      	lsls	r3, r3, #31
 8001800:	d405      	bmi.n	800180e <_puts_r+0x22>
 8001802:	89a3      	ldrh	r3, [r4, #12]
 8001804:	0598      	lsls	r0, r3, #22
 8001806:	d402      	bmi.n	800180e <_puts_r+0x22>
 8001808:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800180a:	f000 f99e 	bl	8001b4a <__retarget_lock_acquire_recursive>
 800180e:	89a3      	ldrh	r3, [r4, #12]
 8001810:	0719      	lsls	r1, r3, #28
 8001812:	d502      	bpl.n	800181a <_puts_r+0x2e>
 8001814:	6923      	ldr	r3, [r4, #16]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d135      	bne.n	8001886 <_puts_r+0x9a>
 800181a:	4621      	mov	r1, r4
 800181c:	4628      	mov	r0, r5
 800181e:	f000 f8c5 	bl	80019ac <__swsetup_r>
 8001822:	b380      	cbz	r0, 8001886 <_puts_r+0x9a>
 8001824:	f04f 35ff 	mov.w	r5, #4294967295
 8001828:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800182a:	07da      	lsls	r2, r3, #31
 800182c:	d405      	bmi.n	800183a <_puts_r+0x4e>
 800182e:	89a3      	ldrh	r3, [r4, #12]
 8001830:	059b      	lsls	r3, r3, #22
 8001832:	d402      	bmi.n	800183a <_puts_r+0x4e>
 8001834:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001836:	f000 f989 	bl	8001b4c <__retarget_lock_release_recursive>
 800183a:	4628      	mov	r0, r5
 800183c:	bd70      	pop	{r4, r5, r6, pc}
 800183e:	2b00      	cmp	r3, #0
 8001840:	da04      	bge.n	800184c <_puts_r+0x60>
 8001842:	69a2      	ldr	r2, [r4, #24]
 8001844:	429a      	cmp	r2, r3
 8001846:	dc17      	bgt.n	8001878 <_puts_r+0x8c>
 8001848:	290a      	cmp	r1, #10
 800184a:	d015      	beq.n	8001878 <_puts_r+0x8c>
 800184c:	6823      	ldr	r3, [r4, #0]
 800184e:	1c5a      	adds	r2, r3, #1
 8001850:	6022      	str	r2, [r4, #0]
 8001852:	7019      	strb	r1, [r3, #0]
 8001854:	68a3      	ldr	r3, [r4, #8]
 8001856:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800185a:	3b01      	subs	r3, #1
 800185c:	60a3      	str	r3, [r4, #8]
 800185e:	2900      	cmp	r1, #0
 8001860:	d1ed      	bne.n	800183e <_puts_r+0x52>
 8001862:	2b00      	cmp	r3, #0
 8001864:	da11      	bge.n	800188a <_puts_r+0x9e>
 8001866:	4622      	mov	r2, r4
 8001868:	210a      	movs	r1, #10
 800186a:	4628      	mov	r0, r5
 800186c:	f000 f85f 	bl	800192e <__swbuf_r>
 8001870:	3001      	adds	r0, #1
 8001872:	d0d7      	beq.n	8001824 <_puts_r+0x38>
 8001874:	250a      	movs	r5, #10
 8001876:	e7d7      	b.n	8001828 <_puts_r+0x3c>
 8001878:	4622      	mov	r2, r4
 800187a:	4628      	mov	r0, r5
 800187c:	f000 f857 	bl	800192e <__swbuf_r>
 8001880:	3001      	adds	r0, #1
 8001882:	d1e7      	bne.n	8001854 <_puts_r+0x68>
 8001884:	e7ce      	b.n	8001824 <_puts_r+0x38>
 8001886:	3e01      	subs	r6, #1
 8001888:	e7e4      	b.n	8001854 <_puts_r+0x68>
 800188a:	6823      	ldr	r3, [r4, #0]
 800188c:	1c5a      	adds	r2, r3, #1
 800188e:	6022      	str	r2, [r4, #0]
 8001890:	220a      	movs	r2, #10
 8001892:	701a      	strb	r2, [r3, #0]
 8001894:	e7ee      	b.n	8001874 <_puts_r+0x88>
	...

08001898 <puts>:
 8001898:	4b02      	ldr	r3, [pc, #8]	@ (80018a4 <puts+0xc>)
 800189a:	4601      	mov	r1, r0
 800189c:	6818      	ldr	r0, [r3, #0]
 800189e:	f7ff bfa5 	b.w	80017ec <_puts_r>
 80018a2:	bf00      	nop
 80018a4:	20000018 	.word	0x20000018

080018a8 <__sread>:
 80018a8:	b510      	push	{r4, lr}
 80018aa:	460c      	mov	r4, r1
 80018ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80018b0:	f000 f8fc 	bl	8001aac <_read_r>
 80018b4:	2800      	cmp	r0, #0
 80018b6:	bfab      	itete	ge
 80018b8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80018ba:	89a3      	ldrhlt	r3, [r4, #12]
 80018bc:	181b      	addge	r3, r3, r0
 80018be:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80018c2:	bfac      	ite	ge
 80018c4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80018c6:	81a3      	strhlt	r3, [r4, #12]
 80018c8:	bd10      	pop	{r4, pc}

080018ca <__swrite>:
 80018ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80018ce:	461f      	mov	r7, r3
 80018d0:	898b      	ldrh	r3, [r1, #12]
 80018d2:	05db      	lsls	r3, r3, #23
 80018d4:	4605      	mov	r5, r0
 80018d6:	460c      	mov	r4, r1
 80018d8:	4616      	mov	r6, r2
 80018da:	d505      	bpl.n	80018e8 <__swrite+0x1e>
 80018dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80018e0:	2302      	movs	r3, #2
 80018e2:	2200      	movs	r2, #0
 80018e4:	f000 f8d0 	bl	8001a88 <_lseek_r>
 80018e8:	89a3      	ldrh	r3, [r4, #12]
 80018ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80018ee:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80018f2:	81a3      	strh	r3, [r4, #12]
 80018f4:	4632      	mov	r2, r6
 80018f6:	463b      	mov	r3, r7
 80018f8:	4628      	mov	r0, r5
 80018fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80018fe:	f000 b8e7 	b.w	8001ad0 <_write_r>

08001902 <__sseek>:
 8001902:	b510      	push	{r4, lr}
 8001904:	460c      	mov	r4, r1
 8001906:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800190a:	f000 f8bd 	bl	8001a88 <_lseek_r>
 800190e:	1c43      	adds	r3, r0, #1
 8001910:	89a3      	ldrh	r3, [r4, #12]
 8001912:	bf15      	itete	ne
 8001914:	6560      	strne	r0, [r4, #84]	@ 0x54
 8001916:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800191a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800191e:	81a3      	strheq	r3, [r4, #12]
 8001920:	bf18      	it	ne
 8001922:	81a3      	strhne	r3, [r4, #12]
 8001924:	bd10      	pop	{r4, pc}

08001926 <__sclose>:
 8001926:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800192a:	f000 b89d 	b.w	8001a68 <_close_r>

0800192e <__swbuf_r>:
 800192e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001930:	460e      	mov	r6, r1
 8001932:	4614      	mov	r4, r2
 8001934:	4605      	mov	r5, r0
 8001936:	b118      	cbz	r0, 8001940 <__swbuf_r+0x12>
 8001938:	6a03      	ldr	r3, [r0, #32]
 800193a:	b90b      	cbnz	r3, 8001940 <__swbuf_r+0x12>
 800193c:	f7ff ff0e 	bl	800175c <__sinit>
 8001940:	69a3      	ldr	r3, [r4, #24]
 8001942:	60a3      	str	r3, [r4, #8]
 8001944:	89a3      	ldrh	r3, [r4, #12]
 8001946:	071a      	lsls	r2, r3, #28
 8001948:	d501      	bpl.n	800194e <__swbuf_r+0x20>
 800194a:	6923      	ldr	r3, [r4, #16]
 800194c:	b943      	cbnz	r3, 8001960 <__swbuf_r+0x32>
 800194e:	4621      	mov	r1, r4
 8001950:	4628      	mov	r0, r5
 8001952:	f000 f82b 	bl	80019ac <__swsetup_r>
 8001956:	b118      	cbz	r0, 8001960 <__swbuf_r+0x32>
 8001958:	f04f 37ff 	mov.w	r7, #4294967295
 800195c:	4638      	mov	r0, r7
 800195e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001960:	6823      	ldr	r3, [r4, #0]
 8001962:	6922      	ldr	r2, [r4, #16]
 8001964:	1a98      	subs	r0, r3, r2
 8001966:	6963      	ldr	r3, [r4, #20]
 8001968:	b2f6      	uxtb	r6, r6
 800196a:	4283      	cmp	r3, r0
 800196c:	4637      	mov	r7, r6
 800196e:	dc05      	bgt.n	800197c <__swbuf_r+0x4e>
 8001970:	4621      	mov	r1, r4
 8001972:	4628      	mov	r0, r5
 8001974:	f000 fd30 	bl	80023d8 <_fflush_r>
 8001978:	2800      	cmp	r0, #0
 800197a:	d1ed      	bne.n	8001958 <__swbuf_r+0x2a>
 800197c:	68a3      	ldr	r3, [r4, #8]
 800197e:	3b01      	subs	r3, #1
 8001980:	60a3      	str	r3, [r4, #8]
 8001982:	6823      	ldr	r3, [r4, #0]
 8001984:	1c5a      	adds	r2, r3, #1
 8001986:	6022      	str	r2, [r4, #0]
 8001988:	701e      	strb	r6, [r3, #0]
 800198a:	6962      	ldr	r2, [r4, #20]
 800198c:	1c43      	adds	r3, r0, #1
 800198e:	429a      	cmp	r2, r3
 8001990:	d004      	beq.n	800199c <__swbuf_r+0x6e>
 8001992:	89a3      	ldrh	r3, [r4, #12]
 8001994:	07db      	lsls	r3, r3, #31
 8001996:	d5e1      	bpl.n	800195c <__swbuf_r+0x2e>
 8001998:	2e0a      	cmp	r6, #10
 800199a:	d1df      	bne.n	800195c <__swbuf_r+0x2e>
 800199c:	4621      	mov	r1, r4
 800199e:	4628      	mov	r0, r5
 80019a0:	f000 fd1a 	bl	80023d8 <_fflush_r>
 80019a4:	2800      	cmp	r0, #0
 80019a6:	d0d9      	beq.n	800195c <__swbuf_r+0x2e>
 80019a8:	e7d6      	b.n	8001958 <__swbuf_r+0x2a>
	...

080019ac <__swsetup_r>:
 80019ac:	b538      	push	{r3, r4, r5, lr}
 80019ae:	4b29      	ldr	r3, [pc, #164]	@ (8001a54 <__swsetup_r+0xa8>)
 80019b0:	4605      	mov	r5, r0
 80019b2:	6818      	ldr	r0, [r3, #0]
 80019b4:	460c      	mov	r4, r1
 80019b6:	b118      	cbz	r0, 80019c0 <__swsetup_r+0x14>
 80019b8:	6a03      	ldr	r3, [r0, #32]
 80019ba:	b90b      	cbnz	r3, 80019c0 <__swsetup_r+0x14>
 80019bc:	f7ff fece 	bl	800175c <__sinit>
 80019c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80019c4:	0719      	lsls	r1, r3, #28
 80019c6:	d422      	bmi.n	8001a0e <__swsetup_r+0x62>
 80019c8:	06da      	lsls	r2, r3, #27
 80019ca:	d407      	bmi.n	80019dc <__swsetup_r+0x30>
 80019cc:	2209      	movs	r2, #9
 80019ce:	602a      	str	r2, [r5, #0]
 80019d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80019d4:	81a3      	strh	r3, [r4, #12]
 80019d6:	f04f 30ff 	mov.w	r0, #4294967295
 80019da:	e033      	b.n	8001a44 <__swsetup_r+0x98>
 80019dc:	0758      	lsls	r0, r3, #29
 80019de:	d512      	bpl.n	8001a06 <__swsetup_r+0x5a>
 80019e0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80019e2:	b141      	cbz	r1, 80019f6 <__swsetup_r+0x4a>
 80019e4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80019e8:	4299      	cmp	r1, r3
 80019ea:	d002      	beq.n	80019f2 <__swsetup_r+0x46>
 80019ec:	4628      	mov	r0, r5
 80019ee:	f000 f8af 	bl	8001b50 <_free_r>
 80019f2:	2300      	movs	r3, #0
 80019f4:	6363      	str	r3, [r4, #52]	@ 0x34
 80019f6:	89a3      	ldrh	r3, [r4, #12]
 80019f8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80019fc:	81a3      	strh	r3, [r4, #12]
 80019fe:	2300      	movs	r3, #0
 8001a00:	6063      	str	r3, [r4, #4]
 8001a02:	6923      	ldr	r3, [r4, #16]
 8001a04:	6023      	str	r3, [r4, #0]
 8001a06:	89a3      	ldrh	r3, [r4, #12]
 8001a08:	f043 0308 	orr.w	r3, r3, #8
 8001a0c:	81a3      	strh	r3, [r4, #12]
 8001a0e:	6923      	ldr	r3, [r4, #16]
 8001a10:	b94b      	cbnz	r3, 8001a26 <__swsetup_r+0x7a>
 8001a12:	89a3      	ldrh	r3, [r4, #12]
 8001a14:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8001a18:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001a1c:	d003      	beq.n	8001a26 <__swsetup_r+0x7a>
 8001a1e:	4621      	mov	r1, r4
 8001a20:	4628      	mov	r0, r5
 8001a22:	f000 fd27 	bl	8002474 <__smakebuf_r>
 8001a26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001a2a:	f013 0201 	ands.w	r2, r3, #1
 8001a2e:	d00a      	beq.n	8001a46 <__swsetup_r+0x9a>
 8001a30:	2200      	movs	r2, #0
 8001a32:	60a2      	str	r2, [r4, #8]
 8001a34:	6962      	ldr	r2, [r4, #20]
 8001a36:	4252      	negs	r2, r2
 8001a38:	61a2      	str	r2, [r4, #24]
 8001a3a:	6922      	ldr	r2, [r4, #16]
 8001a3c:	b942      	cbnz	r2, 8001a50 <__swsetup_r+0xa4>
 8001a3e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8001a42:	d1c5      	bne.n	80019d0 <__swsetup_r+0x24>
 8001a44:	bd38      	pop	{r3, r4, r5, pc}
 8001a46:	0799      	lsls	r1, r3, #30
 8001a48:	bf58      	it	pl
 8001a4a:	6962      	ldrpl	r2, [r4, #20]
 8001a4c:	60a2      	str	r2, [r4, #8]
 8001a4e:	e7f4      	b.n	8001a3a <__swsetup_r+0x8e>
 8001a50:	2000      	movs	r0, #0
 8001a52:	e7f7      	b.n	8001a44 <__swsetup_r+0x98>
 8001a54:	20000018 	.word	0x20000018

08001a58 <memset>:
 8001a58:	4402      	add	r2, r0
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d100      	bne.n	8001a62 <memset+0xa>
 8001a60:	4770      	bx	lr
 8001a62:	f803 1b01 	strb.w	r1, [r3], #1
 8001a66:	e7f9      	b.n	8001a5c <memset+0x4>

08001a68 <_close_r>:
 8001a68:	b538      	push	{r3, r4, r5, lr}
 8001a6a:	4d06      	ldr	r5, [pc, #24]	@ (8001a84 <_close_r+0x1c>)
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	4604      	mov	r4, r0
 8001a70:	4608      	mov	r0, r1
 8001a72:	602b      	str	r3, [r5, #0]
 8001a74:	f7ff fd55 	bl	8001522 <_close>
 8001a78:	1c43      	adds	r3, r0, #1
 8001a7a:	d102      	bne.n	8001a82 <_close_r+0x1a>
 8001a7c:	682b      	ldr	r3, [r5, #0]
 8001a7e:	b103      	cbz	r3, 8001a82 <_close_r+0x1a>
 8001a80:	6023      	str	r3, [r4, #0]
 8001a82:	bd38      	pop	{r3, r4, r5, pc}
 8001a84:	200005ec 	.word	0x200005ec

08001a88 <_lseek_r>:
 8001a88:	b538      	push	{r3, r4, r5, lr}
 8001a8a:	4d07      	ldr	r5, [pc, #28]	@ (8001aa8 <_lseek_r+0x20>)
 8001a8c:	4604      	mov	r4, r0
 8001a8e:	4608      	mov	r0, r1
 8001a90:	4611      	mov	r1, r2
 8001a92:	2200      	movs	r2, #0
 8001a94:	602a      	str	r2, [r5, #0]
 8001a96:	461a      	mov	r2, r3
 8001a98:	f7ff fd67 	bl	800156a <_lseek>
 8001a9c:	1c43      	adds	r3, r0, #1
 8001a9e:	d102      	bne.n	8001aa6 <_lseek_r+0x1e>
 8001aa0:	682b      	ldr	r3, [r5, #0]
 8001aa2:	b103      	cbz	r3, 8001aa6 <_lseek_r+0x1e>
 8001aa4:	6023      	str	r3, [r4, #0]
 8001aa6:	bd38      	pop	{r3, r4, r5, pc}
 8001aa8:	200005ec 	.word	0x200005ec

08001aac <_read_r>:
 8001aac:	b538      	push	{r3, r4, r5, lr}
 8001aae:	4d07      	ldr	r5, [pc, #28]	@ (8001acc <_read_r+0x20>)
 8001ab0:	4604      	mov	r4, r0
 8001ab2:	4608      	mov	r0, r1
 8001ab4:	4611      	mov	r1, r2
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	602a      	str	r2, [r5, #0]
 8001aba:	461a      	mov	r2, r3
 8001abc:	f7ff fcf8 	bl	80014b0 <_read>
 8001ac0:	1c43      	adds	r3, r0, #1
 8001ac2:	d102      	bne.n	8001aca <_read_r+0x1e>
 8001ac4:	682b      	ldr	r3, [r5, #0]
 8001ac6:	b103      	cbz	r3, 8001aca <_read_r+0x1e>
 8001ac8:	6023      	str	r3, [r4, #0]
 8001aca:	bd38      	pop	{r3, r4, r5, pc}
 8001acc:	200005ec 	.word	0x200005ec

08001ad0 <_write_r>:
 8001ad0:	b538      	push	{r3, r4, r5, lr}
 8001ad2:	4d07      	ldr	r5, [pc, #28]	@ (8001af0 <_write_r+0x20>)
 8001ad4:	4604      	mov	r4, r0
 8001ad6:	4608      	mov	r0, r1
 8001ad8:	4611      	mov	r1, r2
 8001ada:	2200      	movs	r2, #0
 8001adc:	602a      	str	r2, [r5, #0]
 8001ade:	461a      	mov	r2, r3
 8001ae0:	f7ff fd03 	bl	80014ea <_write>
 8001ae4:	1c43      	adds	r3, r0, #1
 8001ae6:	d102      	bne.n	8001aee <_write_r+0x1e>
 8001ae8:	682b      	ldr	r3, [r5, #0]
 8001aea:	b103      	cbz	r3, 8001aee <_write_r+0x1e>
 8001aec:	6023      	str	r3, [r4, #0]
 8001aee:	bd38      	pop	{r3, r4, r5, pc}
 8001af0:	200005ec 	.word	0x200005ec

08001af4 <__errno>:
 8001af4:	4b01      	ldr	r3, [pc, #4]	@ (8001afc <__errno+0x8>)
 8001af6:	6818      	ldr	r0, [r3, #0]
 8001af8:	4770      	bx	lr
 8001afa:	bf00      	nop
 8001afc:	20000018 	.word	0x20000018

08001b00 <__libc_init_array>:
 8001b00:	b570      	push	{r4, r5, r6, lr}
 8001b02:	4d0d      	ldr	r5, [pc, #52]	@ (8001b38 <__libc_init_array+0x38>)
 8001b04:	4c0d      	ldr	r4, [pc, #52]	@ (8001b3c <__libc_init_array+0x3c>)
 8001b06:	1b64      	subs	r4, r4, r5
 8001b08:	10a4      	asrs	r4, r4, #2
 8001b0a:	2600      	movs	r6, #0
 8001b0c:	42a6      	cmp	r6, r4
 8001b0e:	d109      	bne.n	8001b24 <__libc_init_array+0x24>
 8001b10:	4d0b      	ldr	r5, [pc, #44]	@ (8001b40 <__libc_init_array+0x40>)
 8001b12:	4c0c      	ldr	r4, [pc, #48]	@ (8001b44 <__libc_init_array+0x44>)
 8001b14:	f000 fd1c 	bl	8002550 <_init>
 8001b18:	1b64      	subs	r4, r4, r5
 8001b1a:	10a4      	asrs	r4, r4, #2
 8001b1c:	2600      	movs	r6, #0
 8001b1e:	42a6      	cmp	r6, r4
 8001b20:	d105      	bne.n	8001b2e <__libc_init_array+0x2e>
 8001b22:	bd70      	pop	{r4, r5, r6, pc}
 8001b24:	f855 3b04 	ldr.w	r3, [r5], #4
 8001b28:	4798      	blx	r3
 8001b2a:	3601      	adds	r6, #1
 8001b2c:	e7ee      	b.n	8001b0c <__libc_init_array+0xc>
 8001b2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001b32:	4798      	blx	r3
 8001b34:	3601      	adds	r6, #1
 8001b36:	e7f2      	b.n	8001b1e <__libc_init_array+0x1e>
 8001b38:	0800261c 	.word	0x0800261c
 8001b3c:	0800261c 	.word	0x0800261c
 8001b40:	0800261c 	.word	0x0800261c
 8001b44:	08002620 	.word	0x08002620

08001b48 <__retarget_lock_init_recursive>:
 8001b48:	4770      	bx	lr

08001b4a <__retarget_lock_acquire_recursive>:
 8001b4a:	4770      	bx	lr

08001b4c <__retarget_lock_release_recursive>:
 8001b4c:	4770      	bx	lr
	...

08001b50 <_free_r>:
 8001b50:	b538      	push	{r3, r4, r5, lr}
 8001b52:	4605      	mov	r5, r0
 8001b54:	2900      	cmp	r1, #0
 8001b56:	d041      	beq.n	8001bdc <_free_r+0x8c>
 8001b58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001b5c:	1f0c      	subs	r4, r1, #4
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	bfb8      	it	lt
 8001b62:	18e4      	addlt	r4, r4, r3
 8001b64:	f000 f8e0 	bl	8001d28 <__malloc_lock>
 8001b68:	4a1d      	ldr	r2, [pc, #116]	@ (8001be0 <_free_r+0x90>)
 8001b6a:	6813      	ldr	r3, [r2, #0]
 8001b6c:	b933      	cbnz	r3, 8001b7c <_free_r+0x2c>
 8001b6e:	6063      	str	r3, [r4, #4]
 8001b70:	6014      	str	r4, [r2, #0]
 8001b72:	4628      	mov	r0, r5
 8001b74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001b78:	f000 b8dc 	b.w	8001d34 <__malloc_unlock>
 8001b7c:	42a3      	cmp	r3, r4
 8001b7e:	d908      	bls.n	8001b92 <_free_r+0x42>
 8001b80:	6820      	ldr	r0, [r4, #0]
 8001b82:	1821      	adds	r1, r4, r0
 8001b84:	428b      	cmp	r3, r1
 8001b86:	bf01      	itttt	eq
 8001b88:	6819      	ldreq	r1, [r3, #0]
 8001b8a:	685b      	ldreq	r3, [r3, #4]
 8001b8c:	1809      	addeq	r1, r1, r0
 8001b8e:	6021      	streq	r1, [r4, #0]
 8001b90:	e7ed      	b.n	8001b6e <_free_r+0x1e>
 8001b92:	461a      	mov	r2, r3
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	b10b      	cbz	r3, 8001b9c <_free_r+0x4c>
 8001b98:	42a3      	cmp	r3, r4
 8001b9a:	d9fa      	bls.n	8001b92 <_free_r+0x42>
 8001b9c:	6811      	ldr	r1, [r2, #0]
 8001b9e:	1850      	adds	r0, r2, r1
 8001ba0:	42a0      	cmp	r0, r4
 8001ba2:	d10b      	bne.n	8001bbc <_free_r+0x6c>
 8001ba4:	6820      	ldr	r0, [r4, #0]
 8001ba6:	4401      	add	r1, r0
 8001ba8:	1850      	adds	r0, r2, r1
 8001baa:	4283      	cmp	r3, r0
 8001bac:	6011      	str	r1, [r2, #0]
 8001bae:	d1e0      	bne.n	8001b72 <_free_r+0x22>
 8001bb0:	6818      	ldr	r0, [r3, #0]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	6053      	str	r3, [r2, #4]
 8001bb6:	4408      	add	r0, r1
 8001bb8:	6010      	str	r0, [r2, #0]
 8001bba:	e7da      	b.n	8001b72 <_free_r+0x22>
 8001bbc:	d902      	bls.n	8001bc4 <_free_r+0x74>
 8001bbe:	230c      	movs	r3, #12
 8001bc0:	602b      	str	r3, [r5, #0]
 8001bc2:	e7d6      	b.n	8001b72 <_free_r+0x22>
 8001bc4:	6820      	ldr	r0, [r4, #0]
 8001bc6:	1821      	adds	r1, r4, r0
 8001bc8:	428b      	cmp	r3, r1
 8001bca:	bf04      	itt	eq
 8001bcc:	6819      	ldreq	r1, [r3, #0]
 8001bce:	685b      	ldreq	r3, [r3, #4]
 8001bd0:	6063      	str	r3, [r4, #4]
 8001bd2:	bf04      	itt	eq
 8001bd4:	1809      	addeq	r1, r1, r0
 8001bd6:	6021      	streq	r1, [r4, #0]
 8001bd8:	6054      	str	r4, [r2, #4]
 8001bda:	e7ca      	b.n	8001b72 <_free_r+0x22>
 8001bdc:	bd38      	pop	{r3, r4, r5, pc}
 8001bde:	bf00      	nop
 8001be0:	200005f8 	.word	0x200005f8

08001be4 <sbrk_aligned>:
 8001be4:	b570      	push	{r4, r5, r6, lr}
 8001be6:	4e0f      	ldr	r6, [pc, #60]	@ (8001c24 <sbrk_aligned+0x40>)
 8001be8:	460c      	mov	r4, r1
 8001bea:	6831      	ldr	r1, [r6, #0]
 8001bec:	4605      	mov	r5, r0
 8001bee:	b911      	cbnz	r1, 8001bf6 <sbrk_aligned+0x12>
 8001bf0:	f000 fc9e 	bl	8002530 <_sbrk_r>
 8001bf4:	6030      	str	r0, [r6, #0]
 8001bf6:	4621      	mov	r1, r4
 8001bf8:	4628      	mov	r0, r5
 8001bfa:	f000 fc99 	bl	8002530 <_sbrk_r>
 8001bfe:	1c43      	adds	r3, r0, #1
 8001c00:	d103      	bne.n	8001c0a <sbrk_aligned+0x26>
 8001c02:	f04f 34ff 	mov.w	r4, #4294967295
 8001c06:	4620      	mov	r0, r4
 8001c08:	bd70      	pop	{r4, r5, r6, pc}
 8001c0a:	1cc4      	adds	r4, r0, #3
 8001c0c:	f024 0403 	bic.w	r4, r4, #3
 8001c10:	42a0      	cmp	r0, r4
 8001c12:	d0f8      	beq.n	8001c06 <sbrk_aligned+0x22>
 8001c14:	1a21      	subs	r1, r4, r0
 8001c16:	4628      	mov	r0, r5
 8001c18:	f000 fc8a 	bl	8002530 <_sbrk_r>
 8001c1c:	3001      	adds	r0, #1
 8001c1e:	d1f2      	bne.n	8001c06 <sbrk_aligned+0x22>
 8001c20:	e7ef      	b.n	8001c02 <sbrk_aligned+0x1e>
 8001c22:	bf00      	nop
 8001c24:	200005f4 	.word	0x200005f4

08001c28 <_malloc_r>:
 8001c28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001c2c:	1ccd      	adds	r5, r1, #3
 8001c2e:	f025 0503 	bic.w	r5, r5, #3
 8001c32:	3508      	adds	r5, #8
 8001c34:	2d0c      	cmp	r5, #12
 8001c36:	bf38      	it	cc
 8001c38:	250c      	movcc	r5, #12
 8001c3a:	2d00      	cmp	r5, #0
 8001c3c:	4606      	mov	r6, r0
 8001c3e:	db01      	blt.n	8001c44 <_malloc_r+0x1c>
 8001c40:	42a9      	cmp	r1, r5
 8001c42:	d904      	bls.n	8001c4e <_malloc_r+0x26>
 8001c44:	230c      	movs	r3, #12
 8001c46:	6033      	str	r3, [r6, #0]
 8001c48:	2000      	movs	r0, #0
 8001c4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001c4e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001d24 <_malloc_r+0xfc>
 8001c52:	f000 f869 	bl	8001d28 <__malloc_lock>
 8001c56:	f8d8 3000 	ldr.w	r3, [r8]
 8001c5a:	461c      	mov	r4, r3
 8001c5c:	bb44      	cbnz	r4, 8001cb0 <_malloc_r+0x88>
 8001c5e:	4629      	mov	r1, r5
 8001c60:	4630      	mov	r0, r6
 8001c62:	f7ff ffbf 	bl	8001be4 <sbrk_aligned>
 8001c66:	1c43      	adds	r3, r0, #1
 8001c68:	4604      	mov	r4, r0
 8001c6a:	d158      	bne.n	8001d1e <_malloc_r+0xf6>
 8001c6c:	f8d8 4000 	ldr.w	r4, [r8]
 8001c70:	4627      	mov	r7, r4
 8001c72:	2f00      	cmp	r7, #0
 8001c74:	d143      	bne.n	8001cfe <_malloc_r+0xd6>
 8001c76:	2c00      	cmp	r4, #0
 8001c78:	d04b      	beq.n	8001d12 <_malloc_r+0xea>
 8001c7a:	6823      	ldr	r3, [r4, #0]
 8001c7c:	4639      	mov	r1, r7
 8001c7e:	4630      	mov	r0, r6
 8001c80:	eb04 0903 	add.w	r9, r4, r3
 8001c84:	f000 fc54 	bl	8002530 <_sbrk_r>
 8001c88:	4581      	cmp	r9, r0
 8001c8a:	d142      	bne.n	8001d12 <_malloc_r+0xea>
 8001c8c:	6821      	ldr	r1, [r4, #0]
 8001c8e:	1a6d      	subs	r5, r5, r1
 8001c90:	4629      	mov	r1, r5
 8001c92:	4630      	mov	r0, r6
 8001c94:	f7ff ffa6 	bl	8001be4 <sbrk_aligned>
 8001c98:	3001      	adds	r0, #1
 8001c9a:	d03a      	beq.n	8001d12 <_malloc_r+0xea>
 8001c9c:	6823      	ldr	r3, [r4, #0]
 8001c9e:	442b      	add	r3, r5
 8001ca0:	6023      	str	r3, [r4, #0]
 8001ca2:	f8d8 3000 	ldr.w	r3, [r8]
 8001ca6:	685a      	ldr	r2, [r3, #4]
 8001ca8:	bb62      	cbnz	r2, 8001d04 <_malloc_r+0xdc>
 8001caa:	f8c8 7000 	str.w	r7, [r8]
 8001cae:	e00f      	b.n	8001cd0 <_malloc_r+0xa8>
 8001cb0:	6822      	ldr	r2, [r4, #0]
 8001cb2:	1b52      	subs	r2, r2, r5
 8001cb4:	d420      	bmi.n	8001cf8 <_malloc_r+0xd0>
 8001cb6:	2a0b      	cmp	r2, #11
 8001cb8:	d917      	bls.n	8001cea <_malloc_r+0xc2>
 8001cba:	1961      	adds	r1, r4, r5
 8001cbc:	42a3      	cmp	r3, r4
 8001cbe:	6025      	str	r5, [r4, #0]
 8001cc0:	bf18      	it	ne
 8001cc2:	6059      	strne	r1, [r3, #4]
 8001cc4:	6863      	ldr	r3, [r4, #4]
 8001cc6:	bf08      	it	eq
 8001cc8:	f8c8 1000 	streq.w	r1, [r8]
 8001ccc:	5162      	str	r2, [r4, r5]
 8001cce:	604b      	str	r3, [r1, #4]
 8001cd0:	4630      	mov	r0, r6
 8001cd2:	f000 f82f 	bl	8001d34 <__malloc_unlock>
 8001cd6:	f104 000b 	add.w	r0, r4, #11
 8001cda:	1d23      	adds	r3, r4, #4
 8001cdc:	f020 0007 	bic.w	r0, r0, #7
 8001ce0:	1ac2      	subs	r2, r0, r3
 8001ce2:	bf1c      	itt	ne
 8001ce4:	1a1b      	subne	r3, r3, r0
 8001ce6:	50a3      	strne	r3, [r4, r2]
 8001ce8:	e7af      	b.n	8001c4a <_malloc_r+0x22>
 8001cea:	6862      	ldr	r2, [r4, #4]
 8001cec:	42a3      	cmp	r3, r4
 8001cee:	bf0c      	ite	eq
 8001cf0:	f8c8 2000 	streq.w	r2, [r8]
 8001cf4:	605a      	strne	r2, [r3, #4]
 8001cf6:	e7eb      	b.n	8001cd0 <_malloc_r+0xa8>
 8001cf8:	4623      	mov	r3, r4
 8001cfa:	6864      	ldr	r4, [r4, #4]
 8001cfc:	e7ae      	b.n	8001c5c <_malloc_r+0x34>
 8001cfe:	463c      	mov	r4, r7
 8001d00:	687f      	ldr	r7, [r7, #4]
 8001d02:	e7b6      	b.n	8001c72 <_malloc_r+0x4a>
 8001d04:	461a      	mov	r2, r3
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	42a3      	cmp	r3, r4
 8001d0a:	d1fb      	bne.n	8001d04 <_malloc_r+0xdc>
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	6053      	str	r3, [r2, #4]
 8001d10:	e7de      	b.n	8001cd0 <_malloc_r+0xa8>
 8001d12:	230c      	movs	r3, #12
 8001d14:	6033      	str	r3, [r6, #0]
 8001d16:	4630      	mov	r0, r6
 8001d18:	f000 f80c 	bl	8001d34 <__malloc_unlock>
 8001d1c:	e794      	b.n	8001c48 <_malloc_r+0x20>
 8001d1e:	6005      	str	r5, [r0, #0]
 8001d20:	e7d6      	b.n	8001cd0 <_malloc_r+0xa8>
 8001d22:	bf00      	nop
 8001d24:	200005f8 	.word	0x200005f8

08001d28 <__malloc_lock>:
 8001d28:	4801      	ldr	r0, [pc, #4]	@ (8001d30 <__malloc_lock+0x8>)
 8001d2a:	f7ff bf0e 	b.w	8001b4a <__retarget_lock_acquire_recursive>
 8001d2e:	bf00      	nop
 8001d30:	200005f0 	.word	0x200005f0

08001d34 <__malloc_unlock>:
 8001d34:	4801      	ldr	r0, [pc, #4]	@ (8001d3c <__malloc_unlock+0x8>)
 8001d36:	f7ff bf09 	b.w	8001b4c <__retarget_lock_release_recursive>
 8001d3a:	bf00      	nop
 8001d3c:	200005f0 	.word	0x200005f0

08001d40 <__sfputc_r>:
 8001d40:	6893      	ldr	r3, [r2, #8]
 8001d42:	3b01      	subs	r3, #1
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	b410      	push	{r4}
 8001d48:	6093      	str	r3, [r2, #8]
 8001d4a:	da07      	bge.n	8001d5c <__sfputc_r+0x1c>
 8001d4c:	6994      	ldr	r4, [r2, #24]
 8001d4e:	42a3      	cmp	r3, r4
 8001d50:	db01      	blt.n	8001d56 <__sfputc_r+0x16>
 8001d52:	290a      	cmp	r1, #10
 8001d54:	d102      	bne.n	8001d5c <__sfputc_r+0x1c>
 8001d56:	bc10      	pop	{r4}
 8001d58:	f7ff bde9 	b.w	800192e <__swbuf_r>
 8001d5c:	6813      	ldr	r3, [r2, #0]
 8001d5e:	1c58      	adds	r0, r3, #1
 8001d60:	6010      	str	r0, [r2, #0]
 8001d62:	7019      	strb	r1, [r3, #0]
 8001d64:	4608      	mov	r0, r1
 8001d66:	bc10      	pop	{r4}
 8001d68:	4770      	bx	lr

08001d6a <__sfputs_r>:
 8001d6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d6c:	4606      	mov	r6, r0
 8001d6e:	460f      	mov	r7, r1
 8001d70:	4614      	mov	r4, r2
 8001d72:	18d5      	adds	r5, r2, r3
 8001d74:	42ac      	cmp	r4, r5
 8001d76:	d101      	bne.n	8001d7c <__sfputs_r+0x12>
 8001d78:	2000      	movs	r0, #0
 8001d7a:	e007      	b.n	8001d8c <__sfputs_r+0x22>
 8001d7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001d80:	463a      	mov	r2, r7
 8001d82:	4630      	mov	r0, r6
 8001d84:	f7ff ffdc 	bl	8001d40 <__sfputc_r>
 8001d88:	1c43      	adds	r3, r0, #1
 8001d8a:	d1f3      	bne.n	8001d74 <__sfputs_r+0xa>
 8001d8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001d90 <_vfiprintf_r>:
 8001d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001d94:	460d      	mov	r5, r1
 8001d96:	b09d      	sub	sp, #116	@ 0x74
 8001d98:	4614      	mov	r4, r2
 8001d9a:	4698      	mov	r8, r3
 8001d9c:	4606      	mov	r6, r0
 8001d9e:	b118      	cbz	r0, 8001da8 <_vfiprintf_r+0x18>
 8001da0:	6a03      	ldr	r3, [r0, #32]
 8001da2:	b90b      	cbnz	r3, 8001da8 <_vfiprintf_r+0x18>
 8001da4:	f7ff fcda 	bl	800175c <__sinit>
 8001da8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001daa:	07d9      	lsls	r1, r3, #31
 8001dac:	d405      	bmi.n	8001dba <_vfiprintf_r+0x2a>
 8001dae:	89ab      	ldrh	r3, [r5, #12]
 8001db0:	059a      	lsls	r2, r3, #22
 8001db2:	d402      	bmi.n	8001dba <_vfiprintf_r+0x2a>
 8001db4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001db6:	f7ff fec8 	bl	8001b4a <__retarget_lock_acquire_recursive>
 8001dba:	89ab      	ldrh	r3, [r5, #12]
 8001dbc:	071b      	lsls	r3, r3, #28
 8001dbe:	d501      	bpl.n	8001dc4 <_vfiprintf_r+0x34>
 8001dc0:	692b      	ldr	r3, [r5, #16]
 8001dc2:	b99b      	cbnz	r3, 8001dec <_vfiprintf_r+0x5c>
 8001dc4:	4629      	mov	r1, r5
 8001dc6:	4630      	mov	r0, r6
 8001dc8:	f7ff fdf0 	bl	80019ac <__swsetup_r>
 8001dcc:	b170      	cbz	r0, 8001dec <_vfiprintf_r+0x5c>
 8001dce:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001dd0:	07dc      	lsls	r4, r3, #31
 8001dd2:	d504      	bpl.n	8001dde <_vfiprintf_r+0x4e>
 8001dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8001dd8:	b01d      	add	sp, #116	@ 0x74
 8001dda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001dde:	89ab      	ldrh	r3, [r5, #12]
 8001de0:	0598      	lsls	r0, r3, #22
 8001de2:	d4f7      	bmi.n	8001dd4 <_vfiprintf_r+0x44>
 8001de4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001de6:	f7ff feb1 	bl	8001b4c <__retarget_lock_release_recursive>
 8001dea:	e7f3      	b.n	8001dd4 <_vfiprintf_r+0x44>
 8001dec:	2300      	movs	r3, #0
 8001dee:	9309      	str	r3, [sp, #36]	@ 0x24
 8001df0:	2320      	movs	r3, #32
 8001df2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8001df6:	f8cd 800c 	str.w	r8, [sp, #12]
 8001dfa:	2330      	movs	r3, #48	@ 0x30
 8001dfc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8001fac <_vfiprintf_r+0x21c>
 8001e00:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8001e04:	f04f 0901 	mov.w	r9, #1
 8001e08:	4623      	mov	r3, r4
 8001e0a:	469a      	mov	sl, r3
 8001e0c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001e10:	b10a      	cbz	r2, 8001e16 <_vfiprintf_r+0x86>
 8001e12:	2a25      	cmp	r2, #37	@ 0x25
 8001e14:	d1f9      	bne.n	8001e0a <_vfiprintf_r+0x7a>
 8001e16:	ebba 0b04 	subs.w	fp, sl, r4
 8001e1a:	d00b      	beq.n	8001e34 <_vfiprintf_r+0xa4>
 8001e1c:	465b      	mov	r3, fp
 8001e1e:	4622      	mov	r2, r4
 8001e20:	4629      	mov	r1, r5
 8001e22:	4630      	mov	r0, r6
 8001e24:	f7ff ffa1 	bl	8001d6a <__sfputs_r>
 8001e28:	3001      	adds	r0, #1
 8001e2a:	f000 80a7 	beq.w	8001f7c <_vfiprintf_r+0x1ec>
 8001e2e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8001e30:	445a      	add	r2, fp
 8001e32:	9209      	str	r2, [sp, #36]	@ 0x24
 8001e34:	f89a 3000 	ldrb.w	r3, [sl]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	f000 809f 	beq.w	8001f7c <_vfiprintf_r+0x1ec>
 8001e3e:	2300      	movs	r3, #0
 8001e40:	f04f 32ff 	mov.w	r2, #4294967295
 8001e44:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001e48:	f10a 0a01 	add.w	sl, sl, #1
 8001e4c:	9304      	str	r3, [sp, #16]
 8001e4e:	9307      	str	r3, [sp, #28]
 8001e50:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8001e54:	931a      	str	r3, [sp, #104]	@ 0x68
 8001e56:	4654      	mov	r4, sl
 8001e58:	2205      	movs	r2, #5
 8001e5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001e5e:	4853      	ldr	r0, [pc, #332]	@ (8001fac <_vfiprintf_r+0x21c>)
 8001e60:	f7fe f9de 	bl	8000220 <memchr>
 8001e64:	9a04      	ldr	r2, [sp, #16]
 8001e66:	b9d8      	cbnz	r0, 8001ea0 <_vfiprintf_r+0x110>
 8001e68:	06d1      	lsls	r1, r2, #27
 8001e6a:	bf44      	itt	mi
 8001e6c:	2320      	movmi	r3, #32
 8001e6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001e72:	0713      	lsls	r3, r2, #28
 8001e74:	bf44      	itt	mi
 8001e76:	232b      	movmi	r3, #43	@ 0x2b
 8001e78:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001e7c:	f89a 3000 	ldrb.w	r3, [sl]
 8001e80:	2b2a      	cmp	r3, #42	@ 0x2a
 8001e82:	d015      	beq.n	8001eb0 <_vfiprintf_r+0x120>
 8001e84:	9a07      	ldr	r2, [sp, #28]
 8001e86:	4654      	mov	r4, sl
 8001e88:	2000      	movs	r0, #0
 8001e8a:	f04f 0c0a 	mov.w	ip, #10
 8001e8e:	4621      	mov	r1, r4
 8001e90:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001e94:	3b30      	subs	r3, #48	@ 0x30
 8001e96:	2b09      	cmp	r3, #9
 8001e98:	d94b      	bls.n	8001f32 <_vfiprintf_r+0x1a2>
 8001e9a:	b1b0      	cbz	r0, 8001eca <_vfiprintf_r+0x13a>
 8001e9c:	9207      	str	r2, [sp, #28]
 8001e9e:	e014      	b.n	8001eca <_vfiprintf_r+0x13a>
 8001ea0:	eba0 0308 	sub.w	r3, r0, r8
 8001ea4:	fa09 f303 	lsl.w	r3, r9, r3
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	9304      	str	r3, [sp, #16]
 8001eac:	46a2      	mov	sl, r4
 8001eae:	e7d2      	b.n	8001e56 <_vfiprintf_r+0xc6>
 8001eb0:	9b03      	ldr	r3, [sp, #12]
 8001eb2:	1d19      	adds	r1, r3, #4
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	9103      	str	r1, [sp, #12]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	bfbb      	ittet	lt
 8001ebc:	425b      	neglt	r3, r3
 8001ebe:	f042 0202 	orrlt.w	r2, r2, #2
 8001ec2:	9307      	strge	r3, [sp, #28]
 8001ec4:	9307      	strlt	r3, [sp, #28]
 8001ec6:	bfb8      	it	lt
 8001ec8:	9204      	strlt	r2, [sp, #16]
 8001eca:	7823      	ldrb	r3, [r4, #0]
 8001ecc:	2b2e      	cmp	r3, #46	@ 0x2e
 8001ece:	d10a      	bne.n	8001ee6 <_vfiprintf_r+0x156>
 8001ed0:	7863      	ldrb	r3, [r4, #1]
 8001ed2:	2b2a      	cmp	r3, #42	@ 0x2a
 8001ed4:	d132      	bne.n	8001f3c <_vfiprintf_r+0x1ac>
 8001ed6:	9b03      	ldr	r3, [sp, #12]
 8001ed8:	1d1a      	adds	r2, r3, #4
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	9203      	str	r2, [sp, #12]
 8001ede:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8001ee2:	3402      	adds	r4, #2
 8001ee4:	9305      	str	r3, [sp, #20]
 8001ee6:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8001fb0 <_vfiprintf_r+0x220>
 8001eea:	7821      	ldrb	r1, [r4, #0]
 8001eec:	2203      	movs	r2, #3
 8001eee:	4650      	mov	r0, sl
 8001ef0:	f7fe f996 	bl	8000220 <memchr>
 8001ef4:	b138      	cbz	r0, 8001f06 <_vfiprintf_r+0x176>
 8001ef6:	9b04      	ldr	r3, [sp, #16]
 8001ef8:	eba0 000a 	sub.w	r0, r0, sl
 8001efc:	2240      	movs	r2, #64	@ 0x40
 8001efe:	4082      	lsls	r2, r0
 8001f00:	4313      	orrs	r3, r2
 8001f02:	3401      	adds	r4, #1
 8001f04:	9304      	str	r3, [sp, #16]
 8001f06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001f0a:	482a      	ldr	r0, [pc, #168]	@ (8001fb4 <_vfiprintf_r+0x224>)
 8001f0c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8001f10:	2206      	movs	r2, #6
 8001f12:	f7fe f985 	bl	8000220 <memchr>
 8001f16:	2800      	cmp	r0, #0
 8001f18:	d03f      	beq.n	8001f9a <_vfiprintf_r+0x20a>
 8001f1a:	4b27      	ldr	r3, [pc, #156]	@ (8001fb8 <_vfiprintf_r+0x228>)
 8001f1c:	bb1b      	cbnz	r3, 8001f66 <_vfiprintf_r+0x1d6>
 8001f1e:	9b03      	ldr	r3, [sp, #12]
 8001f20:	3307      	adds	r3, #7
 8001f22:	f023 0307 	bic.w	r3, r3, #7
 8001f26:	3308      	adds	r3, #8
 8001f28:	9303      	str	r3, [sp, #12]
 8001f2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001f2c:	443b      	add	r3, r7
 8001f2e:	9309      	str	r3, [sp, #36]	@ 0x24
 8001f30:	e76a      	b.n	8001e08 <_vfiprintf_r+0x78>
 8001f32:	fb0c 3202 	mla	r2, ip, r2, r3
 8001f36:	460c      	mov	r4, r1
 8001f38:	2001      	movs	r0, #1
 8001f3a:	e7a8      	b.n	8001e8e <_vfiprintf_r+0xfe>
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	3401      	adds	r4, #1
 8001f40:	9305      	str	r3, [sp, #20]
 8001f42:	4619      	mov	r1, r3
 8001f44:	f04f 0c0a 	mov.w	ip, #10
 8001f48:	4620      	mov	r0, r4
 8001f4a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001f4e:	3a30      	subs	r2, #48	@ 0x30
 8001f50:	2a09      	cmp	r2, #9
 8001f52:	d903      	bls.n	8001f5c <_vfiprintf_r+0x1cc>
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d0c6      	beq.n	8001ee6 <_vfiprintf_r+0x156>
 8001f58:	9105      	str	r1, [sp, #20]
 8001f5a:	e7c4      	b.n	8001ee6 <_vfiprintf_r+0x156>
 8001f5c:	fb0c 2101 	mla	r1, ip, r1, r2
 8001f60:	4604      	mov	r4, r0
 8001f62:	2301      	movs	r3, #1
 8001f64:	e7f0      	b.n	8001f48 <_vfiprintf_r+0x1b8>
 8001f66:	ab03      	add	r3, sp, #12
 8001f68:	9300      	str	r3, [sp, #0]
 8001f6a:	462a      	mov	r2, r5
 8001f6c:	4b13      	ldr	r3, [pc, #76]	@ (8001fbc <_vfiprintf_r+0x22c>)
 8001f6e:	a904      	add	r1, sp, #16
 8001f70:	4630      	mov	r0, r6
 8001f72:	f3af 8000 	nop.w
 8001f76:	4607      	mov	r7, r0
 8001f78:	1c78      	adds	r0, r7, #1
 8001f7a:	d1d6      	bne.n	8001f2a <_vfiprintf_r+0x19a>
 8001f7c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001f7e:	07d9      	lsls	r1, r3, #31
 8001f80:	d405      	bmi.n	8001f8e <_vfiprintf_r+0x1fe>
 8001f82:	89ab      	ldrh	r3, [r5, #12]
 8001f84:	059a      	lsls	r2, r3, #22
 8001f86:	d402      	bmi.n	8001f8e <_vfiprintf_r+0x1fe>
 8001f88:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001f8a:	f7ff fddf 	bl	8001b4c <__retarget_lock_release_recursive>
 8001f8e:	89ab      	ldrh	r3, [r5, #12]
 8001f90:	065b      	lsls	r3, r3, #25
 8001f92:	f53f af1f 	bmi.w	8001dd4 <_vfiprintf_r+0x44>
 8001f96:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001f98:	e71e      	b.n	8001dd8 <_vfiprintf_r+0x48>
 8001f9a:	ab03      	add	r3, sp, #12
 8001f9c:	9300      	str	r3, [sp, #0]
 8001f9e:	462a      	mov	r2, r5
 8001fa0:	4b06      	ldr	r3, [pc, #24]	@ (8001fbc <_vfiprintf_r+0x22c>)
 8001fa2:	a904      	add	r1, sp, #16
 8001fa4:	4630      	mov	r0, r6
 8001fa6:	f000 f879 	bl	800209c <_printf_i>
 8001faa:	e7e4      	b.n	8001f76 <_vfiprintf_r+0x1e6>
 8001fac:	080025de 	.word	0x080025de
 8001fb0:	080025e4 	.word	0x080025e4
 8001fb4:	080025e8 	.word	0x080025e8
 8001fb8:	00000000 	.word	0x00000000
 8001fbc:	08001d6b 	.word	0x08001d6b

08001fc0 <_printf_common>:
 8001fc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001fc4:	4616      	mov	r6, r2
 8001fc6:	4698      	mov	r8, r3
 8001fc8:	688a      	ldr	r2, [r1, #8]
 8001fca:	690b      	ldr	r3, [r1, #16]
 8001fcc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	bfb8      	it	lt
 8001fd4:	4613      	movlt	r3, r2
 8001fd6:	6033      	str	r3, [r6, #0]
 8001fd8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001fdc:	4607      	mov	r7, r0
 8001fde:	460c      	mov	r4, r1
 8001fe0:	b10a      	cbz	r2, 8001fe6 <_printf_common+0x26>
 8001fe2:	3301      	adds	r3, #1
 8001fe4:	6033      	str	r3, [r6, #0]
 8001fe6:	6823      	ldr	r3, [r4, #0]
 8001fe8:	0699      	lsls	r1, r3, #26
 8001fea:	bf42      	ittt	mi
 8001fec:	6833      	ldrmi	r3, [r6, #0]
 8001fee:	3302      	addmi	r3, #2
 8001ff0:	6033      	strmi	r3, [r6, #0]
 8001ff2:	6825      	ldr	r5, [r4, #0]
 8001ff4:	f015 0506 	ands.w	r5, r5, #6
 8001ff8:	d106      	bne.n	8002008 <_printf_common+0x48>
 8001ffa:	f104 0a19 	add.w	sl, r4, #25
 8001ffe:	68e3      	ldr	r3, [r4, #12]
 8002000:	6832      	ldr	r2, [r6, #0]
 8002002:	1a9b      	subs	r3, r3, r2
 8002004:	42ab      	cmp	r3, r5
 8002006:	dc26      	bgt.n	8002056 <_printf_common+0x96>
 8002008:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800200c:	6822      	ldr	r2, [r4, #0]
 800200e:	3b00      	subs	r3, #0
 8002010:	bf18      	it	ne
 8002012:	2301      	movne	r3, #1
 8002014:	0692      	lsls	r2, r2, #26
 8002016:	d42b      	bmi.n	8002070 <_printf_common+0xb0>
 8002018:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800201c:	4641      	mov	r1, r8
 800201e:	4638      	mov	r0, r7
 8002020:	47c8      	blx	r9
 8002022:	3001      	adds	r0, #1
 8002024:	d01e      	beq.n	8002064 <_printf_common+0xa4>
 8002026:	6823      	ldr	r3, [r4, #0]
 8002028:	6922      	ldr	r2, [r4, #16]
 800202a:	f003 0306 	and.w	r3, r3, #6
 800202e:	2b04      	cmp	r3, #4
 8002030:	bf02      	ittt	eq
 8002032:	68e5      	ldreq	r5, [r4, #12]
 8002034:	6833      	ldreq	r3, [r6, #0]
 8002036:	1aed      	subeq	r5, r5, r3
 8002038:	68a3      	ldr	r3, [r4, #8]
 800203a:	bf0c      	ite	eq
 800203c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002040:	2500      	movne	r5, #0
 8002042:	4293      	cmp	r3, r2
 8002044:	bfc4      	itt	gt
 8002046:	1a9b      	subgt	r3, r3, r2
 8002048:	18ed      	addgt	r5, r5, r3
 800204a:	2600      	movs	r6, #0
 800204c:	341a      	adds	r4, #26
 800204e:	42b5      	cmp	r5, r6
 8002050:	d11a      	bne.n	8002088 <_printf_common+0xc8>
 8002052:	2000      	movs	r0, #0
 8002054:	e008      	b.n	8002068 <_printf_common+0xa8>
 8002056:	2301      	movs	r3, #1
 8002058:	4652      	mov	r2, sl
 800205a:	4641      	mov	r1, r8
 800205c:	4638      	mov	r0, r7
 800205e:	47c8      	blx	r9
 8002060:	3001      	adds	r0, #1
 8002062:	d103      	bne.n	800206c <_printf_common+0xac>
 8002064:	f04f 30ff 	mov.w	r0, #4294967295
 8002068:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800206c:	3501      	adds	r5, #1
 800206e:	e7c6      	b.n	8001ffe <_printf_common+0x3e>
 8002070:	18e1      	adds	r1, r4, r3
 8002072:	1c5a      	adds	r2, r3, #1
 8002074:	2030      	movs	r0, #48	@ 0x30
 8002076:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800207a:	4422      	add	r2, r4
 800207c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002080:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002084:	3302      	adds	r3, #2
 8002086:	e7c7      	b.n	8002018 <_printf_common+0x58>
 8002088:	2301      	movs	r3, #1
 800208a:	4622      	mov	r2, r4
 800208c:	4641      	mov	r1, r8
 800208e:	4638      	mov	r0, r7
 8002090:	47c8      	blx	r9
 8002092:	3001      	adds	r0, #1
 8002094:	d0e6      	beq.n	8002064 <_printf_common+0xa4>
 8002096:	3601      	adds	r6, #1
 8002098:	e7d9      	b.n	800204e <_printf_common+0x8e>
	...

0800209c <_printf_i>:
 800209c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80020a0:	7e0f      	ldrb	r7, [r1, #24]
 80020a2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80020a4:	2f78      	cmp	r7, #120	@ 0x78
 80020a6:	4691      	mov	r9, r2
 80020a8:	4680      	mov	r8, r0
 80020aa:	460c      	mov	r4, r1
 80020ac:	469a      	mov	sl, r3
 80020ae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80020b2:	d807      	bhi.n	80020c4 <_printf_i+0x28>
 80020b4:	2f62      	cmp	r7, #98	@ 0x62
 80020b6:	d80a      	bhi.n	80020ce <_printf_i+0x32>
 80020b8:	2f00      	cmp	r7, #0
 80020ba:	f000 80d1 	beq.w	8002260 <_printf_i+0x1c4>
 80020be:	2f58      	cmp	r7, #88	@ 0x58
 80020c0:	f000 80b8 	beq.w	8002234 <_printf_i+0x198>
 80020c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80020c8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80020cc:	e03a      	b.n	8002144 <_printf_i+0xa8>
 80020ce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80020d2:	2b15      	cmp	r3, #21
 80020d4:	d8f6      	bhi.n	80020c4 <_printf_i+0x28>
 80020d6:	a101      	add	r1, pc, #4	@ (adr r1, 80020dc <_printf_i+0x40>)
 80020d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80020dc:	08002135 	.word	0x08002135
 80020e0:	08002149 	.word	0x08002149
 80020e4:	080020c5 	.word	0x080020c5
 80020e8:	080020c5 	.word	0x080020c5
 80020ec:	080020c5 	.word	0x080020c5
 80020f0:	080020c5 	.word	0x080020c5
 80020f4:	08002149 	.word	0x08002149
 80020f8:	080020c5 	.word	0x080020c5
 80020fc:	080020c5 	.word	0x080020c5
 8002100:	080020c5 	.word	0x080020c5
 8002104:	080020c5 	.word	0x080020c5
 8002108:	08002247 	.word	0x08002247
 800210c:	08002173 	.word	0x08002173
 8002110:	08002201 	.word	0x08002201
 8002114:	080020c5 	.word	0x080020c5
 8002118:	080020c5 	.word	0x080020c5
 800211c:	08002269 	.word	0x08002269
 8002120:	080020c5 	.word	0x080020c5
 8002124:	08002173 	.word	0x08002173
 8002128:	080020c5 	.word	0x080020c5
 800212c:	080020c5 	.word	0x080020c5
 8002130:	08002209 	.word	0x08002209
 8002134:	6833      	ldr	r3, [r6, #0]
 8002136:	1d1a      	adds	r2, r3, #4
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	6032      	str	r2, [r6, #0]
 800213c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002140:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002144:	2301      	movs	r3, #1
 8002146:	e09c      	b.n	8002282 <_printf_i+0x1e6>
 8002148:	6833      	ldr	r3, [r6, #0]
 800214a:	6820      	ldr	r0, [r4, #0]
 800214c:	1d19      	adds	r1, r3, #4
 800214e:	6031      	str	r1, [r6, #0]
 8002150:	0606      	lsls	r6, r0, #24
 8002152:	d501      	bpl.n	8002158 <_printf_i+0xbc>
 8002154:	681d      	ldr	r5, [r3, #0]
 8002156:	e003      	b.n	8002160 <_printf_i+0xc4>
 8002158:	0645      	lsls	r5, r0, #25
 800215a:	d5fb      	bpl.n	8002154 <_printf_i+0xb8>
 800215c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002160:	2d00      	cmp	r5, #0
 8002162:	da03      	bge.n	800216c <_printf_i+0xd0>
 8002164:	232d      	movs	r3, #45	@ 0x2d
 8002166:	426d      	negs	r5, r5
 8002168:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800216c:	4858      	ldr	r0, [pc, #352]	@ (80022d0 <_printf_i+0x234>)
 800216e:	230a      	movs	r3, #10
 8002170:	e011      	b.n	8002196 <_printf_i+0xfa>
 8002172:	6821      	ldr	r1, [r4, #0]
 8002174:	6833      	ldr	r3, [r6, #0]
 8002176:	0608      	lsls	r0, r1, #24
 8002178:	f853 5b04 	ldr.w	r5, [r3], #4
 800217c:	d402      	bmi.n	8002184 <_printf_i+0xe8>
 800217e:	0649      	lsls	r1, r1, #25
 8002180:	bf48      	it	mi
 8002182:	b2ad      	uxthmi	r5, r5
 8002184:	2f6f      	cmp	r7, #111	@ 0x6f
 8002186:	4852      	ldr	r0, [pc, #328]	@ (80022d0 <_printf_i+0x234>)
 8002188:	6033      	str	r3, [r6, #0]
 800218a:	bf14      	ite	ne
 800218c:	230a      	movne	r3, #10
 800218e:	2308      	moveq	r3, #8
 8002190:	2100      	movs	r1, #0
 8002192:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8002196:	6866      	ldr	r6, [r4, #4]
 8002198:	60a6      	str	r6, [r4, #8]
 800219a:	2e00      	cmp	r6, #0
 800219c:	db05      	blt.n	80021aa <_printf_i+0x10e>
 800219e:	6821      	ldr	r1, [r4, #0]
 80021a0:	432e      	orrs	r6, r5
 80021a2:	f021 0104 	bic.w	r1, r1, #4
 80021a6:	6021      	str	r1, [r4, #0]
 80021a8:	d04b      	beq.n	8002242 <_printf_i+0x1a6>
 80021aa:	4616      	mov	r6, r2
 80021ac:	fbb5 f1f3 	udiv	r1, r5, r3
 80021b0:	fb03 5711 	mls	r7, r3, r1, r5
 80021b4:	5dc7      	ldrb	r7, [r0, r7]
 80021b6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80021ba:	462f      	mov	r7, r5
 80021bc:	42bb      	cmp	r3, r7
 80021be:	460d      	mov	r5, r1
 80021c0:	d9f4      	bls.n	80021ac <_printf_i+0x110>
 80021c2:	2b08      	cmp	r3, #8
 80021c4:	d10b      	bne.n	80021de <_printf_i+0x142>
 80021c6:	6823      	ldr	r3, [r4, #0]
 80021c8:	07df      	lsls	r7, r3, #31
 80021ca:	d508      	bpl.n	80021de <_printf_i+0x142>
 80021cc:	6923      	ldr	r3, [r4, #16]
 80021ce:	6861      	ldr	r1, [r4, #4]
 80021d0:	4299      	cmp	r1, r3
 80021d2:	bfde      	ittt	le
 80021d4:	2330      	movle	r3, #48	@ 0x30
 80021d6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80021da:	f106 36ff 	addle.w	r6, r6, #4294967295
 80021de:	1b92      	subs	r2, r2, r6
 80021e0:	6122      	str	r2, [r4, #16]
 80021e2:	f8cd a000 	str.w	sl, [sp]
 80021e6:	464b      	mov	r3, r9
 80021e8:	aa03      	add	r2, sp, #12
 80021ea:	4621      	mov	r1, r4
 80021ec:	4640      	mov	r0, r8
 80021ee:	f7ff fee7 	bl	8001fc0 <_printf_common>
 80021f2:	3001      	adds	r0, #1
 80021f4:	d14a      	bne.n	800228c <_printf_i+0x1f0>
 80021f6:	f04f 30ff 	mov.w	r0, #4294967295
 80021fa:	b004      	add	sp, #16
 80021fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002200:	6823      	ldr	r3, [r4, #0]
 8002202:	f043 0320 	orr.w	r3, r3, #32
 8002206:	6023      	str	r3, [r4, #0]
 8002208:	4832      	ldr	r0, [pc, #200]	@ (80022d4 <_printf_i+0x238>)
 800220a:	2778      	movs	r7, #120	@ 0x78
 800220c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002210:	6823      	ldr	r3, [r4, #0]
 8002212:	6831      	ldr	r1, [r6, #0]
 8002214:	061f      	lsls	r7, r3, #24
 8002216:	f851 5b04 	ldr.w	r5, [r1], #4
 800221a:	d402      	bmi.n	8002222 <_printf_i+0x186>
 800221c:	065f      	lsls	r7, r3, #25
 800221e:	bf48      	it	mi
 8002220:	b2ad      	uxthmi	r5, r5
 8002222:	6031      	str	r1, [r6, #0]
 8002224:	07d9      	lsls	r1, r3, #31
 8002226:	bf44      	itt	mi
 8002228:	f043 0320 	orrmi.w	r3, r3, #32
 800222c:	6023      	strmi	r3, [r4, #0]
 800222e:	b11d      	cbz	r5, 8002238 <_printf_i+0x19c>
 8002230:	2310      	movs	r3, #16
 8002232:	e7ad      	b.n	8002190 <_printf_i+0xf4>
 8002234:	4826      	ldr	r0, [pc, #152]	@ (80022d0 <_printf_i+0x234>)
 8002236:	e7e9      	b.n	800220c <_printf_i+0x170>
 8002238:	6823      	ldr	r3, [r4, #0]
 800223a:	f023 0320 	bic.w	r3, r3, #32
 800223e:	6023      	str	r3, [r4, #0]
 8002240:	e7f6      	b.n	8002230 <_printf_i+0x194>
 8002242:	4616      	mov	r6, r2
 8002244:	e7bd      	b.n	80021c2 <_printf_i+0x126>
 8002246:	6833      	ldr	r3, [r6, #0]
 8002248:	6825      	ldr	r5, [r4, #0]
 800224a:	6961      	ldr	r1, [r4, #20]
 800224c:	1d18      	adds	r0, r3, #4
 800224e:	6030      	str	r0, [r6, #0]
 8002250:	062e      	lsls	r6, r5, #24
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	d501      	bpl.n	800225a <_printf_i+0x1be>
 8002256:	6019      	str	r1, [r3, #0]
 8002258:	e002      	b.n	8002260 <_printf_i+0x1c4>
 800225a:	0668      	lsls	r0, r5, #25
 800225c:	d5fb      	bpl.n	8002256 <_printf_i+0x1ba>
 800225e:	8019      	strh	r1, [r3, #0]
 8002260:	2300      	movs	r3, #0
 8002262:	6123      	str	r3, [r4, #16]
 8002264:	4616      	mov	r6, r2
 8002266:	e7bc      	b.n	80021e2 <_printf_i+0x146>
 8002268:	6833      	ldr	r3, [r6, #0]
 800226a:	1d1a      	adds	r2, r3, #4
 800226c:	6032      	str	r2, [r6, #0]
 800226e:	681e      	ldr	r6, [r3, #0]
 8002270:	6862      	ldr	r2, [r4, #4]
 8002272:	2100      	movs	r1, #0
 8002274:	4630      	mov	r0, r6
 8002276:	f7fd ffd3 	bl	8000220 <memchr>
 800227a:	b108      	cbz	r0, 8002280 <_printf_i+0x1e4>
 800227c:	1b80      	subs	r0, r0, r6
 800227e:	6060      	str	r0, [r4, #4]
 8002280:	6863      	ldr	r3, [r4, #4]
 8002282:	6123      	str	r3, [r4, #16]
 8002284:	2300      	movs	r3, #0
 8002286:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800228a:	e7aa      	b.n	80021e2 <_printf_i+0x146>
 800228c:	6923      	ldr	r3, [r4, #16]
 800228e:	4632      	mov	r2, r6
 8002290:	4649      	mov	r1, r9
 8002292:	4640      	mov	r0, r8
 8002294:	47d0      	blx	sl
 8002296:	3001      	adds	r0, #1
 8002298:	d0ad      	beq.n	80021f6 <_printf_i+0x15a>
 800229a:	6823      	ldr	r3, [r4, #0]
 800229c:	079b      	lsls	r3, r3, #30
 800229e:	d413      	bmi.n	80022c8 <_printf_i+0x22c>
 80022a0:	68e0      	ldr	r0, [r4, #12]
 80022a2:	9b03      	ldr	r3, [sp, #12]
 80022a4:	4298      	cmp	r0, r3
 80022a6:	bfb8      	it	lt
 80022a8:	4618      	movlt	r0, r3
 80022aa:	e7a6      	b.n	80021fa <_printf_i+0x15e>
 80022ac:	2301      	movs	r3, #1
 80022ae:	4632      	mov	r2, r6
 80022b0:	4649      	mov	r1, r9
 80022b2:	4640      	mov	r0, r8
 80022b4:	47d0      	blx	sl
 80022b6:	3001      	adds	r0, #1
 80022b8:	d09d      	beq.n	80021f6 <_printf_i+0x15a>
 80022ba:	3501      	adds	r5, #1
 80022bc:	68e3      	ldr	r3, [r4, #12]
 80022be:	9903      	ldr	r1, [sp, #12]
 80022c0:	1a5b      	subs	r3, r3, r1
 80022c2:	42ab      	cmp	r3, r5
 80022c4:	dcf2      	bgt.n	80022ac <_printf_i+0x210>
 80022c6:	e7eb      	b.n	80022a0 <_printf_i+0x204>
 80022c8:	2500      	movs	r5, #0
 80022ca:	f104 0619 	add.w	r6, r4, #25
 80022ce:	e7f5      	b.n	80022bc <_printf_i+0x220>
 80022d0:	080025ef 	.word	0x080025ef
 80022d4:	08002600 	.word	0x08002600

080022d8 <__sflush_r>:
 80022d8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80022dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022de:	0716      	lsls	r6, r2, #28
 80022e0:	4605      	mov	r5, r0
 80022e2:	460c      	mov	r4, r1
 80022e4:	d454      	bmi.n	8002390 <__sflush_r+0xb8>
 80022e6:	684b      	ldr	r3, [r1, #4]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	dc02      	bgt.n	80022f2 <__sflush_r+0x1a>
 80022ec:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	dd48      	ble.n	8002384 <__sflush_r+0xac>
 80022f2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80022f4:	2e00      	cmp	r6, #0
 80022f6:	d045      	beq.n	8002384 <__sflush_r+0xac>
 80022f8:	2300      	movs	r3, #0
 80022fa:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80022fe:	682f      	ldr	r7, [r5, #0]
 8002300:	6a21      	ldr	r1, [r4, #32]
 8002302:	602b      	str	r3, [r5, #0]
 8002304:	d030      	beq.n	8002368 <__sflush_r+0x90>
 8002306:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8002308:	89a3      	ldrh	r3, [r4, #12]
 800230a:	0759      	lsls	r1, r3, #29
 800230c:	d505      	bpl.n	800231a <__sflush_r+0x42>
 800230e:	6863      	ldr	r3, [r4, #4]
 8002310:	1ad2      	subs	r2, r2, r3
 8002312:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002314:	b10b      	cbz	r3, 800231a <__sflush_r+0x42>
 8002316:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002318:	1ad2      	subs	r2, r2, r3
 800231a:	2300      	movs	r3, #0
 800231c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800231e:	6a21      	ldr	r1, [r4, #32]
 8002320:	4628      	mov	r0, r5
 8002322:	47b0      	blx	r6
 8002324:	1c43      	adds	r3, r0, #1
 8002326:	89a3      	ldrh	r3, [r4, #12]
 8002328:	d106      	bne.n	8002338 <__sflush_r+0x60>
 800232a:	6829      	ldr	r1, [r5, #0]
 800232c:	291d      	cmp	r1, #29
 800232e:	d82b      	bhi.n	8002388 <__sflush_r+0xb0>
 8002330:	4a28      	ldr	r2, [pc, #160]	@ (80023d4 <__sflush_r+0xfc>)
 8002332:	40ca      	lsrs	r2, r1
 8002334:	07d6      	lsls	r6, r2, #31
 8002336:	d527      	bpl.n	8002388 <__sflush_r+0xb0>
 8002338:	2200      	movs	r2, #0
 800233a:	6062      	str	r2, [r4, #4]
 800233c:	04d9      	lsls	r1, r3, #19
 800233e:	6922      	ldr	r2, [r4, #16]
 8002340:	6022      	str	r2, [r4, #0]
 8002342:	d504      	bpl.n	800234e <__sflush_r+0x76>
 8002344:	1c42      	adds	r2, r0, #1
 8002346:	d101      	bne.n	800234c <__sflush_r+0x74>
 8002348:	682b      	ldr	r3, [r5, #0]
 800234a:	b903      	cbnz	r3, 800234e <__sflush_r+0x76>
 800234c:	6560      	str	r0, [r4, #84]	@ 0x54
 800234e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002350:	602f      	str	r7, [r5, #0]
 8002352:	b1b9      	cbz	r1, 8002384 <__sflush_r+0xac>
 8002354:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002358:	4299      	cmp	r1, r3
 800235a:	d002      	beq.n	8002362 <__sflush_r+0x8a>
 800235c:	4628      	mov	r0, r5
 800235e:	f7ff fbf7 	bl	8001b50 <_free_r>
 8002362:	2300      	movs	r3, #0
 8002364:	6363      	str	r3, [r4, #52]	@ 0x34
 8002366:	e00d      	b.n	8002384 <__sflush_r+0xac>
 8002368:	2301      	movs	r3, #1
 800236a:	4628      	mov	r0, r5
 800236c:	47b0      	blx	r6
 800236e:	4602      	mov	r2, r0
 8002370:	1c50      	adds	r0, r2, #1
 8002372:	d1c9      	bne.n	8002308 <__sflush_r+0x30>
 8002374:	682b      	ldr	r3, [r5, #0]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d0c6      	beq.n	8002308 <__sflush_r+0x30>
 800237a:	2b1d      	cmp	r3, #29
 800237c:	d001      	beq.n	8002382 <__sflush_r+0xaa>
 800237e:	2b16      	cmp	r3, #22
 8002380:	d11d      	bne.n	80023be <__sflush_r+0xe6>
 8002382:	602f      	str	r7, [r5, #0]
 8002384:	2000      	movs	r0, #0
 8002386:	e021      	b.n	80023cc <__sflush_r+0xf4>
 8002388:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800238c:	b21b      	sxth	r3, r3
 800238e:	e01a      	b.n	80023c6 <__sflush_r+0xee>
 8002390:	690f      	ldr	r7, [r1, #16]
 8002392:	2f00      	cmp	r7, #0
 8002394:	d0f6      	beq.n	8002384 <__sflush_r+0xac>
 8002396:	0793      	lsls	r3, r2, #30
 8002398:	680e      	ldr	r6, [r1, #0]
 800239a:	bf08      	it	eq
 800239c:	694b      	ldreq	r3, [r1, #20]
 800239e:	600f      	str	r7, [r1, #0]
 80023a0:	bf18      	it	ne
 80023a2:	2300      	movne	r3, #0
 80023a4:	1bf6      	subs	r6, r6, r7
 80023a6:	608b      	str	r3, [r1, #8]
 80023a8:	2e00      	cmp	r6, #0
 80023aa:	ddeb      	ble.n	8002384 <__sflush_r+0xac>
 80023ac:	6a21      	ldr	r1, [r4, #32]
 80023ae:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80023b2:	4633      	mov	r3, r6
 80023b4:	463a      	mov	r2, r7
 80023b6:	4628      	mov	r0, r5
 80023b8:	47e0      	blx	ip
 80023ba:	2800      	cmp	r0, #0
 80023bc:	dc07      	bgt.n	80023ce <__sflush_r+0xf6>
 80023be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80023c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80023c6:	81a3      	strh	r3, [r4, #12]
 80023c8:	f04f 30ff 	mov.w	r0, #4294967295
 80023cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80023ce:	4407      	add	r7, r0
 80023d0:	1a36      	subs	r6, r6, r0
 80023d2:	e7e9      	b.n	80023a8 <__sflush_r+0xd0>
 80023d4:	20400001 	.word	0x20400001

080023d8 <_fflush_r>:
 80023d8:	b538      	push	{r3, r4, r5, lr}
 80023da:	690b      	ldr	r3, [r1, #16]
 80023dc:	4605      	mov	r5, r0
 80023de:	460c      	mov	r4, r1
 80023e0:	b913      	cbnz	r3, 80023e8 <_fflush_r+0x10>
 80023e2:	2500      	movs	r5, #0
 80023e4:	4628      	mov	r0, r5
 80023e6:	bd38      	pop	{r3, r4, r5, pc}
 80023e8:	b118      	cbz	r0, 80023f2 <_fflush_r+0x1a>
 80023ea:	6a03      	ldr	r3, [r0, #32]
 80023ec:	b90b      	cbnz	r3, 80023f2 <_fflush_r+0x1a>
 80023ee:	f7ff f9b5 	bl	800175c <__sinit>
 80023f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d0f3      	beq.n	80023e2 <_fflush_r+0xa>
 80023fa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80023fc:	07d0      	lsls	r0, r2, #31
 80023fe:	d404      	bmi.n	800240a <_fflush_r+0x32>
 8002400:	0599      	lsls	r1, r3, #22
 8002402:	d402      	bmi.n	800240a <_fflush_r+0x32>
 8002404:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002406:	f7ff fba0 	bl	8001b4a <__retarget_lock_acquire_recursive>
 800240a:	4628      	mov	r0, r5
 800240c:	4621      	mov	r1, r4
 800240e:	f7ff ff63 	bl	80022d8 <__sflush_r>
 8002412:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002414:	07da      	lsls	r2, r3, #31
 8002416:	4605      	mov	r5, r0
 8002418:	d4e4      	bmi.n	80023e4 <_fflush_r+0xc>
 800241a:	89a3      	ldrh	r3, [r4, #12]
 800241c:	059b      	lsls	r3, r3, #22
 800241e:	d4e1      	bmi.n	80023e4 <_fflush_r+0xc>
 8002420:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002422:	f7ff fb93 	bl	8001b4c <__retarget_lock_release_recursive>
 8002426:	e7dd      	b.n	80023e4 <_fflush_r+0xc>

08002428 <__swhatbuf_r>:
 8002428:	b570      	push	{r4, r5, r6, lr}
 800242a:	460c      	mov	r4, r1
 800242c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002430:	2900      	cmp	r1, #0
 8002432:	b096      	sub	sp, #88	@ 0x58
 8002434:	4615      	mov	r5, r2
 8002436:	461e      	mov	r6, r3
 8002438:	da0d      	bge.n	8002456 <__swhatbuf_r+0x2e>
 800243a:	89a3      	ldrh	r3, [r4, #12]
 800243c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8002440:	f04f 0100 	mov.w	r1, #0
 8002444:	bf14      	ite	ne
 8002446:	2340      	movne	r3, #64	@ 0x40
 8002448:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800244c:	2000      	movs	r0, #0
 800244e:	6031      	str	r1, [r6, #0]
 8002450:	602b      	str	r3, [r5, #0]
 8002452:	b016      	add	sp, #88	@ 0x58
 8002454:	bd70      	pop	{r4, r5, r6, pc}
 8002456:	466a      	mov	r2, sp
 8002458:	f000 f848 	bl	80024ec <_fstat_r>
 800245c:	2800      	cmp	r0, #0
 800245e:	dbec      	blt.n	800243a <__swhatbuf_r+0x12>
 8002460:	9901      	ldr	r1, [sp, #4]
 8002462:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8002466:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800246a:	4259      	negs	r1, r3
 800246c:	4159      	adcs	r1, r3
 800246e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002472:	e7eb      	b.n	800244c <__swhatbuf_r+0x24>

08002474 <__smakebuf_r>:
 8002474:	898b      	ldrh	r3, [r1, #12]
 8002476:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002478:	079d      	lsls	r5, r3, #30
 800247a:	4606      	mov	r6, r0
 800247c:	460c      	mov	r4, r1
 800247e:	d507      	bpl.n	8002490 <__smakebuf_r+0x1c>
 8002480:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8002484:	6023      	str	r3, [r4, #0]
 8002486:	6123      	str	r3, [r4, #16]
 8002488:	2301      	movs	r3, #1
 800248a:	6163      	str	r3, [r4, #20]
 800248c:	b003      	add	sp, #12
 800248e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002490:	ab01      	add	r3, sp, #4
 8002492:	466a      	mov	r2, sp
 8002494:	f7ff ffc8 	bl	8002428 <__swhatbuf_r>
 8002498:	9f00      	ldr	r7, [sp, #0]
 800249a:	4605      	mov	r5, r0
 800249c:	4639      	mov	r1, r7
 800249e:	4630      	mov	r0, r6
 80024a0:	f7ff fbc2 	bl	8001c28 <_malloc_r>
 80024a4:	b948      	cbnz	r0, 80024ba <__smakebuf_r+0x46>
 80024a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80024aa:	059a      	lsls	r2, r3, #22
 80024ac:	d4ee      	bmi.n	800248c <__smakebuf_r+0x18>
 80024ae:	f023 0303 	bic.w	r3, r3, #3
 80024b2:	f043 0302 	orr.w	r3, r3, #2
 80024b6:	81a3      	strh	r3, [r4, #12]
 80024b8:	e7e2      	b.n	8002480 <__smakebuf_r+0xc>
 80024ba:	89a3      	ldrh	r3, [r4, #12]
 80024bc:	6020      	str	r0, [r4, #0]
 80024be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80024c2:	81a3      	strh	r3, [r4, #12]
 80024c4:	9b01      	ldr	r3, [sp, #4]
 80024c6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80024ca:	b15b      	cbz	r3, 80024e4 <__smakebuf_r+0x70>
 80024cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80024d0:	4630      	mov	r0, r6
 80024d2:	f000 f81d 	bl	8002510 <_isatty_r>
 80024d6:	b128      	cbz	r0, 80024e4 <__smakebuf_r+0x70>
 80024d8:	89a3      	ldrh	r3, [r4, #12]
 80024da:	f023 0303 	bic.w	r3, r3, #3
 80024de:	f043 0301 	orr.w	r3, r3, #1
 80024e2:	81a3      	strh	r3, [r4, #12]
 80024e4:	89a3      	ldrh	r3, [r4, #12]
 80024e6:	431d      	orrs	r5, r3
 80024e8:	81a5      	strh	r5, [r4, #12]
 80024ea:	e7cf      	b.n	800248c <__smakebuf_r+0x18>

080024ec <_fstat_r>:
 80024ec:	b538      	push	{r3, r4, r5, lr}
 80024ee:	4d07      	ldr	r5, [pc, #28]	@ (800250c <_fstat_r+0x20>)
 80024f0:	2300      	movs	r3, #0
 80024f2:	4604      	mov	r4, r0
 80024f4:	4608      	mov	r0, r1
 80024f6:	4611      	mov	r1, r2
 80024f8:	602b      	str	r3, [r5, #0]
 80024fa:	f7ff f81d 	bl	8001538 <_fstat>
 80024fe:	1c43      	adds	r3, r0, #1
 8002500:	d102      	bne.n	8002508 <_fstat_r+0x1c>
 8002502:	682b      	ldr	r3, [r5, #0]
 8002504:	b103      	cbz	r3, 8002508 <_fstat_r+0x1c>
 8002506:	6023      	str	r3, [r4, #0]
 8002508:	bd38      	pop	{r3, r4, r5, pc}
 800250a:	bf00      	nop
 800250c:	200005ec 	.word	0x200005ec

08002510 <_isatty_r>:
 8002510:	b538      	push	{r3, r4, r5, lr}
 8002512:	4d06      	ldr	r5, [pc, #24]	@ (800252c <_isatty_r+0x1c>)
 8002514:	2300      	movs	r3, #0
 8002516:	4604      	mov	r4, r0
 8002518:	4608      	mov	r0, r1
 800251a:	602b      	str	r3, [r5, #0]
 800251c:	f7ff f81b 	bl	8001556 <_isatty>
 8002520:	1c43      	adds	r3, r0, #1
 8002522:	d102      	bne.n	800252a <_isatty_r+0x1a>
 8002524:	682b      	ldr	r3, [r5, #0]
 8002526:	b103      	cbz	r3, 800252a <_isatty_r+0x1a>
 8002528:	6023      	str	r3, [r4, #0]
 800252a:	bd38      	pop	{r3, r4, r5, pc}
 800252c:	200005ec 	.word	0x200005ec

08002530 <_sbrk_r>:
 8002530:	b538      	push	{r3, r4, r5, lr}
 8002532:	4d06      	ldr	r5, [pc, #24]	@ (800254c <_sbrk_r+0x1c>)
 8002534:	2300      	movs	r3, #0
 8002536:	4604      	mov	r4, r0
 8002538:	4608      	mov	r0, r1
 800253a:	602b      	str	r3, [r5, #0]
 800253c:	f7ff f822 	bl	8001584 <_sbrk>
 8002540:	1c43      	adds	r3, r0, #1
 8002542:	d102      	bne.n	800254a <_sbrk_r+0x1a>
 8002544:	682b      	ldr	r3, [r5, #0]
 8002546:	b103      	cbz	r3, 800254a <_sbrk_r+0x1a>
 8002548:	6023      	str	r3, [r4, #0]
 800254a:	bd38      	pop	{r3, r4, r5, pc}
 800254c:	200005ec 	.word	0x200005ec

08002550 <_init>:
 8002550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002552:	bf00      	nop
 8002554:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002556:	bc08      	pop	{r3}
 8002558:	469e      	mov	lr, r3
 800255a:	4770      	bx	lr

0800255c <_fini>:
 800255c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800255e:	bf00      	nop
 8002560:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002562:	bc08      	pop	{r3}
 8002564:	469e      	mov	lr, r3
 8002566:	4770      	bx	lr
