
010STM32F446xx_Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000261c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  080027ec  080027ec  000037ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002830  08002830  0000405c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08002830  08002830  00003830  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002838  08002838  0000405c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002838  08002838  00003838  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800283c  0800283c  0000383c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08002840  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000178  2000005c  0800289c  0000405c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001d4  0800289c  000041d4  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0000405c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001d76  00000000  00000000  00004086  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000081c  00000000  00000000  00005dfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000228  00000000  00000000  00006618  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000018c  00000000  00000000  00006840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003733  00000000  00000000  000069cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002b09  00000000  00000000  0000a0ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000c7f5  00000000  00000000  0000cc08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000193fd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000010d4  00000000  00000000  00019440  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  0001a514  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080027d4 	.word	0x080027d4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000060 	.word	0x20000060
 800020c:	080027d4 	.word	0x080027d4

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_dmul>:
 80002b0:	b570      	push	{r4, r5, r6, lr}
 80002b2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80002b6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80002ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002be:	bf1d      	ittte	ne
 80002c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002c4:	ea94 0f0c 	teqne	r4, ip
 80002c8:	ea95 0f0c 	teqne	r5, ip
 80002cc:	f000 f8de 	bleq	800048c <__aeabi_dmul+0x1dc>
 80002d0:	442c      	add	r4, r5
 80002d2:	ea81 0603 	eor.w	r6, r1, r3
 80002d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002e2:	bf18      	it	ne
 80002e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002ec:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80002f0:	d038      	beq.n	8000364 <__aeabi_dmul+0xb4>
 80002f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002f6:	f04f 0500 	mov.w	r5, #0
 80002fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002fe:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000302:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000306:	f04f 0600 	mov.w	r6, #0
 800030a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800030e:	f09c 0f00 	teq	ip, #0
 8000312:	bf18      	it	ne
 8000314:	f04e 0e01 	orrne.w	lr, lr, #1
 8000318:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800031c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000320:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000324:	d204      	bcs.n	8000330 <__aeabi_dmul+0x80>
 8000326:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800032a:	416d      	adcs	r5, r5
 800032c:	eb46 0606 	adc.w	r6, r6, r6
 8000330:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000334:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000338:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800033c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000340:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000344:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000348:	bf88      	it	hi
 800034a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800034e:	d81e      	bhi.n	800038e <__aeabi_dmul+0xde>
 8000350:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000368:	ea46 0101 	orr.w	r1, r6, r1
 800036c:	ea40 0002 	orr.w	r0, r0, r2
 8000370:	ea81 0103 	eor.w	r1, r1, r3
 8000374:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000378:	bfc2      	ittt	gt
 800037a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800037e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000382:	bd70      	popgt	{r4, r5, r6, pc}
 8000384:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000388:	f04f 0e00 	mov.w	lr, #0
 800038c:	3c01      	subs	r4, #1
 800038e:	f300 80ab 	bgt.w	80004e8 <__aeabi_dmul+0x238>
 8000392:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000396:	bfde      	ittt	le
 8000398:	2000      	movle	r0, #0
 800039a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800039e:	bd70      	pople	{r4, r5, r6, pc}
 80003a0:	f1c4 0400 	rsb	r4, r4, #0
 80003a4:	3c20      	subs	r4, #32
 80003a6:	da35      	bge.n	8000414 <__aeabi_dmul+0x164>
 80003a8:	340c      	adds	r4, #12
 80003aa:	dc1b      	bgt.n	80003e4 <__aeabi_dmul+0x134>
 80003ac:	f104 0414 	add.w	r4, r4, #20
 80003b0:	f1c4 0520 	rsb	r5, r4, #32
 80003b4:	fa00 f305 	lsl.w	r3, r0, r5
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f205 	lsl.w	r2, r1, r5
 80003c0:	ea40 0002 	orr.w	r0, r0, r2
 80003c4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80003c8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80003cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d0:	fa21 f604 	lsr.w	r6, r1, r4
 80003d4:	eb42 0106 	adc.w	r1, r2, r6
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 040c 	rsb	r4, r4, #12
 80003e8:	f1c4 0520 	rsb	r5, r4, #32
 80003ec:	fa00 f304 	lsl.w	r3, r0, r4
 80003f0:	fa20 f005 	lsr.w	r0, r0, r5
 80003f4:	fa01 f204 	lsl.w	r2, r1, r4
 80003f8:	ea40 0002 	orr.w	r0, r0, r2
 80003fc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000400:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000404:	f141 0100 	adc.w	r1, r1, #0
 8000408:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800040c:	bf08      	it	eq
 800040e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000412:	bd70      	pop	{r4, r5, r6, pc}
 8000414:	f1c4 0520 	rsb	r5, r4, #32
 8000418:	fa00 f205 	lsl.w	r2, r0, r5
 800041c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000420:	fa20 f304 	lsr.w	r3, r0, r4
 8000424:	fa01 f205 	lsl.w	r2, r1, r5
 8000428:	ea43 0302 	orr.w	r3, r3, r2
 800042c:	fa21 f004 	lsr.w	r0, r1, r4
 8000430:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000434:	fa21 f204 	lsr.w	r2, r1, r4
 8000438:	ea20 0002 	bic.w	r0, r0, r2
 800043c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000440:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000444:	bf08      	it	eq
 8000446:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800044a:	bd70      	pop	{r4, r5, r6, pc}
 800044c:	f094 0f00 	teq	r4, #0
 8000450:	d10f      	bne.n	8000472 <__aeabi_dmul+0x1c2>
 8000452:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000456:	0040      	lsls	r0, r0, #1
 8000458:	eb41 0101 	adc.w	r1, r1, r1
 800045c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000460:	bf08      	it	eq
 8000462:	3c01      	subeq	r4, #1
 8000464:	d0f7      	beq.n	8000456 <__aeabi_dmul+0x1a6>
 8000466:	ea41 0106 	orr.w	r1, r1, r6
 800046a:	f095 0f00 	teq	r5, #0
 800046e:	bf18      	it	ne
 8000470:	4770      	bxne	lr
 8000472:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000476:	0052      	lsls	r2, r2, #1
 8000478:	eb43 0303 	adc.w	r3, r3, r3
 800047c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000480:	bf08      	it	eq
 8000482:	3d01      	subeq	r5, #1
 8000484:	d0f7      	beq.n	8000476 <__aeabi_dmul+0x1c6>
 8000486:	ea43 0306 	orr.w	r3, r3, r6
 800048a:	4770      	bx	lr
 800048c:	ea94 0f0c 	teq	r4, ip
 8000490:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000494:	bf18      	it	ne
 8000496:	ea95 0f0c 	teqne	r5, ip
 800049a:	d00c      	beq.n	80004b6 <__aeabi_dmul+0x206>
 800049c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004a0:	bf18      	it	ne
 80004a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004a6:	d1d1      	bne.n	800044c <__aeabi_dmul+0x19c>
 80004a8:	ea81 0103 	eor.w	r1, r1, r3
 80004ac:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004b0:	f04f 0000 	mov.w	r0, #0
 80004b4:	bd70      	pop	{r4, r5, r6, pc}
 80004b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004ba:	bf06      	itte	eq
 80004bc:	4610      	moveq	r0, r2
 80004be:	4619      	moveq	r1, r3
 80004c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004c4:	d019      	beq.n	80004fa <__aeabi_dmul+0x24a>
 80004c6:	ea94 0f0c 	teq	r4, ip
 80004ca:	d102      	bne.n	80004d2 <__aeabi_dmul+0x222>
 80004cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004d0:	d113      	bne.n	80004fa <__aeabi_dmul+0x24a>
 80004d2:	ea95 0f0c 	teq	r5, ip
 80004d6:	d105      	bne.n	80004e4 <__aeabi_dmul+0x234>
 80004d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004dc:	bf1c      	itt	ne
 80004de:	4610      	movne	r0, r2
 80004e0:	4619      	movne	r1, r3
 80004e2:	d10a      	bne.n	80004fa <__aeabi_dmul+0x24a>
 80004e4:	ea81 0103 	eor.w	r1, r1, r3
 80004e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004ec:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd70      	pop	{r4, r5, r6, pc}
 80004fa:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004fe:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000502:	bd70      	pop	{r4, r5, r6, pc}

08000504 <__aeabi_drsub>:
 8000504:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000508:	e002      	b.n	8000510 <__adddf3>
 800050a:	bf00      	nop

0800050c <__aeabi_dsub>:
 800050c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000510 <__adddf3>:
 8000510:	b530      	push	{r4, r5, lr}
 8000512:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000516:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800051a:	ea94 0f05 	teq	r4, r5
 800051e:	bf08      	it	eq
 8000520:	ea90 0f02 	teqeq	r0, r2
 8000524:	bf1f      	itttt	ne
 8000526:	ea54 0c00 	orrsne.w	ip, r4, r0
 800052a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800052e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000532:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000536:	f000 80e2 	beq.w	80006fe <__adddf3+0x1ee>
 800053a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800053e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000542:	bfb8      	it	lt
 8000544:	426d      	neglt	r5, r5
 8000546:	dd0c      	ble.n	8000562 <__adddf3+0x52>
 8000548:	442c      	add	r4, r5
 800054a:	ea80 0202 	eor.w	r2, r0, r2
 800054e:	ea81 0303 	eor.w	r3, r1, r3
 8000552:	ea82 0000 	eor.w	r0, r2, r0
 8000556:	ea83 0101 	eor.w	r1, r3, r1
 800055a:	ea80 0202 	eor.w	r2, r0, r2
 800055e:	ea81 0303 	eor.w	r3, r1, r3
 8000562:	2d36      	cmp	r5, #54	@ 0x36
 8000564:	bf88      	it	hi
 8000566:	bd30      	pophi	{r4, r5, pc}
 8000568:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800056c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000570:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000574:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000578:	d002      	beq.n	8000580 <__adddf3+0x70>
 800057a:	4240      	negs	r0, r0
 800057c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000580:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000584:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000588:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800058c:	d002      	beq.n	8000594 <__adddf3+0x84>
 800058e:	4252      	negs	r2, r2
 8000590:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000594:	ea94 0f05 	teq	r4, r5
 8000598:	f000 80a7 	beq.w	80006ea <__adddf3+0x1da>
 800059c:	f1a4 0401 	sub.w	r4, r4, #1
 80005a0:	f1d5 0e20 	rsbs	lr, r5, #32
 80005a4:	db0d      	blt.n	80005c2 <__adddf3+0xb2>
 80005a6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005aa:	fa22 f205 	lsr.w	r2, r2, r5
 80005ae:	1880      	adds	r0, r0, r2
 80005b0:	f141 0100 	adc.w	r1, r1, #0
 80005b4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005b8:	1880      	adds	r0, r0, r2
 80005ba:	fa43 f305 	asr.w	r3, r3, r5
 80005be:	4159      	adcs	r1, r3
 80005c0:	e00e      	b.n	80005e0 <__adddf3+0xd0>
 80005c2:	f1a5 0520 	sub.w	r5, r5, #32
 80005c6:	f10e 0e20 	add.w	lr, lr, #32
 80005ca:	2a01      	cmp	r2, #1
 80005cc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005d0:	bf28      	it	cs
 80005d2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005d6:	fa43 f305 	asr.w	r3, r3, r5
 80005da:	18c0      	adds	r0, r0, r3
 80005dc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005e4:	d507      	bpl.n	80005f6 <__adddf3+0xe6>
 80005e6:	f04f 0e00 	mov.w	lr, #0
 80005ea:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ee:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005f2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005f6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80005fa:	d31b      	bcc.n	8000634 <__adddf3+0x124>
 80005fc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000600:	d30c      	bcc.n	800061c <__adddf3+0x10c>
 8000602:	0849      	lsrs	r1, r1, #1
 8000604:	ea5f 0030 	movs.w	r0, r0, rrx
 8000608:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800060c:	f104 0401 	add.w	r4, r4, #1
 8000610:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000614:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000618:	f080 809a 	bcs.w	8000750 <__adddf3+0x240>
 800061c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000620:	bf08      	it	eq
 8000622:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000626:	f150 0000 	adcs.w	r0, r0, #0
 800062a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800062e:	ea41 0105 	orr.w	r1, r1, r5
 8000632:	bd30      	pop	{r4, r5, pc}
 8000634:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000638:	4140      	adcs	r0, r0
 800063a:	eb41 0101 	adc.w	r1, r1, r1
 800063e:	3c01      	subs	r4, #1
 8000640:	bf28      	it	cs
 8000642:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000646:	d2e9      	bcs.n	800061c <__adddf3+0x10c>
 8000648:	f091 0f00 	teq	r1, #0
 800064c:	bf04      	itt	eq
 800064e:	4601      	moveq	r1, r0
 8000650:	2000      	moveq	r0, #0
 8000652:	fab1 f381 	clz	r3, r1
 8000656:	bf08      	it	eq
 8000658:	3320      	addeq	r3, #32
 800065a:	f1a3 030b 	sub.w	r3, r3, #11
 800065e:	f1b3 0220 	subs.w	r2, r3, #32
 8000662:	da0c      	bge.n	800067e <__adddf3+0x16e>
 8000664:	320c      	adds	r2, #12
 8000666:	dd08      	ble.n	800067a <__adddf3+0x16a>
 8000668:	f102 0c14 	add.w	ip, r2, #20
 800066c:	f1c2 020c 	rsb	r2, r2, #12
 8000670:	fa01 f00c 	lsl.w	r0, r1, ip
 8000674:	fa21 f102 	lsr.w	r1, r1, r2
 8000678:	e00c      	b.n	8000694 <__adddf3+0x184>
 800067a:	f102 0214 	add.w	r2, r2, #20
 800067e:	bfd8      	it	le
 8000680:	f1c2 0c20 	rsble	ip, r2, #32
 8000684:	fa01 f102 	lsl.w	r1, r1, r2
 8000688:	fa20 fc0c 	lsr.w	ip, r0, ip
 800068c:	bfdc      	itt	le
 800068e:	ea41 010c 	orrle.w	r1, r1, ip
 8000692:	4090      	lslle	r0, r2
 8000694:	1ae4      	subs	r4, r4, r3
 8000696:	bfa2      	ittt	ge
 8000698:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800069c:	4329      	orrge	r1, r5
 800069e:	bd30      	popge	{r4, r5, pc}
 80006a0:	ea6f 0404 	mvn.w	r4, r4
 80006a4:	3c1f      	subs	r4, #31
 80006a6:	da1c      	bge.n	80006e2 <__adddf3+0x1d2>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc0e      	bgt.n	80006ca <__adddf3+0x1ba>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0220 	rsb	r2, r4, #32
 80006b4:	fa20 f004 	lsr.w	r0, r0, r4
 80006b8:	fa01 f302 	lsl.w	r3, r1, r2
 80006bc:	ea40 0003 	orr.w	r0, r0, r3
 80006c0:	fa21 f304 	lsr.w	r3, r1, r4
 80006c4:	ea45 0103 	orr.w	r1, r5, r3
 80006c8:	bd30      	pop	{r4, r5, pc}
 80006ca:	f1c4 040c 	rsb	r4, r4, #12
 80006ce:	f1c4 0220 	rsb	r2, r4, #32
 80006d2:	fa20 f002 	lsr.w	r0, r0, r2
 80006d6:	fa01 f304 	lsl.w	r3, r1, r4
 80006da:	ea40 0003 	orr.w	r0, r0, r3
 80006de:	4629      	mov	r1, r5
 80006e0:	bd30      	pop	{r4, r5, pc}
 80006e2:	fa21 f004 	lsr.w	r0, r1, r4
 80006e6:	4629      	mov	r1, r5
 80006e8:	bd30      	pop	{r4, r5, pc}
 80006ea:	f094 0f00 	teq	r4, #0
 80006ee:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80006f2:	bf06      	itte	eq
 80006f4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80006f8:	3401      	addeq	r4, #1
 80006fa:	3d01      	subne	r5, #1
 80006fc:	e74e      	b.n	800059c <__adddf3+0x8c>
 80006fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000702:	bf18      	it	ne
 8000704:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000708:	d029      	beq.n	800075e <__adddf3+0x24e>
 800070a:	ea94 0f05 	teq	r4, r5
 800070e:	bf08      	it	eq
 8000710:	ea90 0f02 	teqeq	r0, r2
 8000714:	d005      	beq.n	8000722 <__adddf3+0x212>
 8000716:	ea54 0c00 	orrs.w	ip, r4, r0
 800071a:	bf04      	itt	eq
 800071c:	4619      	moveq	r1, r3
 800071e:	4610      	moveq	r0, r2
 8000720:	bd30      	pop	{r4, r5, pc}
 8000722:	ea91 0f03 	teq	r1, r3
 8000726:	bf1e      	ittt	ne
 8000728:	2100      	movne	r1, #0
 800072a:	2000      	movne	r0, #0
 800072c:	bd30      	popne	{r4, r5, pc}
 800072e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000732:	d105      	bne.n	8000740 <__adddf3+0x230>
 8000734:	0040      	lsls	r0, r0, #1
 8000736:	4149      	adcs	r1, r1
 8000738:	bf28      	it	cs
 800073a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800073e:	bd30      	pop	{r4, r5, pc}
 8000740:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000744:	bf3c      	itt	cc
 8000746:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800074a:	bd30      	popcc	{r4, r5, pc}
 800074c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000750:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000754:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd30      	pop	{r4, r5, pc}
 800075e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000762:	bf1a      	itte	ne
 8000764:	4619      	movne	r1, r3
 8000766:	4610      	movne	r0, r2
 8000768:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800076c:	bf1c      	itt	ne
 800076e:	460b      	movne	r3, r1
 8000770:	4602      	movne	r2, r0
 8000772:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000776:	bf06      	itte	eq
 8000778:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800077c:	ea91 0f03 	teqeq	r1, r3
 8000780:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000784:	bd30      	pop	{r4, r5, pc}
 8000786:	bf00      	nop

08000788 <__aeabi_ui2d>:
 8000788:	f090 0f00 	teq	r0, #0
 800078c:	bf04      	itt	eq
 800078e:	2100      	moveq	r1, #0
 8000790:	4770      	bxeq	lr
 8000792:	b530      	push	{r4, r5, lr}
 8000794:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000798:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800079c:	f04f 0500 	mov.w	r5, #0
 80007a0:	f04f 0100 	mov.w	r1, #0
 80007a4:	e750      	b.n	8000648 <__adddf3+0x138>
 80007a6:	bf00      	nop

080007a8 <__aeabi_i2d>:
 80007a8:	f090 0f00 	teq	r0, #0
 80007ac:	bf04      	itt	eq
 80007ae:	2100      	moveq	r1, #0
 80007b0:	4770      	bxeq	lr
 80007b2:	b530      	push	{r4, r5, lr}
 80007b4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007b8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007bc:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80007c0:	bf48      	it	mi
 80007c2:	4240      	negmi	r0, r0
 80007c4:	f04f 0100 	mov.w	r1, #0
 80007c8:	e73e      	b.n	8000648 <__adddf3+0x138>
 80007ca:	bf00      	nop

080007cc <__aeabi_f2d>:
 80007cc:	0042      	lsls	r2, r0, #1
 80007ce:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007d2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007d6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007da:	bf1f      	itttt	ne
 80007dc:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007e0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007e4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007e8:	4770      	bxne	lr
 80007ea:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007ee:	bf08      	it	eq
 80007f0:	4770      	bxeq	lr
 80007f2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80007f6:	bf04      	itt	eq
 80007f8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80007fc:	4770      	bxeq	lr
 80007fe:	b530      	push	{r4, r5, lr}
 8000800:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000804:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000808:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800080c:	e71c      	b.n	8000648 <__adddf3+0x138>
 800080e:	bf00      	nop

08000810 <__aeabi_ul2d>:
 8000810:	ea50 0201 	orrs.w	r2, r0, r1
 8000814:	bf08      	it	eq
 8000816:	4770      	bxeq	lr
 8000818:	b530      	push	{r4, r5, lr}
 800081a:	f04f 0500 	mov.w	r5, #0
 800081e:	e00a      	b.n	8000836 <__aeabi_l2d+0x16>

08000820 <__aeabi_l2d>:
 8000820:	ea50 0201 	orrs.w	r2, r0, r1
 8000824:	bf08      	it	eq
 8000826:	4770      	bxeq	lr
 8000828:	b530      	push	{r4, r5, lr}
 800082a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800082e:	d502      	bpl.n	8000836 <__aeabi_l2d+0x16>
 8000830:	4240      	negs	r0, r0
 8000832:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000836:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800083a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800083e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000842:	f43f aed8 	beq.w	80005f6 <__adddf3+0xe6>
 8000846:	f04f 0203 	mov.w	r2, #3
 800084a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800084e:	bf18      	it	ne
 8000850:	3203      	addne	r2, #3
 8000852:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000856:	bf18      	it	ne
 8000858:	3203      	addne	r2, #3
 800085a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800085e:	f1c2 0320 	rsb	r3, r2, #32
 8000862:	fa00 fc03 	lsl.w	ip, r0, r3
 8000866:	fa20 f002 	lsr.w	r0, r0, r2
 800086a:	fa01 fe03 	lsl.w	lr, r1, r3
 800086e:	ea40 000e 	orr.w	r0, r0, lr
 8000872:	fa21 f102 	lsr.w	r1, r1, r2
 8000876:	4414      	add	r4, r2
 8000878:	e6bd      	b.n	80005f6 <__adddf3+0xe6>
 800087a:	bf00      	nop

0800087c <__aeabi_d2uiz>:
 800087c:	004a      	lsls	r2, r1, #1
 800087e:	d211      	bcs.n	80008a4 <__aeabi_d2uiz+0x28>
 8000880:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000884:	d211      	bcs.n	80008aa <__aeabi_d2uiz+0x2e>
 8000886:	d50d      	bpl.n	80008a4 <__aeabi_d2uiz+0x28>
 8000888:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800088c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000890:	d40e      	bmi.n	80008b0 <__aeabi_d2uiz+0x34>
 8000892:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000896:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800089a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800089e:	fa23 f002 	lsr.w	r0, r3, r2
 80008a2:	4770      	bx	lr
 80008a4:	f04f 0000 	mov.w	r0, #0
 80008a8:	4770      	bx	lr
 80008aa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80008ae:	d102      	bne.n	80008b6 <__aeabi_d2uiz+0x3a>
 80008b0:	f04f 30ff 	mov.w	r0, #4294967295
 80008b4:	4770      	bx	lr
 80008b6:	f04f 0000 	mov.w	r0, #0
 80008ba:	4770      	bx	lr

080008bc <GPIO_PeripheralClkCtrl>:
 * @return		- none
 *
 * @Note 		-
 */
void GPIO_PeripheralClkCtrl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 80008bc:	b480      	push	{r7}
 80008be:	b085      	sub	sp, #20
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
 80008c4:	460b      	mov	r3, r1
 80008c6:	70fb      	strb	r3, [r7, #3]
	 * translates the GPIO port base addresses into primitive integer data for
	 * ease of use in switch case statement or other applications that require
	 * a more primitive type of data.
	 * note: GPIO port base addresses which are pointers are not primitive data types
	 */
	uint8_t temp1 = GPIO_BASEADDR_TO_CODE(pGPIOx);
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	4a6c      	ldr	r2, [pc, #432]	@ (8000a7c <GPIO_PeripheralClkCtrl+0x1c0>)
 80008cc:	4293      	cmp	r3, r2
 80008ce:	d02b      	beq.n	8000928 <GPIO_PeripheralClkCtrl+0x6c>
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	4a6b      	ldr	r2, [pc, #428]	@ (8000a80 <GPIO_PeripheralClkCtrl+0x1c4>)
 80008d4:	4293      	cmp	r3, r2
 80008d6:	d025      	beq.n	8000924 <GPIO_PeripheralClkCtrl+0x68>
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	4a6a      	ldr	r2, [pc, #424]	@ (8000a84 <GPIO_PeripheralClkCtrl+0x1c8>)
 80008dc:	4293      	cmp	r3, r2
 80008de:	d01f      	beq.n	8000920 <GPIO_PeripheralClkCtrl+0x64>
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	4a69      	ldr	r2, [pc, #420]	@ (8000a88 <GPIO_PeripheralClkCtrl+0x1cc>)
 80008e4:	4293      	cmp	r3, r2
 80008e6:	d019      	beq.n	800091c <GPIO_PeripheralClkCtrl+0x60>
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	4a68      	ldr	r2, [pc, #416]	@ (8000a8c <GPIO_PeripheralClkCtrl+0x1d0>)
 80008ec:	4293      	cmp	r3, r2
 80008ee:	d013      	beq.n	8000918 <GPIO_PeripheralClkCtrl+0x5c>
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	4a67      	ldr	r2, [pc, #412]	@ (8000a90 <GPIO_PeripheralClkCtrl+0x1d4>)
 80008f4:	4293      	cmp	r3, r2
 80008f6:	d00d      	beq.n	8000914 <GPIO_PeripheralClkCtrl+0x58>
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	4a66      	ldr	r2, [pc, #408]	@ (8000a94 <GPIO_PeripheralClkCtrl+0x1d8>)
 80008fc:	4293      	cmp	r3, r2
 80008fe:	d007      	beq.n	8000910 <GPIO_PeripheralClkCtrl+0x54>
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	4a65      	ldr	r2, [pc, #404]	@ (8000a98 <GPIO_PeripheralClkCtrl+0x1dc>)
 8000904:	4293      	cmp	r3, r2
 8000906:	d101      	bne.n	800090c <GPIO_PeripheralClkCtrl+0x50>
 8000908:	2307      	movs	r3, #7
 800090a:	e00e      	b.n	800092a <GPIO_PeripheralClkCtrl+0x6e>
 800090c:	2300      	movs	r3, #0
 800090e:	e00c      	b.n	800092a <GPIO_PeripheralClkCtrl+0x6e>
 8000910:	2306      	movs	r3, #6
 8000912:	e00a      	b.n	800092a <GPIO_PeripheralClkCtrl+0x6e>
 8000914:	2305      	movs	r3, #5
 8000916:	e008      	b.n	800092a <GPIO_PeripheralClkCtrl+0x6e>
 8000918:	2304      	movs	r3, #4
 800091a:	e006      	b.n	800092a <GPIO_PeripheralClkCtrl+0x6e>
 800091c:	2303      	movs	r3, #3
 800091e:	e004      	b.n	800092a <GPIO_PeripheralClkCtrl+0x6e>
 8000920:	2302      	movs	r3, #2
 8000922:	e002      	b.n	800092a <GPIO_PeripheralClkCtrl+0x6e>
 8000924:	2301      	movs	r3, #1
 8000926:	e000      	b.n	800092a <GPIO_PeripheralClkCtrl+0x6e>
 8000928:	2300      	movs	r3, #0
 800092a:	73fb      	strb	r3, [r7, #15]

	if(EnorDi == ENABLE){
 800092c:	78fb      	ldrb	r3, [r7, #3]
 800092e:	2b01      	cmp	r3, #1
 8000930:	d14e      	bne.n	80009d0 <GPIO_PeripheralClkCtrl+0x114>
		/*
		 * I've used switch case statements for better readability compared to previous
		 * version of else if statements.
		 */
		switch(temp1){
 8000932:	7bfb      	ldrb	r3, [r7, #15]
 8000934:	2b07      	cmp	r3, #7
 8000936:	f200 8099 	bhi.w	8000a6c <GPIO_PeripheralClkCtrl+0x1b0>
 800093a:	a201      	add	r2, pc, #4	@ (adr r2, 8000940 <GPIO_PeripheralClkCtrl+0x84>)
 800093c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000940:	08000961 	.word	0x08000961
 8000944:	0800096f 	.word	0x0800096f
 8000948:	0800097d 	.word	0x0800097d
 800094c:	0800098b 	.word	0x0800098b
 8000950:	08000999 	.word	0x08000999
 8000954:	080009a7 	.word	0x080009a7
 8000958:	080009b5 	.word	0x080009b5
 800095c:	080009c3 	.word	0x080009c3
		case 0:
			GPIOA_PCLK_EN();
 8000960:	4b4e      	ldr	r3, [pc, #312]	@ (8000a9c <GPIO_PeripheralClkCtrl+0x1e0>)
 8000962:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000964:	4a4d      	ldr	r2, [pc, #308]	@ (8000a9c <GPIO_PeripheralClkCtrl+0x1e0>)
 8000966:	f043 0301 	orr.w	r3, r3, #1
 800096a:	6313      	str	r3, [r2, #48]	@ 0x30
			break;
 800096c:	e081      	b.n	8000a72 <GPIO_PeripheralClkCtrl+0x1b6>
		case 1:
			GPIOB_PCLK_EN();
 800096e:	4b4b      	ldr	r3, [pc, #300]	@ (8000a9c <GPIO_PeripheralClkCtrl+0x1e0>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000972:	4a4a      	ldr	r2, [pc, #296]	@ (8000a9c <GPIO_PeripheralClkCtrl+0x1e0>)
 8000974:	f043 0302 	orr.w	r3, r3, #2
 8000978:	6313      	str	r3, [r2, #48]	@ 0x30
			break;
 800097a:	e07a      	b.n	8000a72 <GPIO_PeripheralClkCtrl+0x1b6>
		case 2:
			GPIOC_PCLK_EN();
 800097c:	4b47      	ldr	r3, [pc, #284]	@ (8000a9c <GPIO_PeripheralClkCtrl+0x1e0>)
 800097e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000980:	4a46      	ldr	r2, [pc, #280]	@ (8000a9c <GPIO_PeripheralClkCtrl+0x1e0>)
 8000982:	f043 0304 	orr.w	r3, r3, #4
 8000986:	6313      	str	r3, [r2, #48]	@ 0x30
			break;
 8000988:	e073      	b.n	8000a72 <GPIO_PeripheralClkCtrl+0x1b6>
		case 3:
			GPIOD_PCLK_EN();
 800098a:	4b44      	ldr	r3, [pc, #272]	@ (8000a9c <GPIO_PeripheralClkCtrl+0x1e0>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800098e:	4a43      	ldr	r2, [pc, #268]	@ (8000a9c <GPIO_PeripheralClkCtrl+0x1e0>)
 8000990:	f043 0308 	orr.w	r3, r3, #8
 8000994:	6313      	str	r3, [r2, #48]	@ 0x30
			break;
 8000996:	e06c      	b.n	8000a72 <GPIO_PeripheralClkCtrl+0x1b6>
		case 4:
			GPIOE_PCLK_EN();
 8000998:	4b40      	ldr	r3, [pc, #256]	@ (8000a9c <GPIO_PeripheralClkCtrl+0x1e0>)
 800099a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800099c:	4a3f      	ldr	r2, [pc, #252]	@ (8000a9c <GPIO_PeripheralClkCtrl+0x1e0>)
 800099e:	f043 0310 	orr.w	r3, r3, #16
 80009a2:	6313      	str	r3, [r2, #48]	@ 0x30
			break;
 80009a4:	e065      	b.n	8000a72 <GPIO_PeripheralClkCtrl+0x1b6>
		case 5:
			GPIOF_PCLK_EN();
 80009a6:	4b3d      	ldr	r3, [pc, #244]	@ (8000a9c <GPIO_PeripheralClkCtrl+0x1e0>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009aa:	4a3c      	ldr	r2, [pc, #240]	@ (8000a9c <GPIO_PeripheralClkCtrl+0x1e0>)
 80009ac:	f043 0320 	orr.w	r3, r3, #32
 80009b0:	6313      	str	r3, [r2, #48]	@ 0x30
			break;
 80009b2:	e05e      	b.n	8000a72 <GPIO_PeripheralClkCtrl+0x1b6>
		case 6:
			GPIOG_PCLK_EN();
 80009b4:	4b39      	ldr	r3, [pc, #228]	@ (8000a9c <GPIO_PeripheralClkCtrl+0x1e0>)
 80009b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009b8:	4a38      	ldr	r2, [pc, #224]	@ (8000a9c <GPIO_PeripheralClkCtrl+0x1e0>)
 80009ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80009be:	6313      	str	r3, [r2, #48]	@ 0x30
			break;
 80009c0:	e057      	b.n	8000a72 <GPIO_PeripheralClkCtrl+0x1b6>
		case 7:
			GPIOH_PCLK_EN();
 80009c2:	4b36      	ldr	r3, [pc, #216]	@ (8000a9c <GPIO_PeripheralClkCtrl+0x1e0>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009c6:	4a35      	ldr	r2, [pc, #212]	@ (8000a9c <GPIO_PeripheralClkCtrl+0x1e0>)
 80009c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80009cc:	6313      	str	r3, [r2, #48]	@ 0x30
			break;
 80009ce:	e050      	b.n	8000a72 <GPIO_PeripheralClkCtrl+0x1b6>
			break;
		}

	}
	else{
		switch(temp1){
 80009d0:	7bfb      	ldrb	r3, [r7, #15]
 80009d2:	2b07      	cmp	r3, #7
 80009d4:	d84c      	bhi.n	8000a70 <GPIO_PeripheralClkCtrl+0x1b4>
 80009d6:	a201      	add	r2, pc, #4	@ (adr r2, 80009dc <GPIO_PeripheralClkCtrl+0x120>)
 80009d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009dc:	080009fd 	.word	0x080009fd
 80009e0:	08000a0b 	.word	0x08000a0b
 80009e4:	08000a19 	.word	0x08000a19
 80009e8:	08000a27 	.word	0x08000a27
 80009ec:	08000a35 	.word	0x08000a35
 80009f0:	08000a43 	.word	0x08000a43
 80009f4:	08000a51 	.word	0x08000a51
 80009f8:	08000a5f 	.word	0x08000a5f
		case 0:
			GPIOA_PCLK_DI();
 80009fc:	4b27      	ldr	r3, [pc, #156]	@ (8000a9c <GPIO_PeripheralClkCtrl+0x1e0>)
 80009fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a00:	4a26      	ldr	r2, [pc, #152]	@ (8000a9c <GPIO_PeripheralClkCtrl+0x1e0>)
 8000a02:	f023 0301 	bic.w	r3, r3, #1
 8000a06:	6313      	str	r3, [r2, #48]	@ 0x30
			break;
 8000a08:	e033      	b.n	8000a72 <GPIO_PeripheralClkCtrl+0x1b6>
		case 1:
			GPIOB_PCLK_DI();
 8000a0a:	4b24      	ldr	r3, [pc, #144]	@ (8000a9c <GPIO_PeripheralClkCtrl+0x1e0>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a0e:	4a23      	ldr	r2, [pc, #140]	@ (8000a9c <GPIO_PeripheralClkCtrl+0x1e0>)
 8000a10:	f023 0302 	bic.w	r3, r3, #2
 8000a14:	6313      	str	r3, [r2, #48]	@ 0x30
			break;
 8000a16:	e02c      	b.n	8000a72 <GPIO_PeripheralClkCtrl+0x1b6>
		case 2:
			GPIOC_PCLK_DI();
 8000a18:	4b20      	ldr	r3, [pc, #128]	@ (8000a9c <GPIO_PeripheralClkCtrl+0x1e0>)
 8000a1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a1c:	4a1f      	ldr	r2, [pc, #124]	@ (8000a9c <GPIO_PeripheralClkCtrl+0x1e0>)
 8000a1e:	f023 0304 	bic.w	r3, r3, #4
 8000a22:	6313      	str	r3, [r2, #48]	@ 0x30
			break;
 8000a24:	e025      	b.n	8000a72 <GPIO_PeripheralClkCtrl+0x1b6>
		case 3:
			GPIOD_PCLK_DI();
 8000a26:	4b1d      	ldr	r3, [pc, #116]	@ (8000a9c <GPIO_PeripheralClkCtrl+0x1e0>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a2a:	4a1c      	ldr	r2, [pc, #112]	@ (8000a9c <GPIO_PeripheralClkCtrl+0x1e0>)
 8000a2c:	f023 0308 	bic.w	r3, r3, #8
 8000a30:	6313      	str	r3, [r2, #48]	@ 0x30
			break;
 8000a32:	e01e      	b.n	8000a72 <GPIO_PeripheralClkCtrl+0x1b6>
		case 4:
			GPIOE_PCLK_DI();
 8000a34:	4b19      	ldr	r3, [pc, #100]	@ (8000a9c <GPIO_PeripheralClkCtrl+0x1e0>)
 8000a36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a38:	4a18      	ldr	r2, [pc, #96]	@ (8000a9c <GPIO_PeripheralClkCtrl+0x1e0>)
 8000a3a:	f023 0310 	bic.w	r3, r3, #16
 8000a3e:	6313      	str	r3, [r2, #48]	@ 0x30
			break;
 8000a40:	e017      	b.n	8000a72 <GPIO_PeripheralClkCtrl+0x1b6>
		case 5:
			GPIOF_PCLK_DI();
 8000a42:	4b16      	ldr	r3, [pc, #88]	@ (8000a9c <GPIO_PeripheralClkCtrl+0x1e0>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a46:	4a15      	ldr	r2, [pc, #84]	@ (8000a9c <GPIO_PeripheralClkCtrl+0x1e0>)
 8000a48:	f023 0320 	bic.w	r3, r3, #32
 8000a4c:	6313      	str	r3, [r2, #48]	@ 0x30
			break;
 8000a4e:	e010      	b.n	8000a72 <GPIO_PeripheralClkCtrl+0x1b6>
		case 6:
			GPIOG_PCLK_DI();
 8000a50:	4b12      	ldr	r3, [pc, #72]	@ (8000a9c <GPIO_PeripheralClkCtrl+0x1e0>)
 8000a52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a54:	4a11      	ldr	r2, [pc, #68]	@ (8000a9c <GPIO_PeripheralClkCtrl+0x1e0>)
 8000a56:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000a5a:	6313      	str	r3, [r2, #48]	@ 0x30
			break;
 8000a5c:	e009      	b.n	8000a72 <GPIO_PeripheralClkCtrl+0x1b6>
		case 7:
			GPIOH_PCLK_DI();
 8000a5e:	4b0f      	ldr	r3, [pc, #60]	@ (8000a9c <GPIO_PeripheralClkCtrl+0x1e0>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a62:	4a0e      	ldr	r2, [pc, #56]	@ (8000a9c <GPIO_PeripheralClkCtrl+0x1e0>)
 8000a64:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000a68:	6313      	str	r3, [r2, #48]	@ 0x30
			break;
 8000a6a:	e002      	b.n	8000a72 <GPIO_PeripheralClkCtrl+0x1b6>
			break;
 8000a6c:	bf00      	nop
 8000a6e:	e000      	b.n	8000a72 <GPIO_PeripheralClkCtrl+0x1b6>
		default:
			break;
 8000a70:	bf00      	nop
		}

	}

}
 8000a72:	bf00      	nop
 8000a74:	3714      	adds	r7, #20
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bc80      	pop	{r7}
 8000a7a:	4770      	bx	lr
 8000a7c:	40020000 	.word	0x40020000
 8000a80:	40020400 	.word	0x40020400
 8000a84:	40020800 	.word	0x40020800
 8000a88:	40020c00 	.word	0x40020c00
 8000a8c:	40021000 	.word	0x40021000
 8000a90:	40021400 	.word	0x40021400
 8000a94:	40021800 	.word	0x40021800
 8000a98:	40021c00 	.word	0x40021c00
 8000a9c:	40023800 	.word	0x40023800

08000aa0 <GPIO_Init>:
 *
 * @Note 		-
 */

void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b086      	sub	sp, #24
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
	GPIO_PeripheralClkCtrl(pGPIOHandle->pGPIOx, ENABLE);
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	2101      	movs	r1, #1
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f7ff ff04 	bl	80008bc <GPIO_PeripheralClkCtrl>

	uint32_t temp=0;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	617b      	str	r3, [r7, #20]

	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <=GPIO_MODE_ANALOG ){
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	795b      	ldrb	r3, [r3, #5]
 8000abc:	2b03      	cmp	r3, #3
 8000abe:	d822      	bhi.n	8000b06 <GPIO_Init+0x66>

		//1. Configure mode of GPIO pin
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)) );
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	795b      	ldrb	r3, [r3, #5]
 8000ac4:	461a      	mov	r2, r3
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	791b      	ldrb	r3, [r3, #4]
 8000aca:	005b      	lsls	r3, r3, #1
 8000acc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad0:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(3 << (2 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)) ); //clears the bit fields first before setting
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	681a      	ldr	r2, [r3, #0]
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	791b      	ldrb	r3, [r3, #4]
 8000adc:	005b      	lsls	r3, r3, #1
 8000ade:	2103      	movs	r1, #3
 8000ae0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ae4:	43db      	mvns	r3, r3
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	400a      	ands	r2, r1
 8000aee:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; //sets the bit fields in the register
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	6819      	ldr	r1, [r3, #0]
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	697a      	ldr	r2, [r7, #20]
 8000afc:	430a      	orrs	r2, r1
 8000afe:	601a      	str	r2, [r3, #0]
		temp = 0;
 8000b00:	2300      	movs	r3, #0
 8000b02:	617b      	str	r3, [r7, #20]
 8000b04:	e0ea      	b.n	8000cdc <GPIO_Init+0x23c>
		//1. pin must be in input configuration
		//2. configure the edge trigger (RT,FT,RFT)
		//3. ENABLE INTERRUPT DELIVERY FROM PERIPHERAL TO THE PROCEssor (on peripheral side)

		//clears bits at the same time setting to input mode since input mode is "00".
		pGPIOHandle->pGPIOx->MODER &= ~(3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	681a      	ldr	r2, [r3, #0]
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	791b      	ldrb	r3, [r3, #4]
 8000b10:	005b      	lsls	r3, r3, #1
 8000b12:	2103      	movs	r1, #3
 8000b14:	fa01 f303 	lsl.w	r3, r1, r3
 8000b18:	43db      	mvns	r3, r3
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	400a      	ands	r2, r1
 8000b22:	601a      	str	r2, [r3, #0]

		switch(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode){
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	795b      	ldrb	r3, [r3, #5]
 8000b28:	2b06      	cmp	r3, #6
 8000b2a:	d036      	beq.n	8000b9a <GPIO_Init+0xfa>
 8000b2c:	2b06      	cmp	r3, #6
 8000b2e:	dc4b      	bgt.n	8000bc8 <GPIO_Init+0x128>
 8000b30:	2b04      	cmp	r3, #4
 8000b32:	d002      	beq.n	8000b3a <GPIO_Init+0x9a>
 8000b34:	2b05      	cmp	r3, #5
 8000b36:	d018      	beq.n	8000b6a <GPIO_Init+0xca>
			//1. configure both FTSR & RTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
			break;
		default:
			break;
 8000b38:	e046      	b.n	8000bc8 <GPIO_Init+0x128>
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000b3a:	4b44      	ldr	r3, [pc, #272]	@ (8000c4c <GPIO_Init+0x1ac>)
 8000b3c:	68db      	ldr	r3, [r3, #12]
 8000b3e:	687a      	ldr	r2, [r7, #4]
 8000b40:	7912      	ldrb	r2, [r2, #4]
 8000b42:	4611      	mov	r1, r2
 8000b44:	2201      	movs	r2, #1
 8000b46:	408a      	lsls	r2, r1
 8000b48:	4611      	mov	r1, r2
 8000b4a:	4a40      	ldr	r2, [pc, #256]	@ (8000c4c <GPIO_Init+0x1ac>)
 8000b4c:	430b      	orrs	r3, r1
 8000b4e:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000b50:	4b3e      	ldr	r3, [pc, #248]	@ (8000c4c <GPIO_Init+0x1ac>)
 8000b52:	689b      	ldr	r3, [r3, #8]
 8000b54:	687a      	ldr	r2, [r7, #4]
 8000b56:	7912      	ldrb	r2, [r2, #4]
 8000b58:	4611      	mov	r1, r2
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	408a      	lsls	r2, r1
 8000b5e:	43d2      	mvns	r2, r2
 8000b60:	4611      	mov	r1, r2
 8000b62:	4a3a      	ldr	r2, [pc, #232]	@ (8000c4c <GPIO_Init+0x1ac>)
 8000b64:	400b      	ands	r3, r1
 8000b66:	6093      	str	r3, [r2, #8]
			break;
 8000b68:	e02f      	b.n	8000bca <GPIO_Init+0x12a>
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000b6a:	4b38      	ldr	r3, [pc, #224]	@ (8000c4c <GPIO_Init+0x1ac>)
 8000b6c:	689b      	ldr	r3, [r3, #8]
 8000b6e:	687a      	ldr	r2, [r7, #4]
 8000b70:	7912      	ldrb	r2, [r2, #4]
 8000b72:	4611      	mov	r1, r2
 8000b74:	2201      	movs	r2, #1
 8000b76:	408a      	lsls	r2, r1
 8000b78:	4611      	mov	r1, r2
 8000b7a:	4a34      	ldr	r2, [pc, #208]	@ (8000c4c <GPIO_Init+0x1ac>)
 8000b7c:	430b      	orrs	r3, r1
 8000b7e:	6093      	str	r3, [r2, #8]
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000b80:	4b32      	ldr	r3, [pc, #200]	@ (8000c4c <GPIO_Init+0x1ac>)
 8000b82:	68db      	ldr	r3, [r3, #12]
 8000b84:	687a      	ldr	r2, [r7, #4]
 8000b86:	7912      	ldrb	r2, [r2, #4]
 8000b88:	4611      	mov	r1, r2
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	408a      	lsls	r2, r1
 8000b8e:	43d2      	mvns	r2, r2
 8000b90:	4611      	mov	r1, r2
 8000b92:	4a2e      	ldr	r2, [pc, #184]	@ (8000c4c <GPIO_Init+0x1ac>)
 8000b94:	400b      	ands	r3, r1
 8000b96:	60d3      	str	r3, [r2, #12]
			break;
 8000b98:	e017      	b.n	8000bca <GPIO_Init+0x12a>
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000b9a:	4b2c      	ldr	r3, [pc, #176]	@ (8000c4c <GPIO_Init+0x1ac>)
 8000b9c:	68db      	ldr	r3, [r3, #12]
 8000b9e:	687a      	ldr	r2, [r7, #4]
 8000ba0:	7912      	ldrb	r2, [r2, #4]
 8000ba2:	4611      	mov	r1, r2
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	408a      	lsls	r2, r1
 8000ba8:	4611      	mov	r1, r2
 8000baa:	4a28      	ldr	r2, [pc, #160]	@ (8000c4c <GPIO_Init+0x1ac>)
 8000bac:	430b      	orrs	r3, r1
 8000bae:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000bb0:	4b26      	ldr	r3, [pc, #152]	@ (8000c4c <GPIO_Init+0x1ac>)
 8000bb2:	689b      	ldr	r3, [r3, #8]
 8000bb4:	687a      	ldr	r2, [r7, #4]
 8000bb6:	7912      	ldrb	r2, [r2, #4]
 8000bb8:	4611      	mov	r1, r2
 8000bba:	2201      	movs	r2, #1
 8000bbc:	408a      	lsls	r2, r1
 8000bbe:	4611      	mov	r1, r2
 8000bc0:	4a22      	ldr	r2, [pc, #136]	@ (8000c4c <GPIO_Init+0x1ac>)
 8000bc2:	430b      	orrs	r3, r1
 8000bc4:	6093      	str	r3, [r2, #8]
			break;
 8000bc6:	e000      	b.n	8000bca <GPIO_Init+0x12a>
			break;
 8000bc8:	bf00      	nop
		 * This part is where it chooses the specific EXTI line to program.
		 * temp1 chooses the specific EXTICR peripheral register (out of 4) to program
		 * With the given pin number, we then calculate how much left shift the bits need to program the specific
		 * EXTI which the GPIO number is associated with and stored into Lshift_val. EXTI0 = PIN 0's ----> EXTI15 = PIN 15's.
		 */
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	791b      	ldrb	r3, [r3, #4]
 8000bce:	089b      	lsrs	r3, r3, #2
 8000bd0:	74fb      	strb	r3, [r7, #19]
		uint8_t Lshift_val = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	791b      	ldrb	r3, [r3, #4]
 8000bd6:	f003 0303 	and.w	r3, r3, #3
 8000bda:	74bb      	strb	r3, [r7, #18]

		/*translates the given GPIO port address into a specific GPIO port code for programming
		 * the SYSCFG EXTICR peripheral register.*/
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4a1b      	ldr	r2, [pc, #108]	@ (8000c50 <GPIO_Init+0x1b0>)
 8000be2:	4293      	cmp	r3, r2
 8000be4:	d044      	beq.n	8000c70 <GPIO_Init+0x1d0>
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	4a1a      	ldr	r2, [pc, #104]	@ (8000c54 <GPIO_Init+0x1b4>)
 8000bec:	4293      	cmp	r3, r2
 8000bee:	d02b      	beq.n	8000c48 <GPIO_Init+0x1a8>
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a18      	ldr	r2, [pc, #96]	@ (8000c58 <GPIO_Init+0x1b8>)
 8000bf6:	4293      	cmp	r3, r2
 8000bf8:	d024      	beq.n	8000c44 <GPIO_Init+0x1a4>
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	4a17      	ldr	r2, [pc, #92]	@ (8000c5c <GPIO_Init+0x1bc>)
 8000c00:	4293      	cmp	r3, r2
 8000c02:	d01d      	beq.n	8000c40 <GPIO_Init+0x1a0>
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4a15      	ldr	r2, [pc, #84]	@ (8000c60 <GPIO_Init+0x1c0>)
 8000c0a:	4293      	cmp	r3, r2
 8000c0c:	d016      	beq.n	8000c3c <GPIO_Init+0x19c>
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	4a14      	ldr	r2, [pc, #80]	@ (8000c64 <GPIO_Init+0x1c4>)
 8000c14:	4293      	cmp	r3, r2
 8000c16:	d00f      	beq.n	8000c38 <GPIO_Init+0x198>
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4a12      	ldr	r2, [pc, #72]	@ (8000c68 <GPIO_Init+0x1c8>)
 8000c1e:	4293      	cmp	r3, r2
 8000c20:	d008      	beq.n	8000c34 <GPIO_Init+0x194>
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	4a11      	ldr	r2, [pc, #68]	@ (8000c6c <GPIO_Init+0x1cc>)
 8000c28:	4293      	cmp	r3, r2
 8000c2a:	d101      	bne.n	8000c30 <GPIO_Init+0x190>
 8000c2c:	2307      	movs	r3, #7
 8000c2e:	e020      	b.n	8000c72 <GPIO_Init+0x1d2>
 8000c30:	2300      	movs	r3, #0
 8000c32:	e01e      	b.n	8000c72 <GPIO_Init+0x1d2>
 8000c34:	2306      	movs	r3, #6
 8000c36:	e01c      	b.n	8000c72 <GPIO_Init+0x1d2>
 8000c38:	2305      	movs	r3, #5
 8000c3a:	e01a      	b.n	8000c72 <GPIO_Init+0x1d2>
 8000c3c:	2304      	movs	r3, #4
 8000c3e:	e018      	b.n	8000c72 <GPIO_Init+0x1d2>
 8000c40:	2303      	movs	r3, #3
 8000c42:	e016      	b.n	8000c72 <GPIO_Init+0x1d2>
 8000c44:	2302      	movs	r3, #2
 8000c46:	e014      	b.n	8000c72 <GPIO_Init+0x1d2>
 8000c48:	2301      	movs	r3, #1
 8000c4a:	e012      	b.n	8000c72 <GPIO_Init+0x1d2>
 8000c4c:	40013c00 	.word	0x40013c00
 8000c50:	40020000 	.word	0x40020000
 8000c54:	40020400 	.word	0x40020400
 8000c58:	40020800 	.word	0x40020800
 8000c5c:	40020c00 	.word	0x40020c00
 8000c60:	40021000 	.word	0x40021000
 8000c64:	40021400 	.word	0x40021400
 8000c68:	40021800 	.word	0x40021800
 8000c6c:	40021c00 	.word	0x40021c00
 8000c70:	2300      	movs	r3, #0
 8000c72:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 8000c74:	4b6a      	ldr	r3, [pc, #424]	@ (8000e20 <GPIO_Init+0x380>)
 8000c76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c78:	4a69      	ldr	r2, [pc, #420]	@ (8000e20 <GPIO_Init+0x380>)
 8000c7a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c7e:	6453      	str	r3, [r2, #68]	@ 0x44
		SYSCFG->EXTICR[temp1] &= ~(15 << (4*Lshift_val) ); //clears peripheral register bitfield
 8000c80:	4a68      	ldr	r2, [pc, #416]	@ (8000e24 <GPIO_Init+0x384>)
 8000c82:	7cfb      	ldrb	r3, [r7, #19]
 8000c84:	3302      	adds	r3, #2
 8000c86:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000c8a:	7cbb      	ldrb	r3, [r7, #18]
 8000c8c:	009b      	lsls	r3, r3, #2
 8000c8e:	210f      	movs	r1, #15
 8000c90:	fa01 f303 	lsl.w	r3, r1, r3
 8000c94:	43db      	mvns	r3, r3
 8000c96:	4618      	mov	r0, r3
 8000c98:	4962      	ldr	r1, [pc, #392]	@ (8000e24 <GPIO_Init+0x384>)
 8000c9a:	7cfb      	ldrb	r3, [r7, #19]
 8000c9c:	4002      	ands	r2, r0
 8000c9e:	3302      	adds	r3, #2
 8000ca0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		SYSCFG->EXTICR[temp1] |= ( portcode << (4*Lshift_val) ); //clears peripheral register bitfield
 8000ca4:	4a5f      	ldr	r2, [pc, #380]	@ (8000e24 <GPIO_Init+0x384>)
 8000ca6:	7cfb      	ldrb	r3, [r7, #19]
 8000ca8:	3302      	adds	r3, #2
 8000caa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000cae:	7c79      	ldrb	r1, [r7, #17]
 8000cb0:	7cbb      	ldrb	r3, [r7, #18]
 8000cb2:	009b      	lsls	r3, r3, #2
 8000cb4:	fa01 f303 	lsl.w	r3, r1, r3
 8000cb8:	4618      	mov	r0, r3
 8000cba:	495a      	ldr	r1, [pc, #360]	@ (8000e24 <GPIO_Init+0x384>)
 8000cbc:	7cfb      	ldrb	r3, [r7, #19]
 8000cbe:	4302      	orrs	r2, r0
 8000cc0:	3302      	adds	r3, #2
 8000cc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		/*
		 * /3. enable the EXTI interrupt delivery using IMR.
		 *     Basically unmasks the interrupt that will run through the specific EXTI line
		 */
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000cc6:	4b58      	ldr	r3, [pc, #352]	@ (8000e28 <GPIO_Init+0x388>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	687a      	ldr	r2, [r7, #4]
 8000ccc:	7912      	ldrb	r2, [r2, #4]
 8000cce:	4611      	mov	r1, r2
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	408a      	lsls	r2, r1
 8000cd4:	4611      	mov	r1, r2
 8000cd6:	4a54      	ldr	r2, [pc, #336]	@ (8000e28 <GPIO_Init+0x388>)
 8000cd8:	430b      	orrs	r3, r1
 8000cda:	6013      	str	r3, [r2, #0]
	}

	//2. Configure pup pud settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdCtrl << (2 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)) );
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	79db      	ldrb	r3, [r3, #7]
 8000ce0:	461a      	mov	r2, r3
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	791b      	ldrb	r3, [r3, #4]
 8000ce6:	005b      	lsls	r3, r3, #1
 8000ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cec:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(3 << (2 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)) ); //clears the bit fields first before setting
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	68da      	ldr	r2, [r3, #12]
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	791b      	ldrb	r3, [r3, #4]
 8000cf8:	005b      	lsls	r3, r3, #1
 8000cfa:	2103      	movs	r1, #3
 8000cfc:	fa01 f303 	lsl.w	r3, r1, r3
 8000d00:	43db      	mvns	r3, r3
 8000d02:	4619      	mov	r1, r3
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	400a      	ands	r2, r1
 8000d0a:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp; //sets the bit fields
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	68d9      	ldr	r1, [r3, #12]
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	697a      	ldr	r2, [r7, #20]
 8000d18:	430a      	orrs	r2, r1
 8000d1a:	60da      	str	r2, [r3, #12]
	temp = 0;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	617b      	str	r3, [r7, #20]

	//3. Configure output type & output speed

	//Only executes if user wants to set GPIO as output mode because no pushpull or open drain config for GPIO input mode
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOType << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	7a1b      	ldrb	r3, [r3, #8]
 8000d24:	461a      	mov	r2, r3
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	791b      	ldrb	r3, [r3, #4]
 8000d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2e:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~(1 << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) ); //clears the bit fields
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	685a      	ldr	r2, [r3, #4]
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	791b      	ldrb	r3, [r3, #4]
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	408b      	lsls	r3, r1
 8000d40:	43db      	mvns	r3, r3
 8000d42:	4619      	mov	r1, r3
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	400a      	ands	r2, r1
 8000d4a:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp; //sets the bit fields
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	6859      	ldr	r1, [r3, #4]
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	697a      	ldr	r2, [r7, #20]
 8000d58:	430a      	orrs	r2, r1
 8000d5a:	605a      	str	r2, [r3, #4]
	temp = 0;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	617b      	str	r3, [r7, #20]

	//sets GPIO output speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)) );
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	799b      	ldrb	r3, [r3, #6]
 8000d64:	461a      	mov	r2, r3
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	791b      	ldrb	r3, [r3, #4]
 8000d6a:	005b      	lsls	r3, r3, #1
 8000d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d70:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDER &= ~(3 << (2 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)) ); //clears the bit fields
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	689a      	ldr	r2, [r3, #8]
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	791b      	ldrb	r3, [r3, #4]
 8000d7c:	005b      	lsls	r3, r3, #1
 8000d7e:	2103      	movs	r1, #3
 8000d80:	fa01 f303 	lsl.w	r3, r1, r3
 8000d84:	43db      	mvns	r3, r3
 8000d86:	4619      	mov	r1, r3
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	400a      	ands	r2, r1
 8000d8e:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDER |= temp; //sets the bit fields
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	6899      	ldr	r1, [r3, #8]
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	697a      	ldr	r2, [r7, #20]
 8000d9c:	430a      	orrs	r2, r1
 8000d9e:	609a      	str	r2, [r3, #8]
	temp = 0;
 8000da0:	2300      	movs	r3, #0
 8000da2:	617b      	str	r3, [r7, #20]


	//4. Configure alternate function setting (if GPIO is set at alternate function mode)
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN){
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	795b      	ldrb	r3, [r3, #5]
 8000da8:	2b02      	cmp	r3, #2
 8000daa:	d134      	bne.n	8000e16 <GPIO_Init+0x376>
		 * The resulting quotient selects whether AFRL = 0 or AFRH = 1 to be used as index in the AFR array
		 * Logic behind: any number that is less than 8 divided by 8 will result in a quotient of 0 since only the integer part is stored
		 * in the variable hence it will  use the 0 index which the AFRL address is at.
		 * If the number (pin number) is greater than 8, the resulting quotient is 1 hence will use the index 1 which the AFRH address is at
		 */
		uint8_t temp1 = ((pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) / 8);
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	791b      	ldrb	r3, [r3, #4]
 8000db0:	08db      	lsrs	r3, r3, #3
 8000db2:	743b      	strb	r3, [r7, #16]

		/*
		 * the resulting modulo determines the left shift needed for setting the peripheral register
		 */
		uint8_t Lshift_val = ((pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) % 8);
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	791b      	ldrb	r3, [r3, #4]
 8000db8:	f003 0307 	and.w	r3, r3, #7
 8000dbc:	73fb      	strb	r3, [r7, #15]

		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinAFMode << (4 * Lshift_val) );
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	7a5b      	ldrb	r3, [r3, #9]
 8000dc2:	461a      	mov	r2, r3
 8000dc4:	7bfb      	ldrb	r3, [r7, #15]
 8000dc6:	009b      	lsls	r3, r3, #2
 8000dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dcc:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(15 << (4 * Lshift_val) ); //clears the bit fields in the register before setting
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	7c3a      	ldrb	r2, [r7, #16]
 8000dd4:	3208      	adds	r2, #8
 8000dd6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000dda:	7bfb      	ldrb	r3, [r7, #15]
 8000ddc:	009b      	lsls	r3, r3, #2
 8000dde:	220f      	movs	r2, #15
 8000de0:	fa02 f303 	lsl.w	r3, r2, r3
 8000de4:	43db      	mvns	r3, r3
 8000de6:	4618      	mov	r0, r3
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	7c3a      	ldrb	r2, [r7, #16]
 8000dee:	4001      	ands	r1, r0
 8000df0:	3208      	adds	r2, #8
 8000df2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= temp;  //Sets the bit fields in the register
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	7c3a      	ldrb	r2, [r7, #16]
 8000dfc:	3208      	adds	r2, #8
 8000dfe:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	7c3a      	ldrb	r2, [r7, #16]
 8000e08:	6979      	ldr	r1, [r7, #20]
 8000e0a:	4301      	orrs	r1, r0
 8000e0c:	3208      	adds	r2, #8
 8000e0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		temp = 0;
 8000e12:	2300      	movs	r3, #0
 8000e14:	617b      	str	r3, [r7, #20]
	}

}
 8000e16:	bf00      	nop
 8000e18:	3718      	adds	r7, #24
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	40023800 	.word	0x40023800
 8000e24:	40013800 	.word	0x40013800
 8000e28:	40013c00 	.word	0x40013c00

08000e2c <GPIO_IRQInterruptConfig>:
//4. identify the IRQ number on which the processor accepts the interrupt from that pin
//5. Configure the IRQ priority for the identified IRQ number (Processor side)
//6. enable interrupt reception on that IRQ number (processor side)
//7. implement the IRQ handler
void GPIO_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b085      	sub	sp, #20
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	4603      	mov	r3, r0
 8000e34:	460a      	mov	r2, r1
 8000e36:	71fb      	strb	r3, [r7, #7]
 8000e38:	4613      	mov	r3, r2
 8000e3a:	71bb      	strb	r3, [r7, #6]
	 * EX. IRQNumber = 76, Lshift_val = 76 % 32 = 12, so the needed left shift to program the bitfield
	 * for IRQNumber 76 is 12.
	 *
	 *
	 */
	uint8_t iNVIC = IRQNumber / 32;
 8000e3c:	79fb      	ldrb	r3, [r7, #7]
 8000e3e:	095b      	lsrs	r3, r3, #5
 8000e40:	73fb      	strb	r3, [r7, #15]
	uint8_t Lshift_val = IRQNumber % 32;
 8000e42:	79fb      	ldrb	r3, [r7, #7]
 8000e44:	f003 031f 	and.w	r3, r3, #31
 8000e48:	73bb      	strb	r3, [r7, #14]

	if(EnorDi == ENABLE){
 8000e4a:	79bb      	ldrb	r3, [r7, #6]
 8000e4c:	2b01      	cmp	r3, #1
 8000e4e:	d114      	bne.n	8000e7a <GPIO_IRQInterruptConfig+0x4e>
		*(NVIC_ISER_BASE_ADDR + iNVIC) |= (1 << Lshift_val);
 8000e50:	7bfb      	ldrb	r3, [r7, #15]
 8000e52:	009b      	lsls	r3, r3, #2
 8000e54:	f103 4360 	add.w	r3, r3, #3758096384	@ 0xe0000000
 8000e58:	f503 4361 	add.w	r3, r3, #57600	@ 0xe100
 8000e5c:	681a      	ldr	r2, [r3, #0]
 8000e5e:	7bbb      	ldrb	r3, [r7, #14]
 8000e60:	2101      	movs	r1, #1
 8000e62:	fa01 f303 	lsl.w	r3, r1, r3
 8000e66:	4619      	mov	r1, r3
 8000e68:	7bfb      	ldrb	r3, [r7, #15]
 8000e6a:	009b      	lsls	r3, r3, #2
 8000e6c:	f103 4360 	add.w	r3, r3, #3758096384	@ 0xe0000000
 8000e70:	f503 4361 	add.w	r3, r3, #57600	@ 0xe100
 8000e74:	430a      	orrs	r2, r1
 8000e76:	601a      	str	r2, [r3, #0]
	}
	else{
		*(NVIC_ICER_BASE_ADDR + iNVIC) |= (1 << Lshift_val);
	}

}
 8000e78:	e00f      	b.n	8000e9a <GPIO_IRQInterruptConfig+0x6e>
		*(NVIC_ICER_BASE_ADDR + iNVIC) |= (1 << Lshift_val);
 8000e7a:	7bfb      	ldrb	r3, [r7, #15]
 8000e7c:	009a      	lsls	r2, r3, #2
 8000e7e:	4b09      	ldr	r3, [pc, #36]	@ (8000ea4 <GPIO_IRQInterruptConfig+0x78>)
 8000e80:	4413      	add	r3, r2
 8000e82:	681a      	ldr	r2, [r3, #0]
 8000e84:	7bbb      	ldrb	r3, [r7, #14]
 8000e86:	2101      	movs	r1, #1
 8000e88:	fa01 f303 	lsl.w	r3, r1, r3
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	7bfb      	ldrb	r3, [r7, #15]
 8000e90:	0099      	lsls	r1, r3, #2
 8000e92:	4b04      	ldr	r3, [pc, #16]	@ (8000ea4 <GPIO_IRQInterruptConfig+0x78>)
 8000e94:	440b      	add	r3, r1
 8000e96:	4302      	orrs	r2, r0
 8000e98:	601a      	str	r2, [r3, #0]
}
 8000e9a:	bf00      	nop
 8000e9c:	3714      	adds	r7, #20
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bc80      	pop	{r7}
 8000ea2:	4770      	bx	lr
 8000ea4:	e000e180 	.word	0xe000e180

08000ea8 <GPIO_IRQPriorityConfig>:
 * @return		- none
 *
 * @Note 		-
 */
void GPIO_IRQPriorityConfig(uint8_t IRQNumber, uint8_t IRQPriority)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b085      	sub	sp, #20
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	4603      	mov	r3, r0
 8000eb0:	460a      	mov	r2, r1
 8000eb2:	71fb      	strb	r3, [r7, #7]
 8000eb4:	4613      	mov	r3, r2
 8000eb6:	71bb      	strb	r3, [r7, #6]
	uint8_t iprx = IRQNumber / 4; //gets the IPR register index for setting
 8000eb8:	79fb      	ldrb	r3, [r7, #7]
 8000eba:	089b      	lsrs	r3, r3, #2
 8000ebc:	73fb      	strb	r3, [r7, #15]
	uint8_t iprx_section = IRQNumber % 4; //determines which section of the IPR register to set.
 8000ebe:	79fb      	ldrb	r3, [r7, #7]
 8000ec0:	f003 0303 	and.w	r3, r3, #3
 8000ec4:	73bb      	strb	r3, [r7, #14]
	uint8_t Lshift_val = (8 - NUM_PRIO_BITS_IMPLEMENTED) + (8 * iprx_section);
 8000ec6:	7bbb      	ldrb	r3, [r7, #14]
 8000ec8:	00db      	lsls	r3, r3, #3
 8000eca:	b2db      	uxtb	r3, r3
 8000ecc:	3304      	adds	r3, #4
 8000ece:	737b      	strb	r3, [r7, #13]

	*(NVIC_IPR_BASE_ADDR + iprx) |= (IRQPriority << Lshift_val);
 8000ed0:	7bfb      	ldrb	r3, [r7, #15]
 8000ed2:	009b      	lsls	r3, r3, #2
 8000ed4:	f103 4360 	add.w	r3, r3, #3758096384	@ 0xe0000000
 8000ed8:	f503 4364 	add.w	r3, r3, #58368	@ 0xe400
 8000edc:	681a      	ldr	r2, [r3, #0]
 8000ede:	79b9      	ldrb	r1, [r7, #6]
 8000ee0:	7b7b      	ldrb	r3, [r7, #13]
 8000ee2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	7bfb      	ldrb	r3, [r7, #15]
 8000eea:	009b      	lsls	r3, r3, #2
 8000eec:	f103 4360 	add.w	r3, r3, #3758096384	@ 0xe0000000
 8000ef0:	f503 4364 	add.w	r3, r3, #58368	@ 0xe400
 8000ef4:	430a      	orrs	r2, r1
 8000ef6:	601a      	str	r2, [r3, #0]


}
 8000ef8:	bf00      	nop
 8000efa:	3714      	adds	r7, #20
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bc80      	pop	{r7}
 8000f00:	4770      	bx	lr
	...

08000f04 <GPIO_IRQHandling>:

void GPIO_IRQHandling(uint8_t PinNumber)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b083      	sub	sp, #12
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	71fb      	strb	r3, [r7, #7]
	//clears the EXTI PR register with the corresponding pin number
	if(EXTI->PR & (1<<PinNumber)){
 8000f0e:	4b0c      	ldr	r3, [pc, #48]	@ (8000f40 <GPIO_IRQHandling+0x3c>)
 8000f10:	695b      	ldr	r3, [r3, #20]
 8000f12:	79fa      	ldrb	r2, [r7, #7]
 8000f14:	2101      	movs	r1, #1
 8000f16:	fa01 f202 	lsl.w	r2, r1, r2
 8000f1a:	4013      	ands	r3, r2
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d009      	beq.n	8000f34 <GPIO_IRQHandling+0x30>
		//clear
		EXTI->PR |= (1 << PinNumber);
 8000f20:	4b07      	ldr	r3, [pc, #28]	@ (8000f40 <GPIO_IRQHandling+0x3c>)
 8000f22:	695b      	ldr	r3, [r3, #20]
 8000f24:	79fa      	ldrb	r2, [r7, #7]
 8000f26:	2101      	movs	r1, #1
 8000f28:	fa01 f202 	lsl.w	r2, r1, r2
 8000f2c:	4611      	mov	r1, r2
 8000f2e:	4a04      	ldr	r2, [pc, #16]	@ (8000f40 <GPIO_IRQHandling+0x3c>)
 8000f30:	430b      	orrs	r3, r1
 8000f32:	6153      	str	r3, [r2, #20]
	}

}
 8000f34:	bf00      	nop
 8000f36:	370c      	adds	r7, #12
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bc80      	pop	{r7}
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	40013c00 	.word	0x40013c00

08000f44 <I2C_PeripheralClkCtrl>:
 * @return		- none
 *
 * @Note 		-
 */
void I2C_PeripheralClkCtrl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b085      	sub	sp, #20
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	460b      	mov	r3, r1
 8000f4e:	70fb      	strb	r3, [r7, #3]
	uint8_t temp1 = I2C_BASEADDR_TO_CODE(pI2Cx);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	4a2e      	ldr	r2, [pc, #184]	@ (800100c <I2C_PeripheralClkCtrl+0xc8>)
 8000f54:	4293      	cmp	r3, r2
 8000f56:	d00d      	beq.n	8000f74 <I2C_PeripheralClkCtrl+0x30>
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	4a2d      	ldr	r2, [pc, #180]	@ (8001010 <I2C_PeripheralClkCtrl+0xcc>)
 8000f5c:	4293      	cmp	r3, r2
 8000f5e:	d007      	beq.n	8000f70 <I2C_PeripheralClkCtrl+0x2c>
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	4a2c      	ldr	r2, [pc, #176]	@ (8001014 <I2C_PeripheralClkCtrl+0xd0>)
 8000f64:	4293      	cmp	r3, r2
 8000f66:	d101      	bne.n	8000f6c <I2C_PeripheralClkCtrl+0x28>
 8000f68:	2302      	movs	r3, #2
 8000f6a:	e004      	b.n	8000f76 <I2C_PeripheralClkCtrl+0x32>
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	e002      	b.n	8000f76 <I2C_PeripheralClkCtrl+0x32>
 8000f70:	2301      	movs	r3, #1
 8000f72:	e000      	b.n	8000f76 <I2C_PeripheralClkCtrl+0x32>
 8000f74:	2300      	movs	r3, #0
 8000f76:	73fb      	strb	r3, [r7, #15]

	if(EnorDi == ENABLE){
 8000f78:	78fb      	ldrb	r3, [r7, #3]
 8000f7a:	2b01      	cmp	r3, #1
 8000f7c:	d11e      	bne.n	8000fbc <I2C_PeripheralClkCtrl+0x78>
		switch(temp1){
 8000f7e:	7bfb      	ldrb	r3, [r7, #15]
 8000f80:	2b02      	cmp	r3, #2
 8000f82:	d014      	beq.n	8000fae <I2C_PeripheralClkCtrl+0x6a>
 8000f84:	2b02      	cmp	r3, #2
 8000f86:	dc38      	bgt.n	8000ffa <I2C_PeripheralClkCtrl+0xb6>
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d002      	beq.n	8000f92 <I2C_PeripheralClkCtrl+0x4e>
 8000f8c:	2b01      	cmp	r3, #1
 8000f8e:	d007      	beq.n	8000fa0 <I2C_PeripheralClkCtrl+0x5c>
			break;
		case 2:
			I2C3_PCLK_EN();
			break;
		default:
			break;
 8000f90:	e033      	b.n	8000ffa <I2C_PeripheralClkCtrl+0xb6>
			I2C1_PCLK_EN();
 8000f92:	4b21      	ldr	r3, [pc, #132]	@ (8001018 <I2C_PeripheralClkCtrl+0xd4>)
 8000f94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f96:	4a20      	ldr	r2, [pc, #128]	@ (8001018 <I2C_PeripheralClkCtrl+0xd4>)
 8000f98:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000f9c:	6413      	str	r3, [r2, #64]	@ 0x40
			break;
 8000f9e:	e02f      	b.n	8001000 <I2C_PeripheralClkCtrl+0xbc>
			I2C2_PCLK_EN();
 8000fa0:	4b1d      	ldr	r3, [pc, #116]	@ (8001018 <I2C_PeripheralClkCtrl+0xd4>)
 8000fa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fa4:	4a1c      	ldr	r2, [pc, #112]	@ (8001018 <I2C_PeripheralClkCtrl+0xd4>)
 8000fa6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000faa:	6413      	str	r3, [r2, #64]	@ 0x40
			break;
 8000fac:	e028      	b.n	8001000 <I2C_PeripheralClkCtrl+0xbc>
			I2C3_PCLK_EN();
 8000fae:	4b1a      	ldr	r3, [pc, #104]	@ (8001018 <I2C_PeripheralClkCtrl+0xd4>)
 8000fb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fb2:	4a19      	ldr	r2, [pc, #100]	@ (8001018 <I2C_PeripheralClkCtrl+0xd4>)
 8000fb4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000fb8:	6413      	str	r3, [r2, #64]	@ 0x40
			break;
 8000fba:	e021      	b.n	8001000 <I2C_PeripheralClkCtrl+0xbc>
		}

	}
	else{
		switch(temp1){
 8000fbc:	7bfb      	ldrb	r3, [r7, #15]
 8000fbe:	2b02      	cmp	r3, #2
 8000fc0:	d014      	beq.n	8000fec <I2C_PeripheralClkCtrl+0xa8>
 8000fc2:	2b02      	cmp	r3, #2
 8000fc4:	dc1b      	bgt.n	8000ffe <I2C_PeripheralClkCtrl+0xba>
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d002      	beq.n	8000fd0 <I2C_PeripheralClkCtrl+0x8c>
 8000fca:	2b01      	cmp	r3, #1
 8000fcc:	d007      	beq.n	8000fde <I2C_PeripheralClkCtrl+0x9a>
			break;
		case 2:
			I2C3_PCLK_DI();
			break;
		default:
			break;
 8000fce:	e016      	b.n	8000ffe <I2C_PeripheralClkCtrl+0xba>
			I2C1_PCLK_DI();
 8000fd0:	4b11      	ldr	r3, [pc, #68]	@ (8001018 <I2C_PeripheralClkCtrl+0xd4>)
 8000fd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fd4:	4a10      	ldr	r2, [pc, #64]	@ (8001018 <I2C_PeripheralClkCtrl+0xd4>)
 8000fd6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8000fda:	6413      	str	r3, [r2, #64]	@ 0x40
			break;
 8000fdc:	e010      	b.n	8001000 <I2C_PeripheralClkCtrl+0xbc>
			I2C2_PCLK_DI();
 8000fde:	4b0e      	ldr	r3, [pc, #56]	@ (8001018 <I2C_PeripheralClkCtrl+0xd4>)
 8000fe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fe2:	4a0d      	ldr	r2, [pc, #52]	@ (8001018 <I2C_PeripheralClkCtrl+0xd4>)
 8000fe4:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8000fe8:	6413      	str	r3, [r2, #64]	@ 0x40
			break;
 8000fea:	e009      	b.n	8001000 <I2C_PeripheralClkCtrl+0xbc>
			I2C3_PCLK_DI();
 8000fec:	4b0a      	ldr	r3, [pc, #40]	@ (8001018 <I2C_PeripheralClkCtrl+0xd4>)
 8000fee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ff0:	4a09      	ldr	r2, [pc, #36]	@ (8001018 <I2C_PeripheralClkCtrl+0xd4>)
 8000ff2:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8000ff6:	6413      	str	r3, [r2, #64]	@ 0x40
			break;
 8000ff8:	e002      	b.n	8001000 <I2C_PeripheralClkCtrl+0xbc>
			break;
 8000ffa:	bf00      	nop
 8000ffc:	e000      	b.n	8001000 <I2C_PeripheralClkCtrl+0xbc>
			break;
 8000ffe:	bf00      	nop
		}

	}
}
 8001000:	bf00      	nop
 8001002:	3714      	adds	r7, #20
 8001004:	46bd      	mov	sp, r7
 8001006:	bc80      	pop	{r7}
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	40005400 	.word	0x40005400
 8001010:	40005800 	.word	0x40005800
 8001014:	40005c00 	.word	0x40005c00
 8001018:	40023800 	.word	0x40023800

0800101c <I2C_PeripheralControl>:
 * @return		- none
 *
 * @Note 		-
 */
void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 800101c:	b480      	push	{r7}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
 8001024:	460b      	mov	r3, r1
 8001026:	70fb      	strb	r3, [r7, #3]
	if (EnorDi == ENABLE) {
 8001028:	78fb      	ldrb	r3, [r7, #3]
 800102a:	2b01      	cmp	r3, #1
 800102c:	d10c      	bne.n	8001048 <I2C_PeripheralControl+0x2c>
		pI2Cx->CR1 |= (1 << I2C_CR1_PE); //Enable the peripheral
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f043 0201 	orr.w	r2, r3, #1
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	601a      	str	r2, [r3, #0]

		//enables ACKing, can only be enabled when PE = 1
		pI2Cx->CR1 |= 1 << I2C_CR1_ACK;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	601a      	str	r2, [r3, #0]

	} else {
		pI2Cx->CR1 &= ~(1 << I2C_CR1_PE); //Disable the peripheral
	}
}
 8001046:	e005      	b.n	8001054 <I2C_PeripheralControl+0x38>
		pI2Cx->CR1 &= ~(1 << I2C_CR1_PE); //Disable the peripheral
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f023 0201 	bic.w	r2, r3, #1
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	601a      	str	r2, [r3, #0]
}
 8001054:	bf00      	nop
 8001056:	370c      	adds	r7, #12
 8001058:	46bd      	mov	sp, r7
 800105a:	bc80      	pop	{r7}
 800105c:	4770      	bx	lr
	...

08001060 <I2C_Init>:
 * @return		- none
 *
 * @Note 		-
 */
void I2C_Init(I2C_Handle_t *pI2CHandle)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b086      	sub	sp, #24
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
	I2C_PeripheralClkCtrl(pI2CHandle->pI2Cx, ENABLE);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	2101      	movs	r1, #1
 800106e:	4618      	mov	r0, r3
 8001070:	f7ff ff68 	bl	8000f44 <I2C_PeripheralClkCtrl>

	uint32_t SCLSpeed = pI2CHandle->I2C_Config.I2C_SCLSpeed;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	617b      	str	r3, [r7, #20]
	uint16_t CCRVal;
	uint8_t temp = 0;
 800107a:	2300      	movs	r3, #0
 800107c:	74fb      	strb	r3, [r7, #19]

	//fetches the current APB1 clock value
	uint32_t APB1Clock = RCC_GetPCLK1Value();
 800107e:	f000 f95d 	bl	800133c <RCC_GetPCLK1Value>
 8001082:	60f8      	str	r0, [r7, #12]

	//clears the I2C_CR2:FREQ5:0 bitfield just to be sure thats its clean before setting
	pI2CHandle->pI2Cx->CR2 &= ~(63 << I2C_CR2_FREQ5_0);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	685a      	ldr	r2, [r3, #4]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8001092:	605a      	str	r2, [r3, #4]

	//program the current APB1 clock freq into I2C_CR2:FREQ5_0
	//divided the APB1Clock value with 1 million, only need the ten millions and millions digit
	pI2CHandle->pI2Cx->CR2 |= (APB1Clock/1000000) << I2C_CR2_FREQ5_0;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	6859      	ldr	r1, [r3, #4]
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	4a33      	ldr	r2, [pc, #204]	@ (800116c <I2C_Init+0x10c>)
 800109e:	fba2 2303 	umull	r2, r3, r2, r3
 80010a2:	0c9a      	lsrs	r2, r3, #18
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	430a      	orrs	r2, r1
 80010aa:	605a      	str	r2, [r3, #4]

	//programs the user defined slave address to I2C_OAR1:ADD7_1 register
	pI2CHandle->pI2Cx->OAR1 |= pI2CHandle->I2C_Config.I2C_DeviceAddress << I2C_OAR1_ADD7_1;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	6899      	ldr	r1, [r3, #8]
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	7a1b      	ldrb	r3, [r3, #8]
 80010b6:	005a      	lsls	r2, r3, #1
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	430a      	orrs	r2, r1
 80010be:	609a      	str	r2, [r3, #8]

	//set the 14th bit in OAR1 register to 1 as instructed by reference manual.
	pI2CHandle->pI2Cx->OAR1 |= 1 << I2C_OAR1_BIT14;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	689a      	ldr	r2, [r3, #8]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80010ce:	609a      	str	r2, [r3, #8]

	//for standard mode at 100Kbps
	if(SCLSpeed <= I2C_SCL_SPEED_STANDARD)
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	4a27      	ldr	r2, [pc, #156]	@ (8001170 <I2C_Init+0x110>)
 80010d4:	4293      	cmp	r3, r2
 80010d6:	d80f      	bhi.n	80010f8 <I2C_Init+0x98>
		//set the MCU into master standard mode
		temp &= ~(1 << I2C_CCR_FS);

		//calculate the needed CCR , for some reason it will skip this calculation and go to
		//infinite loop, idk why probably kay float ni sya?
		CCRVal = APB1Clock / (2 * SCLSpeed);
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	005b      	lsls	r3, r3, #1
 80010dc:	68fa      	ldr	r2, [r7, #12]
 80010de:	fbb2 f3f3 	udiv	r3, r2, r3
 80010e2:	817b      	strh	r3, [r7, #10]

		//set the CCR value
		temp |= CCRVal << I2C_CCR_CCR11_0;
 80010e4:	897b      	ldrh	r3, [r7, #10]
 80010e6:	b2da      	uxtb	r2, r3
 80010e8:	7cfb      	ldrb	r3, [r7, #19]
 80010ea:	4313      	orrs	r3, r2
 80010ec:	74fb      	strb	r3, [r7, #19]

		//programs the temp value into the CCR register
		pI2CHandle->pI2Cx->CCR = temp;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	7cfa      	ldrb	r2, [r7, #19]
 80010f4:	61da      	str	r2, [r3, #28]
 80010f6:	e029      	b.n	800114c <I2C_Init+0xec>
		temp |= 1 << I2C_CCR_FS;

		//set the Fast Mode duty cycle
		temp |= pI2CHandle->I2C_Config.I2C_FMDutyCycle << I2C_CCR_DUTY;

		switch(SCLSpeed){
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	4a1e      	ldr	r2, [pc, #120]	@ (8001174 <I2C_Init+0x114>)
 80010fc:	4293      	cmp	r3, r2
 80010fe:	d004      	beq.n	800110a <I2C_Init+0xaa>
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	4a1d      	ldr	r2, [pc, #116]	@ (8001178 <I2C_Init+0x118>)
 8001104:	4293      	cmp	r3, r2
 8001106:	d012      	beq.n	800112e <I2C_Init+0xce>
			//programs the temp value into the CCR register
			pI2CHandle->pI2Cx->CCR = temp;
			break;

		default:
			break;
 8001108:	e020      	b.n	800114c <I2C_Init+0xec>
			CCRVal = APB1Clock / (3 * SCLSpeed);
 800110a:	697a      	ldr	r2, [r7, #20]
 800110c:	4613      	mov	r3, r2
 800110e:	005b      	lsls	r3, r3, #1
 8001110:	4413      	add	r3, r2
 8001112:	68fa      	ldr	r2, [r7, #12]
 8001114:	fbb2 f3f3 	udiv	r3, r2, r3
 8001118:	817b      	strh	r3, [r7, #10]
			temp |= CCRVal << I2C_CCR_CCR11_0;
 800111a:	897b      	ldrh	r3, [r7, #10]
 800111c:	b2da      	uxtb	r2, r3
 800111e:	7cfb      	ldrb	r3, [r7, #19]
 8001120:	4313      	orrs	r3, r2
 8001122:	74fb      	strb	r3, [r7, #19]
			pI2CHandle->pI2Cx->CCR = temp;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	7cfa      	ldrb	r2, [r7, #19]
 800112a:	61da      	str	r2, [r3, #28]
			break;
 800112c:	e00e      	b.n	800114c <I2C_Init+0xec>
			CCRVal = APB1Clock / (25 * SCLSpeed);
 800112e:	697a      	ldr	r2, [r7, #20]
 8001130:	4613      	mov	r3, r2
 8001132:	009b      	lsls	r3, r3, #2
 8001134:	4413      	add	r3, r2
 8001136:	009a      	lsls	r2, r3, #2
 8001138:	4413      	add	r3, r2
 800113a:	68fa      	ldr	r2, [r7, #12]
 800113c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001140:	817b      	strh	r3, [r7, #10]
			pI2CHandle->pI2Cx->CCR = temp;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	7cfa      	ldrb	r2, [r7, #19]
 8001148:	61da      	str	r2, [r3, #28]
			break;
 800114a:	bf00      	nop
		}
	}

	//TRISE configuration
	uint8_t trise_val;
	trise_val = Get_TriseValue(pI2CHandle);
 800114c:	6878      	ldr	r0, [r7, #4]
 800114e:	f000 f947 	bl	80013e0 <Get_TriseValue>
 8001152:	4603      	mov	r3, r0
 8001154:	727b      	strb	r3, [r7, #9]

	//programs the calculated trise value into the Trise register
	//masked the first 6 bits only since TRISE register is only 6 bits long.
	pI2CHandle->pI2Cx->TRISE = (trise_val & 0x3f);
 8001156:	7a7a      	ldrb	r2, [r7, #9]
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8001160:	621a      	str	r2, [r3, #32]
}
 8001162:	bf00      	nop
 8001164:	3718      	adds	r7, #24
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	431bde83 	.word	0x431bde83
 8001170:	000186a0 	.word	0x000186a0
 8001174:	00030d40 	.word	0x00030d40
 8001178:	00061a80 	.word	0x00061a80

0800117c <I2C_MasterSendData>:
 *
 * @Note 		- I'm thinking of sectioning this into individual "helper" functions
 * 	            - like one for generating START condition, one for sending data, etc. but haven't decided yet
 */
void I2C_MasterSendData(I2C_Handle_t *pI2CHandle, uint8_t *pTxBuffer, uint32_t Len, uint8_t SlaveAddr, uint8_t Repeated_Start_EN)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b086      	sub	sp, #24
 8001180:	af00      	add	r7, sp, #0
 8001182:	60f8      	str	r0, [r7, #12]
 8001184:	60b9      	str	r1, [r7, #8]
 8001186:	607a      	str	r2, [r7, #4]
 8001188:	70fb      	strb	r3, [r7, #3]
	uint16_t dummy_read __unused =0;
 800118a:	2300      	movs	r3, #0
 800118c:	82fb      	strh	r3, [r7, #22]

	//start phase and address phase start
	i2c_startphase_addressphase(pI2CHandle, SlaveAddr, I2C_MASTER_WRITE_BIT);
 800118e:	78fb      	ldrb	r3, [r7, #3]
 8001190:	2200      	movs	r2, #0
 8001192:	4619      	mov	r1, r3
 8001194:	68f8      	ldr	r0, [r7, #12]
 8001196:	f000 f98c 	bl	80014b2 <i2c_startphase_addressphase>

	//dummy read from SR2 to clear the ADDR flag.
	dummy_read = pI2CHandle->pI2Cx->SR2;
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	699b      	ldr	r3, [r3, #24]
 80011a0:	82fb      	strh	r3, [r7, #22]

	//start sending thru polling method
	while(Len > 0){
 80011a2:	e012      	b.n	80011ca <I2C_MasterSendData+0x4e>

		//check if shift register TX buffer is empty, if empty write the data into data register to be sent
		if( ((pI2CHandle->pI2Cx->SR1 >> I2C_SR1_TXE) & 0x1) == 1){
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	695b      	ldr	r3, [r3, #20]
 80011aa:	09db      	lsrs	r3, r3, #7
 80011ac:	f003 0301 	and.w	r3, r3, #1
 80011b0:	2b01      	cmp	r3, #1
 80011b2:	d10a      	bne.n	80011ca <I2C_MasterSendData+0x4e>

			pI2CHandle->pI2Cx->DR = *pTxBuffer;
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	781a      	ldrb	r2, [r3, #0]
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	611a      	str	r2, [r3, #16]

			//decrements data length and increment pointer address to next byte is to be sent .
			Len--;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	3b01      	subs	r3, #1
 80011c2:	607b      	str	r3, [r7, #4]
			pTxBuffer++;
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	3301      	adds	r3, #1
 80011c8:	60bb      	str	r3, [r7, #8]
	while(Len > 0){
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d1e9      	bne.n	80011a4 <I2C_MasterSendData+0x28>
		}
	}

	//wait for TXE = 1 & BTF = 1 which means data register and shift register is empty
	while( I2C_GetSR1FlagStatus(pI2CHandle->pI2Cx, I2C_SR1_TXE) == 0);
 80011d0:	bf00      	nop
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	2107      	movs	r1, #7
 80011d8:	4618      	mov	r0, r3
 80011da:	f000 f955 	bl	8001488 <I2C_GetSR1FlagStatus>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d0f6      	beq.n	80011d2 <I2C_MasterSendData+0x56>
	while( I2C_GetSR1FlagStatus(pI2CHandle->pI2Cx, I2C_SR1_BTF) == 0);
 80011e4:	bf00      	nop
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	2102      	movs	r1, #2
 80011ec:	4618      	mov	r0, r3
 80011ee:	f000 f94b 	bl	8001488 <I2C_GetSR1FlagStatus>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d0f6      	beq.n	80011e6 <I2C_MasterSendData+0x6a>


	if(Repeated_Start_EN == I2C_REPEATED_START_DI)
 80011f8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d107      	bne.n	8001210 <I2C_MasterSendData+0x94>
		//generate the stop condition
		pI2CHandle->pI2Cx->CR1 |= 1 << I2C_CR1_STOP;
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	681a      	ldr	r2, [r3, #0]
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800120e:	601a      	str	r2, [r3, #0]

}
 8001210:	bf00      	nop
 8001212:	3718      	adds	r7, #24
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}

08001218 <I2C_MasterReceiveData>:
 *
 * @Note 		- I'm thinking of sectioning this into individual "helper" functions
 * 	            - like one for generating START condition, one for sending data, etc. but haven't decided yet
 */
void I2C_MasterReceiveData(I2C_Handle_t *pI2CHandle, uint8_t *pRxBuffer, uint32_t Len, uint8_t SlaveAddr, uint8_t Repeated_Start_EN)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b086      	sub	sp, #24
 800121c:	af00      	add	r7, sp, #0
 800121e:	60f8      	str	r0, [r7, #12]
 8001220:	60b9      	str	r1, [r7, #8]
 8001222:	607a      	str	r2, [r7, #4]
 8001224:	70fb      	strb	r3, [r7, #3]
	uint16_t dummy_read __unused =0;
 8001226:	2300      	movs	r3, #0
 8001228:	827b      	strh	r3, [r7, #18]

	//3. Send the address of the slave with r/nw bit set to R(1) (total 8 bits )

	//4. wait until address phase is completed by checking the ADDR flag in the SR1
	//summed up in this one helper function i made
	i2c_startphase_addressphase(pI2CHandle, SlaveAddr, I2C_MASTER_READ_BIT);
 800122a:	78fb      	ldrb	r3, [r7, #3]
 800122c:	2201      	movs	r2, #1
 800122e:	4619      	mov	r1, r3
 8001230:	68f8      	ldr	r0, [r7, #12]
 8001232:	f000 f93e 	bl	80014b2 <i2c_startphase_addressphase>


	//procedure to read only 1 byte from slave, i think this will be used to receive data from slave
	//on the data length the master will need from the slave
	if(Len == 1)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	2b01      	cmp	r3, #1
 800123a:	d134      	bne.n	80012a6 <I2C_MasterReceiveData+0x8e>
	{
		//Disable Acking so master will send a NACK after receiving 1 byte of data. The NACK is to tell slave it doesnt want anymore data
		pI2CHandle->pI2Cx->CR1 &= ~(1 << I2C_CR1_ACK);
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	681a      	ldr	r2, [r3, #0]
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800124a:	601a      	str	r2, [r3, #0]

		//to clear the ADDR flag
		dummy_read = pI2CHandle->pI2Cx->SR2;
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	699b      	ldr	r3, [r3, #24]
 8001252:	827b      	strh	r3, [r7, #18]

		//wait until  RXNE becomes 1
		while(I2C_GetSR1FlagStatus(pI2CHandle->pI2Cx, I2C_SR1_RXNE) == 0);
 8001254:	bf00      	nop
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	2106      	movs	r1, #6
 800125c:	4618      	mov	r0, r3
 800125e:	f000 f913 	bl	8001488 <I2C_GetSR1FlagStatus>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d0f6      	beq.n	8001256 <I2C_MasterReceiveData+0x3e>

		if(Repeated_Start_EN == I2C_REPEATED_START_DI)
 8001268:	f897 3020 	ldrb.w	r3, [r7, #32]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d107      	bne.n	8001280 <I2C_MasterReceiveData+0x68>
			//generate the stop condition
			pI2CHandle->pI2Cx->CR1 |= 1 << I2C_CR1_STOP;
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	681a      	ldr	r2, [r3, #0]
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800127e:	601a      	str	r2, [r3, #0]

		//read data in to buffer
		*pRxBuffer = pI2CHandle->pI2Cx->DR;
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	691b      	ldr	r3, [r3, #16]
 8001286:	b2da      	uxtb	r2, r3
 8001288:	68bb      	ldr	r3, [r7, #8]
 800128a:	701a      	strb	r2, [r3, #0]

		if(pI2CHandle->I2C_Config.I2C_AckControl == I2C_ACK_ENABLE){
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	7a5b      	ldrb	r3, [r3, #9]
 8001290:	2b01      	cmp	r3, #1
 8001292:	d108      	bne.n	80012a6 <I2C_MasterReceiveData+0x8e>
			//re-enable ACKing
			pI2CHandle->pI2Cx->CR1 |= 1 << I2C_CR1_ACK;
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	681a      	ldr	r2, [r3, #0]
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80012a2:	601a      	str	r2, [r3, #0]

			return;
 80012a4:	e046      	b.n	8001334 <I2C_MasterReceiveData+0x11c>
		}
	}


	//procedure to read data from slave when Len > 1
	if(Len > 1)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2b01      	cmp	r3, #1
 80012aa:	d943      	bls.n	8001334 <I2C_MasterReceiveData+0x11c>
	{
		//clear the ADDR flag
		dummy_read = pI2CHandle->pI2Cx->SR2;
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	699b      	ldr	r3, [r3, #24]
 80012b2:	827b      	strh	r3, [r7, #18]

		//read the data until Len becomes zero
		for ( uint32_t i = Len ; i > 0 ; i--)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	617b      	str	r3, [r7, #20]
 80012b8:	e02c      	b.n	8001314 <I2C_MasterReceiveData+0xfc>
		{
			//wait until RXNE becomes 1
			while(I2C_GetSR1FlagStatus(pI2CHandle->pI2Cx, I2C_SR1_RXNE) == 0);
 80012ba:	bf00      	nop
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	2106      	movs	r1, #6
 80012c2:	4618      	mov	r0, r3
 80012c4:	f000 f8e0 	bl	8001488 <I2C_GetSR1FlagStatus>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d0f6      	beq.n	80012bc <I2C_MasterReceiveData+0xa4>

			if(i == 2) //if last 2 bytes are remaining
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	2b02      	cmp	r3, #2
 80012d2:	d113      	bne.n	80012fc <I2C_MasterReceiveData+0xe4>
			{
				//Disable Acking so master will send NACK when receiving the last byte of data. The NACK is to tell the slave it doesn't need any more data
				pI2CHandle->pI2Cx->CR1 &= ~(1 << I2C_CR1_ACK);
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	681a      	ldr	r2, [r3, #0]
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80012e2:	601a      	str	r2, [r3, #0]

				if(Repeated_Start_EN == I2C_REPEATED_START_DI)
 80012e4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d107      	bne.n	80012fc <I2C_MasterReceiveData+0xe4>
					//generate the stop condition
					pI2CHandle->pI2Cx->CR1 |= 1 << I2C_CR1_STOP;
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	681a      	ldr	r2, [r3, #0]
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80012fa:	601a      	str	r2, [r3, #0]
			}

			//read the data from data register in to buffer
			*pRxBuffer = pI2CHandle->pI2Cx->DR;
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	691b      	ldr	r3, [r3, #16]
 8001302:	b2da      	uxtb	r2, r3
 8001304:	68bb      	ldr	r3, [r7, #8]
 8001306:	701a      	strb	r2, [r3, #0]

			//increment the buffer address
			pRxBuffer++;
 8001308:	68bb      	ldr	r3, [r7, #8]
 800130a:	3301      	adds	r3, #1
 800130c:	60bb      	str	r3, [r7, #8]
		for ( uint32_t i = Len ; i > 0 ; i--)
 800130e:	697b      	ldr	r3, [r7, #20]
 8001310:	3b01      	subs	r3, #1
 8001312:	617b      	str	r3, [r7, #20]
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d1cf      	bne.n	80012ba <I2C_MasterReceiveData+0xa2>

		}

		if(pI2CHandle->I2C_Config.I2C_AckControl == I2C_ACK_ENABLE){
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	7a5b      	ldrb	r3, [r3, #9]
 800131e:	2b01      	cmp	r3, #1
 8001320:	d108      	bne.n	8001334 <I2C_MasterReceiveData+0x11c>
			//re-enable ACKing
			pI2CHandle->pI2Cx->CR1 |= 1 << I2C_CR1_ACK;
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	681a      	ldr	r2, [r3, #0]
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001330:	601a      	str	r2, [r3, #0]

			return;
 8001332:	bf00      	nop

	}



}
 8001334:	3718      	adds	r7, #24
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
	...

0800133c <RCC_GetPCLK1Value>:
 *
 * @return		- none
 *
 * @Note 		-
 */
uint32_t RCC_GetPCLK1Value(void) {
 800133c:	b480      	push	{r7}
 800133e:	b085      	sub	sp, #20
 8001340:	af00      	add	r7, sp, #0
	uint32_t pclk1, system_clk;
	uint8_t clk_src, ahb_prescaler, apb1_prescaler;

	// Get the system clock source
	clk_src = (RCC->CFGR >> 2) & 0x3;
 8001342:	4b23      	ldr	r3, [pc, #140]	@ (80013d0 <RCC_GetPCLK1Value+0x94>)
 8001344:	689b      	ldr	r3, [r3, #8]
 8001346:	089b      	lsrs	r3, r3, #2
 8001348:	b2db      	uxtb	r3, r3
 800134a:	f003 0303 	and.w	r3, r3, #3
 800134e:	727b      	strb	r3, [r7, #9]

	if (clk_src == 0) {
 8001350:	7a7b      	ldrb	r3, [r7, #9]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d102      	bne.n	800135c <RCC_GetPCLK1Value+0x20>
		// HSI oscillator used as system clock
		system_clk = 16e+6; // HSI frequency is 16 MHz
 8001356:	4b1f      	ldr	r3, [pc, #124]	@ (80013d4 <RCC_GetPCLK1Value+0x98>)
 8001358:	60fb      	str	r3, [r7, #12]
 800135a:	e004      	b.n	8001366 <RCC_GetPCLK1Value+0x2a>
	} else if (clk_src == 1) {
 800135c:	7a7b      	ldrb	r3, [r7, #9]
 800135e:	2b01      	cmp	r3, #1
 8001360:	d101      	bne.n	8001366 <RCC_GetPCLK1Value+0x2a>
		// HSE oscillator used as system clock
		system_clk = 8e+6; // Assume HSE frequency is 8 MHz
 8001362:	4b1d      	ldr	r3, [pc, #116]	@ (80013d8 <RCC_GetPCLK1Value+0x9c>)
 8001364:	60fb      	str	r3, [r7, #12]
		// Calculate PLL output frequency (not shown here for brevity)
		//too complex, will add soon once I know how to use PLL as clock src.
	}

	// Get AHB prescaler
	ahb_prescaler = (RCC->CFGR >> 4) & 0xF;
 8001366:	4b1a      	ldr	r3, [pc, #104]	@ (80013d0 <RCC_GetPCLK1Value+0x94>)
 8001368:	689b      	ldr	r3, [r3, #8]
 800136a:	091b      	lsrs	r3, r3, #4
 800136c:	b2db      	uxtb	r3, r3
 800136e:	f003 030f 	and.w	r3, r3, #15
 8001372:	72fb      	strb	r3, [r7, #11]
	if (ahb_prescaler < 8) {
 8001374:	7afb      	ldrb	r3, [r7, #11]
 8001376:	2b07      	cmp	r3, #7
 8001378:	d802      	bhi.n	8001380 <RCC_GetPCLK1Value+0x44>
		ahb_prescaler = 1; // No division
 800137a:	2301      	movs	r3, #1
 800137c:	72fb      	strb	r3, [r7, #11]
 800137e:	e005      	b.n	800138c <RCC_GetPCLK1Value+0x50>
	} else {
		//this line is neat, this converts the binary value of the prescaler into its equivalent decimal value
		ahb_prescaler = 1 << (ahb_prescaler - 7); // 2, 4, 8, ..., 512
 8001380:	7afb      	ldrb	r3, [r7, #11]
 8001382:	3b07      	subs	r3, #7
 8001384:	2201      	movs	r2, #1
 8001386:	fa02 f303 	lsl.w	r3, r2, r3
 800138a:	72fb      	strb	r3, [r7, #11]
	}

	// Get APB1 prescaler
	apb1_prescaler = (RCC->CFGR >> 10) & 0x7;
 800138c:	4b10      	ldr	r3, [pc, #64]	@ (80013d0 <RCC_GetPCLK1Value+0x94>)
 800138e:	689b      	ldr	r3, [r3, #8]
 8001390:	0a9b      	lsrs	r3, r3, #10
 8001392:	b2db      	uxtb	r3, r3
 8001394:	f003 0307 	and.w	r3, r3, #7
 8001398:	72bb      	strb	r3, [r7, #10]
	if (apb1_prescaler < 4) {
 800139a:	7abb      	ldrb	r3, [r7, #10]
 800139c:	2b03      	cmp	r3, #3
 800139e:	d802      	bhi.n	80013a6 <RCC_GetPCLK1Value+0x6a>
		apb1_prescaler = 1; // No division
 80013a0:	2301      	movs	r3, #1
 80013a2:	72bb      	strb	r3, [r7, #10]
 80013a4:	e005      	b.n	80013b2 <RCC_GetPCLK1Value+0x76>
	} else {
		apb1_prescaler = 1 << (apb1_prescaler - 3); // 2, 4, 8, 16
 80013a6:	7abb      	ldrb	r3, [r7, #10]
 80013a8:	3b03      	subs	r3, #3
 80013aa:	2201      	movs	r2, #1
 80013ac:	fa02 f303 	lsl.w	r3, r2, r3
 80013b0:	72bb      	strb	r3, [r7, #10]
	}

	// Calculate PCLK1
	pclk1 = (system_clk / ahb_prescaler) / apb1_prescaler;
 80013b2:	7afb      	ldrb	r3, [r7, #11]
 80013b4:	68fa      	ldr	r2, [r7, #12]
 80013b6:	fbb2 f2f3 	udiv	r2, r2, r3
 80013ba:	7abb      	ldrb	r3, [r7, #10]
 80013bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80013c0:	607b      	str	r3, [r7, #4]

	return pclk1;
 80013c2:	687b      	ldr	r3, [r7, #4]
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	3714      	adds	r7, #20
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bc80      	pop	{r7}
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop
 80013d0:	40023800 	.word	0x40023800
 80013d4:	00f42400 	.word	0x00f42400
 80013d8:	007a1200 	.word	0x007a1200
 80013dc:	00000000 	.word	0x00000000

080013e0 <Get_TriseValue>:
 *
 * @return		- uint8_t, returns the calculated trise value.
 *
 * @Note 		-
 */
uint8_t Get_TriseValue(I2C_Handle_t *pI2CHandle){
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b086      	sub	sp, #24
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]

	uint8_t trise_val;
	uint32_t pclk1;

	uint32_t SCLSpeed = pI2CHandle->I2C_Config.I2C_SCLSpeed;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	613b      	str	r3, [r7, #16]

	pclk1 = RCC_GetPCLK1Value();
 80013ee:	f7ff ffa5 	bl	800133c <RCC_GetPCLK1Value>
 80013f2:	60f8      	str	r0, [r7, #12]


	if(SCLSpeed == I2C_SCL_SPEED_STANDARD){
 80013f4:	693b      	ldr	r3, [r7, #16]
 80013f6:	4a22      	ldr	r2, [pc, #136]	@ (8001480 <Get_TriseValue+0xa0>)
 80013f8:	4293      	cmp	r3, r2
 80013fa:	d119      	bne.n	8001430 <Get_TriseValue+0x50>
		//if SCLSpeed is standard mode use 1000ns as numerator as per i2c spec
		trise_val = ( 1000e-9 * pclk1 ) + 1;
 80013fc:	68f8      	ldr	r0, [r7, #12]
 80013fe:	f7ff f9c3 	bl	8000788 <__aeabi_ui2d>
 8001402:	a31b      	add	r3, pc, #108	@ (adr r3, 8001470 <Get_TriseValue+0x90>)
 8001404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001408:	f7fe ff52 	bl	80002b0 <__aeabi_dmul>
 800140c:	4602      	mov	r2, r0
 800140e:	460b      	mov	r3, r1
 8001410:	4610      	mov	r0, r2
 8001412:	4619      	mov	r1, r3
 8001414:	f04f 0200 	mov.w	r2, #0
 8001418:	4b1a      	ldr	r3, [pc, #104]	@ (8001484 <Get_TriseValue+0xa4>)
 800141a:	f7ff f879 	bl	8000510 <__adddf3>
 800141e:	4602      	mov	r2, r0
 8001420:	460b      	mov	r3, r1
 8001422:	4610      	mov	r0, r2
 8001424:	4619      	mov	r1, r3
 8001426:	f7ff fa29 	bl	800087c <__aeabi_d2uiz>
 800142a:	4603      	mov	r3, r0
 800142c:	75fb      	strb	r3, [r7, #23]
 800142e:	e018      	b.n	8001462 <Get_TriseValue+0x82>
	}else{
		//If SCLSpeed is fast mode use 300ns as numerator as per i2c spec
		trise_val = ( 300e-9 * pclk1 ) + 1;
 8001430:	68f8      	ldr	r0, [r7, #12]
 8001432:	f7ff f9a9 	bl	8000788 <__aeabi_ui2d>
 8001436:	a310      	add	r3, pc, #64	@ (adr r3, 8001478 <Get_TriseValue+0x98>)
 8001438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800143c:	f7fe ff38 	bl	80002b0 <__aeabi_dmul>
 8001440:	4602      	mov	r2, r0
 8001442:	460b      	mov	r3, r1
 8001444:	4610      	mov	r0, r2
 8001446:	4619      	mov	r1, r3
 8001448:	f04f 0200 	mov.w	r2, #0
 800144c:	4b0d      	ldr	r3, [pc, #52]	@ (8001484 <Get_TriseValue+0xa4>)
 800144e:	f7ff f85f 	bl	8000510 <__adddf3>
 8001452:	4602      	mov	r2, r0
 8001454:	460b      	mov	r3, r1
 8001456:	4610      	mov	r0, r2
 8001458:	4619      	mov	r1, r3
 800145a:	f7ff fa0f 	bl	800087c <__aeabi_d2uiz>
 800145e:	4603      	mov	r3, r0
 8001460:	75fb      	strb	r3, [r7, #23]
	}

	return trise_val;
 8001462:	7dfb      	ldrb	r3, [r7, #23]
}
 8001464:	4618      	mov	r0, r3
 8001466:	3718      	adds	r7, #24
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	f3af 8000 	nop.w
 8001470:	a0b5ed8d 	.word	0xa0b5ed8d
 8001474:	3eb0c6f7 	.word	0x3eb0c6f7
 8001478:	f40d8376 	.word	0xf40d8376
 800147c:	3e9421f5 	.word	0x3e9421f5
 8001480:	000186a0 	.word	0x000186a0
 8001484:	3ff00000 	.word	0x3ff00000

08001488 <I2C_GetSR1FlagStatus>:
 *
 * @return		- uint8_t, returns the flag status
 *
 * @Note 		-
 */
uint8_t I2C_GetSR1FlagStatus(I2C_RegDef_t *pI2Cx, uint8_t FlagName){
 8001488:	b480      	push	{r7}
 800148a:	b085      	sub	sp, #20
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
 8001490:	460b      	mov	r3, r1
 8001492:	70fb      	strb	r3, [r7, #3]

	//gets the flag status from SR1
	uint8_t flag_status = (pI2Cx->SR1 >> FlagName) & 0x0001;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	695a      	ldr	r2, [r3, #20]
 8001498:	78fb      	ldrb	r3, [r7, #3]
 800149a:	fa22 f303 	lsr.w	r3, r2, r3
 800149e:	b2db      	uxtb	r3, r3
 80014a0:	f003 0301 	and.w	r3, r3, #1
 80014a4:	73fb      	strb	r3, [r7, #15]

	//return the flag status
	return flag_status;
 80014a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	3714      	adds	r7, #20
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bc80      	pop	{r7}
 80014b0:	4770      	bx	lr

080014b2 <i2c_startphase_addressphase>:
 * @return		- uint8_t, returns the flag status
 *
 * @Note 		-
 */
static void i2c_startphase_addressphase(I2C_Handle_t *pI2CHandle, uint8_t SlaveAddr, uint8_t rw_bit)
{
 80014b2:	b580      	push	{r7, lr}
 80014b4:	b082      	sub	sp, #8
 80014b6:	af00      	add	r7, sp, #0
 80014b8:	6078      	str	r0, [r7, #4]
 80014ba:	460b      	mov	r3, r1
 80014bc:	70fb      	strb	r3, [r7, #3]
 80014be:	4613      	mov	r3, r2
 80014c0:	70bb      	strb	r3, [r7, #2]

	//generate START condition
	pI2CHandle->pI2Cx->CR1 |= 1 << I2C_CR1_START;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	681a      	ldr	r2, [r3, #0]
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80014d0:	601a      	str	r2, [r3, #0]

	//wait for SB flag to be set which means start bit executed successfully at the same tme read SR1
	while( I2C_GetSR1FlagStatus(pI2CHandle->pI2Cx, I2C_SR1_SB) == 0 );
 80014d2:	bf00      	nop
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	2100      	movs	r1, #0
 80014da:	4618      	mov	r0, r3
 80014dc:	f7ff ffd4 	bl	8001488 <I2C_GetSR1FlagStatus>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d0f6      	beq.n	80014d4 <i2c_startphase_addressphase+0x22>

	//sets the r/nw bit to write mode
	SlaveAddr = SlaveAddr << 1;
 80014e6:	78fb      	ldrb	r3, [r7, #3]
 80014e8:	005b      	lsls	r3, r3, #1
 80014ea:	70fb      	strb	r3, [r7, #3]

	//master is in write mode
	if(rw_bit == I2C_MASTER_WRITE_BIT)
 80014ec:	78bb      	ldrb	r3, [r7, #2]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d104      	bne.n	80014fc <i2c_startphase_addressphase+0x4a>
		SlaveAddr &= ~(1 << 0);
 80014f2:	78fb      	ldrb	r3, [r7, #3]
 80014f4:	f023 0301 	bic.w	r3, r3, #1
 80014f8:	70fb      	strb	r3, [r7, #3]
 80014fa:	e003      	b.n	8001504 <i2c_startphase_addressphase+0x52>

	//master is in read mode
	else
		SlaveAddr |= 1 << 0;
 80014fc:	78fb      	ldrb	r3, [r7, #3]
 80014fe:	f043 0301 	orr.w	r3, r3, #1
 8001502:	70fb      	strb	r3, [r7, #3]

	//write the slave address to be sent thru which also clears the SB flag.
	pI2CHandle->pI2Cx->DR = SlaveAddr;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	78fa      	ldrb	r2, [r7, #3]
 800150a:	611a      	str	r2, [r3, #16]

	//waits for ADDR flag to be set which means address bit sent successfully at the same time reads SR1
	while( I2C_GetSR1FlagStatus(pI2CHandle->pI2Cx, I2C_SR1_ADDR) == 0 );
 800150c:	bf00      	nop
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	2101      	movs	r1, #1
 8001514:	4618      	mov	r0, r3
 8001516:	f7ff ffb7 	bl	8001488 <I2C_GetSR1FlagStatus>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d0f6      	beq.n	800150e <i2c_startphase_addressphase+0x5c>

}
 8001520:	bf00      	nop
 8001522:	bf00      	nop
 8001524:	3708      	adds	r7, #8
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
	...

0800152c <delay>:

#include "stm32f446xx.h"
#include <string.h>
#include <stdio.h>

void delay(void){
 800152c:	b480      	push	{r7}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0

	for(uint32_t i=0; i < 200000 ; i++);
 8001532:	2300      	movs	r3, #0
 8001534:	607b      	str	r3, [r7, #4]
 8001536:	e002      	b.n	800153e <delay+0x12>
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	3301      	adds	r3, #1
 800153c:	607b      	str	r3, [r7, #4]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	4a04      	ldr	r2, [pc, #16]	@ (8001554 <delay+0x28>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d9f8      	bls.n	8001538 <delay+0xc>
}
 8001546:	bf00      	nop
 8001548:	bf00      	nop
 800154a:	370c      	adds	r7, #12
 800154c:	46bd      	mov	sp, r7
 800154e:	bc80      	pop	{r7}
 8001550:	4770      	bx	lr
 8001552:	bf00      	nop
 8001554:	00030d3f 	.word	0x00030d3f

08001558 <gpio_init>:


I2C_Handle_t I2C_handle;

void gpio_init(void){
 8001558:	b580      	push	{r7, lr}
 800155a:	b084      	sub	sp, #16
 800155c:	af00      	add	r7, sp, #0
	GPIO_Handle_t Gpio_handle;

	//initialize PC13 user button
	Gpio_handle.pGPIOx = GPIOC;
 800155e:	4b0b      	ldr	r3, [pc, #44]	@ (800158c <gpio_init+0x34>)
 8001560:	607b      	str	r3, [r7, #4]
	Gpio_handle.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IT_FT;
 8001562:	2304      	movs	r3, #4
 8001564:	727b      	strb	r3, [r7, #9]
	Gpio_handle.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN13;
 8001566:	230d      	movs	r3, #13
 8001568:	723b      	strb	r3, [r7, #8]
	Gpio_handle.GPIO_PinConfig.GPIO_PinAFMode = NONE;
 800156a:	2310      	movs	r3, #16
 800156c:	737b      	strb	r3, [r7, #13]
	Gpio_handle.GPIO_PinConfig.GPIO_PinOType = GPIO_OPTYPE_PUSHPULL;
 800156e:	2300      	movs	r3, #0
 8001570:	733b      	strb	r3, [r7, #12]
	Gpio_handle.GPIO_PinConfig.GPIO_PinPuPdCtrl = GPIO_NO_PULLUP_PULLDOWN;
 8001572:	2300      	movs	r3, #0
 8001574:	72fb      	strb	r3, [r7, #11]
	Gpio_handle.GPIO_PinConfig.GPIO_PinSpeed = GPIO_FAST_SPD;
 8001576:	2302      	movs	r3, #2
 8001578:	72bb      	strb	r3, [r7, #10]
	GPIO_Init(&Gpio_handle);
 800157a:	1d3b      	adds	r3, r7, #4
 800157c:	4618      	mov	r0, r3
 800157e:	f7ff fa8f 	bl	8000aa0 <GPIO_Init>

}
 8001582:	bf00      	nop
 8001584:	3710      	adds	r7, #16
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	40020800 	.word	0x40020800

08001590 <i2c_gpioinit>:

void i2c_gpioinit(void){
 8001590:	b580      	push	{r7, lr}
 8001592:	b084      	sub	sp, #16
 8001594:	af00      	add	r7, sp, #0
	GPIO_Handle_t I2CGpio_handle;

	//initialize PC6 I2C SCL
	I2CGpio_handle.pGPIOx = GPIOB;
 8001596:	4b0e      	ldr	r3, [pc, #56]	@ (80015d0 <i2c_gpioinit+0x40>)
 8001598:	607b      	str	r3, [r7, #4]
	I2CGpio_handle.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 800159a:	2302      	movs	r3, #2
 800159c:	727b      	strb	r3, [r7, #9]
	I2CGpio_handle.GPIO_PinConfig.GPIO_PinAFMode = GPIO_AF4;
 800159e:	2304      	movs	r3, #4
 80015a0:	737b      	strb	r3, [r7, #13]
	I2CGpio_handle.GPIO_PinConfig.GPIO_PinOType = GPIO_OPTYPE_OPENDRAIN;
 80015a2:	2301      	movs	r3, #1
 80015a4:	733b      	strb	r3, [r7, #12]
	I2CGpio_handle.GPIO_PinConfig.GPIO_PinPuPdCtrl = GPIO_NO_PULLUP_PULLDOWN;
 80015a6:	2300      	movs	r3, #0
 80015a8:	72fb      	strb	r3, [r7, #11]
	I2CGpio_handle.GPIO_PinConfig.GPIO_PinSpeed = GPIO_FAST_SPD;
 80015aa:	2302      	movs	r3, #2
 80015ac:	72bb      	strb	r3, [r7, #10]

	I2CGpio_handle.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN6;
 80015ae:	2306      	movs	r3, #6
 80015b0:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2CGpio_handle);
 80015b2:	1d3b      	adds	r3, r7, #4
 80015b4:	4618      	mov	r0, r3
 80015b6:	f7ff fa73 	bl	8000aa0 <GPIO_Init>

	//initialize PC7 I2C SDA
	I2CGpio_handle.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN7;
 80015ba:	2307      	movs	r3, #7
 80015bc:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2CGpio_handle);
 80015be:	1d3b      	adds	r3, r7, #4
 80015c0:	4618      	mov	r0, r3
 80015c2:	f7ff fa6d 	bl	8000aa0 <GPIO_Init>
}
 80015c6:	bf00      	nop
 80015c8:	3710      	adds	r7, #16
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	40020400 	.word	0x40020400

080015d4 <i2c_init>:

void i2c_init(void){
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0

	I2C_handle.pI2Cx = I2C1;
 80015d8:	4b09      	ldr	r3, [pc, #36]	@ (8001600 <i2c_init+0x2c>)
 80015da:	4a0a      	ldr	r2, [pc, #40]	@ (8001604 <i2c_init+0x30>)
 80015dc:	601a      	str	r2, [r3, #0]
	I2C_handle.I2C_Config.I2C_AckControl = I2C_ACK_ENABLE;
 80015de:	4b08      	ldr	r3, [pc, #32]	@ (8001600 <i2c_init+0x2c>)
 80015e0:	2201      	movs	r2, #1
 80015e2:	725a      	strb	r2, [r3, #9]
	I2C_handle.I2C_Config.I2C_DeviceAddress = 0x61;
 80015e4:	4b06      	ldr	r3, [pc, #24]	@ (8001600 <i2c_init+0x2c>)
 80015e6:	2261      	movs	r2, #97	@ 0x61
 80015e8:	721a      	strb	r2, [r3, #8]
	I2C_handle.I2C_Config.I2C_FMDutyCycle	= I2C_FM_DUTY_2;
 80015ea:	4b05      	ldr	r3, [pc, #20]	@ (8001600 <i2c_init+0x2c>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	729a      	strb	r2, [r3, #10]
	I2C_handle.I2C_Config.I2C_SCLSpeed	= I2C_SCL_SPEED_STANDARD;
 80015f0:	4b03      	ldr	r3, [pc, #12]	@ (8001600 <i2c_init+0x2c>)
 80015f2:	4a05      	ldr	r2, [pc, #20]	@ (8001608 <i2c_init+0x34>)
 80015f4:	605a      	str	r2, [r3, #4]
	I2C_Init(&I2C_handle);
 80015f6:	4802      	ldr	r0, [pc, #8]	@ (8001600 <i2c_init+0x2c>)
 80015f8:	f7ff fd32 	bl	8001060 <I2C_Init>

}
 80015fc:	bf00      	nop
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	20000078 	.word	0x20000078
 8001604:	40005400 	.word	0x40005400
 8001608:	000186a0 	.word	0x000186a0

0800160c <main>:

int main(void){
 800160c:	b580      	push	{r7, lr}
 800160e:	af00      	add	r7, sp, #0

	i2c_gpioinit();
 8001610:	f7ff ffbe 	bl	8001590 <i2c_gpioinit>

	gpio_init();
 8001614:	f7ff ffa0 	bl	8001558 <gpio_init>

	i2c_init();
 8001618:	f7ff ffdc 	bl	80015d4 <i2c_init>

	//IRQ Configurations

	//ENABLED IRQ_NUMBER_EXTI10_15 = IRQ 40, TO BE RECEIVED AND PROCESSED BY THE CPU
	GPIO_IRQInterruptConfig(IRQ_NUMBER_EXTI10_15, ENABLE);
 800161c:	2101      	movs	r1, #1
 800161e:	2028      	movs	r0, #40	@ 0x28
 8001620:	f7ff fc04 	bl	8000e2c <GPIO_IRQInterruptConfig>

	//SETS THE PRIORITY OF IRQ 40 TO HIGHEST PRIOTITY THE LESSER THE NUMBER THE HIGHER THE PRIORITY
	GPIO_IRQPriorityConfig(IRQ_NUMBER_EXTI10_15, 1);
 8001624:	2101      	movs	r1, #1
 8001626:	2028      	movs	r0, #40	@ 0x28
 8001628:	f7ff fc3e 	bl	8000ea8 <GPIO_IRQPriorityConfig>

	I2C_PeripheralControl(I2C1, ENABLE);
 800162c:	2101      	movs	r1, #1
 800162e:	4802      	ldr	r0, [pc, #8]	@ (8001638 <main+0x2c>)
 8001630:	f7ff fcf4 	bl	800101c <I2C_PeripheralControl>

	while(1){
 8001634:	bf00      	nop
 8001636:	e7fd      	b.n	8001634 <main+0x28>
 8001638:	40005400 	.word	0x40005400

0800163c <EXTI15_10_IRQHandler>:
	return 0;
}



void EXTI15_10_IRQHandler(){
 800163c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001640:	b087      	sub	sp, #28
 8001642:	af02      	add	r7, sp, #8
 8001644:	466b      	mov	r3, sp
 8001646:	461e      	mov	r6, r3

	delay();
 8001648:	f7ff ff70 	bl	800152c <delay>
	uint8_t len=0;
 800164c:	2300      	movs	r3, #0
 800164e:	70fb      	strb	r3, [r7, #3]
	uint8_t cmd1 = 0x51, cmd2 = 0x52;
 8001650:	2351      	movs	r3, #81	@ 0x51
 8001652:	70bb      	strb	r3, [r7, #2]
 8001654:	2352      	movs	r3, #82	@ 0x52
 8001656:	707b      	strb	r3, [r7, #1]

	//sends command to retrieve the data length
	I2C_MasterSendData(&I2C_handle, &cmd1, 1, 0x68, I2C_REPEATED_START_EN);
 8001658:	1cb9      	adds	r1, r7, #2
 800165a:	2301      	movs	r3, #1
 800165c:	9300      	str	r3, [sp, #0]
 800165e:	2368      	movs	r3, #104	@ 0x68
 8001660:	2201      	movs	r2, #1
 8001662:	4830      	ldr	r0, [pc, #192]	@ (8001724 <EXTI15_10_IRQHandler+0xe8>)
 8001664:	f7ff fd8a 	bl	800117c <I2C_MasterSendData>

	//receive data length from slave
	I2C_MasterReceiveData(&I2C_handle, &len, 1, 0x68, I2C_REPEATED_START_EN);
 8001668:	1cf9      	adds	r1, r7, #3
 800166a:	2301      	movs	r3, #1
 800166c:	9300      	str	r3, [sp, #0]
 800166e:	2368      	movs	r3, #104	@ 0x68
 8001670:	2201      	movs	r2, #1
 8001672:	482c      	ldr	r0, [pc, #176]	@ (8001724 <EXTI15_10_IRQHandler+0xe8>)
 8001674:	f7ff fdd0 	bl	8001218 <I2C_MasterReceiveData>

	//send command to retrieve the whole length of data from slave
	I2C_MasterSendData(&I2C_handle, &cmd2, 1, 0x68, I2C_REPEATED_START_EN);
 8001678:	1c79      	adds	r1, r7, #1
 800167a:	2301      	movs	r3, #1
 800167c:	9300      	str	r3, [sp, #0]
 800167e:	2368      	movs	r3, #104	@ 0x68
 8001680:	2201      	movs	r2, #1
 8001682:	4828      	ldr	r0, [pc, #160]	@ (8001724 <EXTI15_10_IRQHandler+0xe8>)
 8001684:	f7ff fd7a 	bl	800117c <I2C_MasterSendData>

	uint8_t rxBuffer[len];
 8001688:	78f9      	ldrb	r1, [r7, #3]
 800168a:	460b      	mov	r3, r1
 800168c:	3b01      	subs	r3, #1
 800168e:	60bb      	str	r3, [r7, #8]
 8001690:	b2cb      	uxtb	r3, r1
 8001692:	2200      	movs	r2, #0
 8001694:	4698      	mov	r8, r3
 8001696:	4691      	mov	r9, r2
 8001698:	f04f 0200 	mov.w	r2, #0
 800169c:	f04f 0300 	mov.w	r3, #0
 80016a0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80016a4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80016a8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80016ac:	b2cb      	uxtb	r3, r1
 80016ae:	2200      	movs	r2, #0
 80016b0:	461c      	mov	r4, r3
 80016b2:	4615      	mov	r5, r2
 80016b4:	f04f 0200 	mov.w	r2, #0
 80016b8:	f04f 0300 	mov.w	r3, #0
 80016bc:	00eb      	lsls	r3, r5, #3
 80016be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80016c2:	00e2      	lsls	r2, r4, #3
 80016c4:	460b      	mov	r3, r1
 80016c6:	3307      	adds	r3, #7
 80016c8:	08db      	lsrs	r3, r3, #3
 80016ca:	00db      	lsls	r3, r3, #3
 80016cc:	ebad 0d03 	sub.w	sp, sp, r3
 80016d0:	ab02      	add	r3, sp, #8
 80016d2:	3300      	adds	r3, #0
 80016d4:	607b      	str	r3, [r7, #4]

	//receive whole data from slave
	I2C_MasterReceiveData(&I2C_handle, rxBuffer, len, 0x68, I2C_REPEATED_START_DI);
 80016d6:	78fb      	ldrb	r3, [r7, #3]
 80016d8:	461a      	mov	r2, r3
 80016da:	2300      	movs	r3, #0
 80016dc:	9300      	str	r3, [sp, #0]
 80016de:	2368      	movs	r3, #104	@ 0x68
 80016e0:	6879      	ldr	r1, [r7, #4]
 80016e2:	4810      	ldr	r0, [pc, #64]	@ (8001724 <EXTI15_10_IRQHandler+0xe8>)
 80016e4:	f7ff fd98 	bl	8001218 <I2C_MasterReceiveData>

	printf("\nReceived Data: ");
 80016e8:	480f      	ldr	r0, [pc, #60]	@ (8001728 <EXTI15_10_IRQHandler+0xec>)
 80016ea:	f000 f9d1 	bl	8001a90 <iprintf>
	for(uint32_t i=0; i<len; i++){
 80016ee:	2300      	movs	r3, #0
 80016f0:	60fb      	str	r3, [r7, #12]
 80016f2:	e009      	b.n	8001708 <EXTI15_10_IRQHandler+0xcc>

		printf("%c", rxBuffer[i]);
 80016f4:	687a      	ldr	r2, [r7, #4]
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	4413      	add	r3, r2
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	4618      	mov	r0, r3
 80016fe:	f000 f9d9 	bl	8001ab4 <putchar>
	for(uint32_t i=0; i<len; i++){
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	3301      	adds	r3, #1
 8001706:	60fb      	str	r3, [r7, #12]
 8001708:	78fb      	ldrb	r3, [r7, #3]
 800170a:	461a      	mov	r2, r3
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	4293      	cmp	r3, r2
 8001710:	d3f0      	bcc.n	80016f4 <EXTI15_10_IRQHandler+0xb8>

	}


	GPIO_IRQHandling(13);
 8001712:	200d      	movs	r0, #13
 8001714:	f7ff fbf6 	bl	8000f04 <GPIO_IRQHandling>
 8001718:	46b5      	mov	sp, r6

}
 800171a:	bf00      	nop
 800171c:	3714      	adds	r7, #20
 800171e:	46bd      	mov	sp, r7
 8001720:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001724:	20000078 	.word	0x20000078
 8001728:	080027ec 	.word	0x080027ec

0800172c <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 800172c:	b480      	push	{r7}
 800172e:	b083      	sub	sp, #12
 8001730:	af00      	add	r7, sp, #0
 8001732:	4603      	mov	r3, r0
 8001734:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8001736:	4b0e      	ldr	r3, [pc, #56]	@ (8001770 <ITM_SendChar+0x44>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4a0d      	ldr	r2, [pc, #52]	@ (8001770 <ITM_SendChar+0x44>)
 800173c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001740:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8001742:	4b0c      	ldr	r3, [pc, #48]	@ (8001774 <ITM_SendChar+0x48>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a0b      	ldr	r2, [pc, #44]	@ (8001774 <ITM_SendChar+0x48>)
 8001748:	f043 0301 	orr.w	r3, r3, #1
 800174c:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 800174e:	bf00      	nop
 8001750:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f003 0301 	and.w	r3, r3, #1
 800175a:	2b00      	cmp	r3, #0
 800175c:	d0f8      	beq.n	8001750 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 800175e:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 8001762:	79fb      	ldrb	r3, [r7, #7]
 8001764:	6013      	str	r3, [r2, #0]
}
 8001766:	bf00      	nop
 8001768:	370c      	adds	r7, #12
 800176a:	46bd      	mov	sp, r7
 800176c:	bc80      	pop	{r7}
 800176e:	4770      	bx	lr
 8001770:	e000edfc 	.word	0xe000edfc
 8001774:	e0000e00 	.word	0xe0000e00

08001778 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b086      	sub	sp, #24
 800177c:	af00      	add	r7, sp, #0
 800177e:	60f8      	str	r0, [r7, #12]
 8001780:	60b9      	str	r1, [r7, #8]
 8001782:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001784:	2300      	movs	r3, #0
 8001786:	617b      	str	r3, [r7, #20]
 8001788:	e00a      	b.n	80017a0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800178a:	f3af 8000 	nop.w
 800178e:	4601      	mov	r1, r0
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	1c5a      	adds	r2, r3, #1
 8001794:	60ba      	str	r2, [r7, #8]
 8001796:	b2ca      	uxtb	r2, r1
 8001798:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	3301      	adds	r3, #1
 800179e:	617b      	str	r3, [r7, #20]
 80017a0:	697a      	ldr	r2, [r7, #20]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	429a      	cmp	r2, r3
 80017a6:	dbf0      	blt.n	800178a <_read+0x12>
  }

  return len;
 80017a8:	687b      	ldr	r3, [r7, #4]
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3718      	adds	r7, #24
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}

080017b2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80017b2:	b580      	push	{r7, lr}
 80017b4:	b086      	sub	sp, #24
 80017b6:	af00      	add	r7, sp, #0
 80017b8:	60f8      	str	r0, [r7, #12]
 80017ba:	60b9      	str	r1, [r7, #8]
 80017bc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017be:	2300      	movs	r3, #0
 80017c0:	617b      	str	r3, [r7, #20]
 80017c2:	e009      	b.n	80017d8 <_write+0x26>
  {
   // __io_putchar(*ptr++);
    ITM_SendChar(*ptr++);
 80017c4:	68bb      	ldr	r3, [r7, #8]
 80017c6:	1c5a      	adds	r2, r3, #1
 80017c8:	60ba      	str	r2, [r7, #8]
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	4618      	mov	r0, r3
 80017ce:	f7ff ffad 	bl	800172c <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	3301      	adds	r3, #1
 80017d6:	617b      	str	r3, [r7, #20]
 80017d8:	697a      	ldr	r2, [r7, #20]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	429a      	cmp	r2, r3
 80017de:	dbf1      	blt.n	80017c4 <_write+0x12>
  }
  return len;
 80017e0:	687b      	ldr	r3, [r7, #4]
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	3718      	adds	r7, #24
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}

080017ea <_close>:

int _close(int file)
{
 80017ea:	b480      	push	{r7}
 80017ec:	b083      	sub	sp, #12
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80017f2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	370c      	adds	r7, #12
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bc80      	pop	{r7}
 80017fe:	4770      	bx	lr

08001800 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001800:	b480      	push	{r7}
 8001802:	b083      	sub	sp, #12
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
 8001808:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001810:	605a      	str	r2, [r3, #4]
  return 0;
 8001812:	2300      	movs	r3, #0
}
 8001814:	4618      	mov	r0, r3
 8001816:	370c      	adds	r7, #12
 8001818:	46bd      	mov	sp, r7
 800181a:	bc80      	pop	{r7}
 800181c:	4770      	bx	lr

0800181e <_isatty>:

int _isatty(int file)
{
 800181e:	b480      	push	{r7}
 8001820:	b083      	sub	sp, #12
 8001822:	af00      	add	r7, sp, #0
 8001824:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001826:	2301      	movs	r3, #1
}
 8001828:	4618      	mov	r0, r3
 800182a:	370c      	adds	r7, #12
 800182c:	46bd      	mov	sp, r7
 800182e:	bc80      	pop	{r7}
 8001830:	4770      	bx	lr

08001832 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001832:	b480      	push	{r7}
 8001834:	b085      	sub	sp, #20
 8001836:	af00      	add	r7, sp, #0
 8001838:	60f8      	str	r0, [r7, #12]
 800183a:	60b9      	str	r1, [r7, #8]
 800183c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800183e:	2300      	movs	r3, #0
}
 8001840:	4618      	mov	r0, r3
 8001842:	3714      	adds	r7, #20
 8001844:	46bd      	mov	sp, r7
 8001846:	bc80      	pop	{r7}
 8001848:	4770      	bx	lr
	...

0800184c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b086      	sub	sp, #24
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001854:	4a14      	ldr	r2, [pc, #80]	@ (80018a8 <_sbrk+0x5c>)
 8001856:	4b15      	ldr	r3, [pc, #84]	@ (80018ac <_sbrk+0x60>)
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001860:	4b13      	ldr	r3, [pc, #76]	@ (80018b0 <_sbrk+0x64>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d102      	bne.n	800186e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001868:	4b11      	ldr	r3, [pc, #68]	@ (80018b0 <_sbrk+0x64>)
 800186a:	4a12      	ldr	r2, [pc, #72]	@ (80018b4 <_sbrk+0x68>)
 800186c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800186e:	4b10      	ldr	r3, [pc, #64]	@ (80018b0 <_sbrk+0x64>)
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	4413      	add	r3, r2
 8001876:	693a      	ldr	r2, [r7, #16]
 8001878:	429a      	cmp	r2, r3
 800187a:	d207      	bcs.n	800188c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800187c:	f000 f9b4 	bl	8001be8 <__errno>
 8001880:	4603      	mov	r3, r0
 8001882:	220c      	movs	r2, #12
 8001884:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001886:	f04f 33ff 	mov.w	r3, #4294967295
 800188a:	e009      	b.n	80018a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800188c:	4b08      	ldr	r3, [pc, #32]	@ (80018b0 <_sbrk+0x64>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001892:	4b07      	ldr	r3, [pc, #28]	@ (80018b0 <_sbrk+0x64>)
 8001894:	681a      	ldr	r2, [r3, #0]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	4413      	add	r3, r2
 800189a:	4a05      	ldr	r2, [pc, #20]	@ (80018b0 <_sbrk+0x64>)
 800189c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800189e:	68fb      	ldr	r3, [r7, #12]
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	3718      	adds	r7, #24
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	20020000 	.word	0x20020000
 80018ac:	00000400 	.word	0x00000400
 80018b0:	20000084 	.word	0x20000084
 80018b4:	200001d8 	.word	0x200001d8

080018b8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80018b8:	480d      	ldr	r0, [pc, #52]	@ (80018f0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80018ba:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80018bc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018c0:	480c      	ldr	r0, [pc, #48]	@ (80018f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80018c2:	490d      	ldr	r1, [pc, #52]	@ (80018f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80018c4:	4a0d      	ldr	r2, [pc, #52]	@ (80018fc <LoopForever+0xe>)
  movs r3, #0
 80018c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018c8:	e002      	b.n	80018d0 <LoopCopyDataInit>

080018ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018ce:	3304      	adds	r3, #4

080018d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018d4:	d3f9      	bcc.n	80018ca <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018d6:	4a0a      	ldr	r2, [pc, #40]	@ (8001900 <LoopForever+0x12>)
  ldr r4, =_ebss
 80018d8:	4c0a      	ldr	r4, [pc, #40]	@ (8001904 <LoopForever+0x16>)
  movs r3, #0
 80018da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018dc:	e001      	b.n	80018e2 <LoopFillZerobss>

080018de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018e0:	3204      	adds	r2, #4

080018e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018e4:	d3fb      	bcc.n	80018de <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80018e6:	f000 f985 	bl	8001bf4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80018ea:	f7ff fe8f 	bl	800160c <main>

080018ee <LoopForever>:

LoopForever:
  b LoopForever
 80018ee:	e7fe      	b.n	80018ee <LoopForever>
  ldr   r0, =_estack
 80018f0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80018f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018f8:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80018fc:	08002840 	.word	0x08002840
  ldr r2, =_sbss
 8001900:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001904:	200001d4 	.word	0x200001d4

08001908 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001908:	e7fe      	b.n	8001908 <ADC_IRQHandler>
	...

0800190c <std>:
 800190c:	2300      	movs	r3, #0
 800190e:	b510      	push	{r4, lr}
 8001910:	4604      	mov	r4, r0
 8001912:	e9c0 3300 	strd	r3, r3, [r0]
 8001916:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800191a:	6083      	str	r3, [r0, #8]
 800191c:	8181      	strh	r1, [r0, #12]
 800191e:	6643      	str	r3, [r0, #100]	@ 0x64
 8001920:	81c2      	strh	r2, [r0, #14]
 8001922:	6183      	str	r3, [r0, #24]
 8001924:	4619      	mov	r1, r3
 8001926:	2208      	movs	r2, #8
 8001928:	305c      	adds	r0, #92	@ 0x5c
 800192a:	f000 f90e 	bl	8001b4a <memset>
 800192e:	4b0d      	ldr	r3, [pc, #52]	@ (8001964 <std+0x58>)
 8001930:	6263      	str	r3, [r4, #36]	@ 0x24
 8001932:	4b0d      	ldr	r3, [pc, #52]	@ (8001968 <std+0x5c>)
 8001934:	62a3      	str	r3, [r4, #40]	@ 0x28
 8001936:	4b0d      	ldr	r3, [pc, #52]	@ (800196c <std+0x60>)
 8001938:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800193a:	4b0d      	ldr	r3, [pc, #52]	@ (8001970 <std+0x64>)
 800193c:	6323      	str	r3, [r4, #48]	@ 0x30
 800193e:	4b0d      	ldr	r3, [pc, #52]	@ (8001974 <std+0x68>)
 8001940:	6224      	str	r4, [r4, #32]
 8001942:	429c      	cmp	r4, r3
 8001944:	d006      	beq.n	8001954 <std+0x48>
 8001946:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800194a:	4294      	cmp	r4, r2
 800194c:	d002      	beq.n	8001954 <std+0x48>
 800194e:	33d0      	adds	r3, #208	@ 0xd0
 8001950:	429c      	cmp	r4, r3
 8001952:	d105      	bne.n	8001960 <std+0x54>
 8001954:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8001958:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800195c:	f000 b96e 	b.w	8001c3c <__retarget_lock_init_recursive>
 8001960:	bd10      	pop	{r4, pc}
 8001962:	bf00      	nop
 8001964:	08001ac5 	.word	0x08001ac5
 8001968:	08001ae7 	.word	0x08001ae7
 800196c:	08001b1f 	.word	0x08001b1f
 8001970:	08001b43 	.word	0x08001b43
 8001974:	20000088 	.word	0x20000088

08001978 <stdio_exit_handler>:
 8001978:	4a02      	ldr	r2, [pc, #8]	@ (8001984 <stdio_exit_handler+0xc>)
 800197a:	4903      	ldr	r1, [pc, #12]	@ (8001988 <stdio_exit_handler+0x10>)
 800197c:	4803      	ldr	r0, [pc, #12]	@ (800198c <stdio_exit_handler+0x14>)
 800197e:	f000 b869 	b.w	8001a54 <_fwalk_sglue>
 8001982:	bf00      	nop
 8001984:	20000000 	.word	0x20000000
 8001988:	080024cd 	.word	0x080024cd
 800198c:	20000010 	.word	0x20000010

08001990 <cleanup_stdio>:
 8001990:	6841      	ldr	r1, [r0, #4]
 8001992:	4b0c      	ldr	r3, [pc, #48]	@ (80019c4 <cleanup_stdio+0x34>)
 8001994:	4299      	cmp	r1, r3
 8001996:	b510      	push	{r4, lr}
 8001998:	4604      	mov	r4, r0
 800199a:	d001      	beq.n	80019a0 <cleanup_stdio+0x10>
 800199c:	f000 fd96 	bl	80024cc <_fflush_r>
 80019a0:	68a1      	ldr	r1, [r4, #8]
 80019a2:	4b09      	ldr	r3, [pc, #36]	@ (80019c8 <cleanup_stdio+0x38>)
 80019a4:	4299      	cmp	r1, r3
 80019a6:	d002      	beq.n	80019ae <cleanup_stdio+0x1e>
 80019a8:	4620      	mov	r0, r4
 80019aa:	f000 fd8f 	bl	80024cc <_fflush_r>
 80019ae:	68e1      	ldr	r1, [r4, #12]
 80019b0:	4b06      	ldr	r3, [pc, #24]	@ (80019cc <cleanup_stdio+0x3c>)
 80019b2:	4299      	cmp	r1, r3
 80019b4:	d004      	beq.n	80019c0 <cleanup_stdio+0x30>
 80019b6:	4620      	mov	r0, r4
 80019b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80019bc:	f000 bd86 	b.w	80024cc <_fflush_r>
 80019c0:	bd10      	pop	{r4, pc}
 80019c2:	bf00      	nop
 80019c4:	20000088 	.word	0x20000088
 80019c8:	200000f0 	.word	0x200000f0
 80019cc:	20000158 	.word	0x20000158

080019d0 <global_stdio_init.part.0>:
 80019d0:	b510      	push	{r4, lr}
 80019d2:	4b0b      	ldr	r3, [pc, #44]	@ (8001a00 <global_stdio_init.part.0+0x30>)
 80019d4:	4c0b      	ldr	r4, [pc, #44]	@ (8001a04 <global_stdio_init.part.0+0x34>)
 80019d6:	4a0c      	ldr	r2, [pc, #48]	@ (8001a08 <global_stdio_init.part.0+0x38>)
 80019d8:	601a      	str	r2, [r3, #0]
 80019da:	4620      	mov	r0, r4
 80019dc:	2200      	movs	r2, #0
 80019de:	2104      	movs	r1, #4
 80019e0:	f7ff ff94 	bl	800190c <std>
 80019e4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80019e8:	2201      	movs	r2, #1
 80019ea:	2109      	movs	r1, #9
 80019ec:	f7ff ff8e 	bl	800190c <std>
 80019f0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80019f4:	2202      	movs	r2, #2
 80019f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80019fa:	2112      	movs	r1, #18
 80019fc:	f7ff bf86 	b.w	800190c <std>
 8001a00:	200001c0 	.word	0x200001c0
 8001a04:	20000088 	.word	0x20000088
 8001a08:	08001979 	.word	0x08001979

08001a0c <__sfp_lock_acquire>:
 8001a0c:	4801      	ldr	r0, [pc, #4]	@ (8001a14 <__sfp_lock_acquire+0x8>)
 8001a0e:	f000 b916 	b.w	8001c3e <__retarget_lock_acquire_recursive>
 8001a12:	bf00      	nop
 8001a14:	200001c9 	.word	0x200001c9

08001a18 <__sfp_lock_release>:
 8001a18:	4801      	ldr	r0, [pc, #4]	@ (8001a20 <__sfp_lock_release+0x8>)
 8001a1a:	f000 b911 	b.w	8001c40 <__retarget_lock_release_recursive>
 8001a1e:	bf00      	nop
 8001a20:	200001c9 	.word	0x200001c9

08001a24 <__sinit>:
 8001a24:	b510      	push	{r4, lr}
 8001a26:	4604      	mov	r4, r0
 8001a28:	f7ff fff0 	bl	8001a0c <__sfp_lock_acquire>
 8001a2c:	6a23      	ldr	r3, [r4, #32]
 8001a2e:	b11b      	cbz	r3, 8001a38 <__sinit+0x14>
 8001a30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001a34:	f7ff bff0 	b.w	8001a18 <__sfp_lock_release>
 8001a38:	4b04      	ldr	r3, [pc, #16]	@ (8001a4c <__sinit+0x28>)
 8001a3a:	6223      	str	r3, [r4, #32]
 8001a3c:	4b04      	ldr	r3, [pc, #16]	@ (8001a50 <__sinit+0x2c>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d1f5      	bne.n	8001a30 <__sinit+0xc>
 8001a44:	f7ff ffc4 	bl	80019d0 <global_stdio_init.part.0>
 8001a48:	e7f2      	b.n	8001a30 <__sinit+0xc>
 8001a4a:	bf00      	nop
 8001a4c:	08001991 	.word	0x08001991
 8001a50:	200001c0 	.word	0x200001c0

08001a54 <_fwalk_sglue>:
 8001a54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001a58:	4607      	mov	r7, r0
 8001a5a:	4688      	mov	r8, r1
 8001a5c:	4614      	mov	r4, r2
 8001a5e:	2600      	movs	r6, #0
 8001a60:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001a64:	f1b9 0901 	subs.w	r9, r9, #1
 8001a68:	d505      	bpl.n	8001a76 <_fwalk_sglue+0x22>
 8001a6a:	6824      	ldr	r4, [r4, #0]
 8001a6c:	2c00      	cmp	r4, #0
 8001a6e:	d1f7      	bne.n	8001a60 <_fwalk_sglue+0xc>
 8001a70:	4630      	mov	r0, r6
 8001a72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001a76:	89ab      	ldrh	r3, [r5, #12]
 8001a78:	2b01      	cmp	r3, #1
 8001a7a:	d907      	bls.n	8001a8c <_fwalk_sglue+0x38>
 8001a7c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001a80:	3301      	adds	r3, #1
 8001a82:	d003      	beq.n	8001a8c <_fwalk_sglue+0x38>
 8001a84:	4629      	mov	r1, r5
 8001a86:	4638      	mov	r0, r7
 8001a88:	47c0      	blx	r8
 8001a8a:	4306      	orrs	r6, r0
 8001a8c:	3568      	adds	r5, #104	@ 0x68
 8001a8e:	e7e9      	b.n	8001a64 <_fwalk_sglue+0x10>

08001a90 <iprintf>:
 8001a90:	b40f      	push	{r0, r1, r2, r3}
 8001a92:	b507      	push	{r0, r1, r2, lr}
 8001a94:	4906      	ldr	r1, [pc, #24]	@ (8001ab0 <iprintf+0x20>)
 8001a96:	ab04      	add	r3, sp, #16
 8001a98:	6808      	ldr	r0, [r1, #0]
 8001a9a:	f853 2b04 	ldr.w	r2, [r3], #4
 8001a9e:	6881      	ldr	r1, [r0, #8]
 8001aa0:	9301      	str	r3, [sp, #4]
 8001aa2:	f000 f9ef 	bl	8001e84 <_vfiprintf_r>
 8001aa6:	b003      	add	sp, #12
 8001aa8:	f85d eb04 	ldr.w	lr, [sp], #4
 8001aac:	b004      	add	sp, #16
 8001aae:	4770      	bx	lr
 8001ab0:	2000000c 	.word	0x2000000c

08001ab4 <putchar>:
 8001ab4:	4b02      	ldr	r3, [pc, #8]	@ (8001ac0 <putchar+0xc>)
 8001ab6:	4601      	mov	r1, r0
 8001ab8:	6818      	ldr	r0, [r3, #0]
 8001aba:	6882      	ldr	r2, [r0, #8]
 8001abc:	f000 bd2e 	b.w	800251c <_putc_r>
 8001ac0:	2000000c 	.word	0x2000000c

08001ac4 <__sread>:
 8001ac4:	b510      	push	{r4, lr}
 8001ac6:	460c      	mov	r4, r1
 8001ac8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001acc:	f000 f868 	bl	8001ba0 <_read_r>
 8001ad0:	2800      	cmp	r0, #0
 8001ad2:	bfab      	itete	ge
 8001ad4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8001ad6:	89a3      	ldrhlt	r3, [r4, #12]
 8001ad8:	181b      	addge	r3, r3, r0
 8001ada:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8001ade:	bfac      	ite	ge
 8001ae0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8001ae2:	81a3      	strhlt	r3, [r4, #12]
 8001ae4:	bd10      	pop	{r4, pc}

08001ae6 <__swrite>:
 8001ae6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001aea:	461f      	mov	r7, r3
 8001aec:	898b      	ldrh	r3, [r1, #12]
 8001aee:	05db      	lsls	r3, r3, #23
 8001af0:	4605      	mov	r5, r0
 8001af2:	460c      	mov	r4, r1
 8001af4:	4616      	mov	r6, r2
 8001af6:	d505      	bpl.n	8001b04 <__swrite+0x1e>
 8001af8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001afc:	2302      	movs	r3, #2
 8001afe:	2200      	movs	r2, #0
 8001b00:	f000 f83c 	bl	8001b7c <_lseek_r>
 8001b04:	89a3      	ldrh	r3, [r4, #12]
 8001b06:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001b0a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001b0e:	81a3      	strh	r3, [r4, #12]
 8001b10:	4632      	mov	r2, r6
 8001b12:	463b      	mov	r3, r7
 8001b14:	4628      	mov	r0, r5
 8001b16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001b1a:	f000 b853 	b.w	8001bc4 <_write_r>

08001b1e <__sseek>:
 8001b1e:	b510      	push	{r4, lr}
 8001b20:	460c      	mov	r4, r1
 8001b22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001b26:	f000 f829 	bl	8001b7c <_lseek_r>
 8001b2a:	1c43      	adds	r3, r0, #1
 8001b2c:	89a3      	ldrh	r3, [r4, #12]
 8001b2e:	bf15      	itete	ne
 8001b30:	6560      	strne	r0, [r4, #84]	@ 0x54
 8001b32:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8001b36:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8001b3a:	81a3      	strheq	r3, [r4, #12]
 8001b3c:	bf18      	it	ne
 8001b3e:	81a3      	strhne	r3, [r4, #12]
 8001b40:	bd10      	pop	{r4, pc}

08001b42 <__sclose>:
 8001b42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001b46:	f000 b809 	b.w	8001b5c <_close_r>

08001b4a <memset>:
 8001b4a:	4402      	add	r2, r0
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d100      	bne.n	8001b54 <memset+0xa>
 8001b52:	4770      	bx	lr
 8001b54:	f803 1b01 	strb.w	r1, [r3], #1
 8001b58:	e7f9      	b.n	8001b4e <memset+0x4>
	...

08001b5c <_close_r>:
 8001b5c:	b538      	push	{r3, r4, r5, lr}
 8001b5e:	4d06      	ldr	r5, [pc, #24]	@ (8001b78 <_close_r+0x1c>)
 8001b60:	2300      	movs	r3, #0
 8001b62:	4604      	mov	r4, r0
 8001b64:	4608      	mov	r0, r1
 8001b66:	602b      	str	r3, [r5, #0]
 8001b68:	f7ff fe3f 	bl	80017ea <_close>
 8001b6c:	1c43      	adds	r3, r0, #1
 8001b6e:	d102      	bne.n	8001b76 <_close_r+0x1a>
 8001b70:	682b      	ldr	r3, [r5, #0]
 8001b72:	b103      	cbz	r3, 8001b76 <_close_r+0x1a>
 8001b74:	6023      	str	r3, [r4, #0]
 8001b76:	bd38      	pop	{r3, r4, r5, pc}
 8001b78:	200001c4 	.word	0x200001c4

08001b7c <_lseek_r>:
 8001b7c:	b538      	push	{r3, r4, r5, lr}
 8001b7e:	4d07      	ldr	r5, [pc, #28]	@ (8001b9c <_lseek_r+0x20>)
 8001b80:	4604      	mov	r4, r0
 8001b82:	4608      	mov	r0, r1
 8001b84:	4611      	mov	r1, r2
 8001b86:	2200      	movs	r2, #0
 8001b88:	602a      	str	r2, [r5, #0]
 8001b8a:	461a      	mov	r2, r3
 8001b8c:	f7ff fe51 	bl	8001832 <_lseek>
 8001b90:	1c43      	adds	r3, r0, #1
 8001b92:	d102      	bne.n	8001b9a <_lseek_r+0x1e>
 8001b94:	682b      	ldr	r3, [r5, #0]
 8001b96:	b103      	cbz	r3, 8001b9a <_lseek_r+0x1e>
 8001b98:	6023      	str	r3, [r4, #0]
 8001b9a:	bd38      	pop	{r3, r4, r5, pc}
 8001b9c:	200001c4 	.word	0x200001c4

08001ba0 <_read_r>:
 8001ba0:	b538      	push	{r3, r4, r5, lr}
 8001ba2:	4d07      	ldr	r5, [pc, #28]	@ (8001bc0 <_read_r+0x20>)
 8001ba4:	4604      	mov	r4, r0
 8001ba6:	4608      	mov	r0, r1
 8001ba8:	4611      	mov	r1, r2
 8001baa:	2200      	movs	r2, #0
 8001bac:	602a      	str	r2, [r5, #0]
 8001bae:	461a      	mov	r2, r3
 8001bb0:	f7ff fde2 	bl	8001778 <_read>
 8001bb4:	1c43      	adds	r3, r0, #1
 8001bb6:	d102      	bne.n	8001bbe <_read_r+0x1e>
 8001bb8:	682b      	ldr	r3, [r5, #0]
 8001bba:	b103      	cbz	r3, 8001bbe <_read_r+0x1e>
 8001bbc:	6023      	str	r3, [r4, #0]
 8001bbe:	bd38      	pop	{r3, r4, r5, pc}
 8001bc0:	200001c4 	.word	0x200001c4

08001bc4 <_write_r>:
 8001bc4:	b538      	push	{r3, r4, r5, lr}
 8001bc6:	4d07      	ldr	r5, [pc, #28]	@ (8001be4 <_write_r+0x20>)
 8001bc8:	4604      	mov	r4, r0
 8001bca:	4608      	mov	r0, r1
 8001bcc:	4611      	mov	r1, r2
 8001bce:	2200      	movs	r2, #0
 8001bd0:	602a      	str	r2, [r5, #0]
 8001bd2:	461a      	mov	r2, r3
 8001bd4:	f7ff fded 	bl	80017b2 <_write>
 8001bd8:	1c43      	adds	r3, r0, #1
 8001bda:	d102      	bne.n	8001be2 <_write_r+0x1e>
 8001bdc:	682b      	ldr	r3, [r5, #0]
 8001bde:	b103      	cbz	r3, 8001be2 <_write_r+0x1e>
 8001be0:	6023      	str	r3, [r4, #0]
 8001be2:	bd38      	pop	{r3, r4, r5, pc}
 8001be4:	200001c4 	.word	0x200001c4

08001be8 <__errno>:
 8001be8:	4b01      	ldr	r3, [pc, #4]	@ (8001bf0 <__errno+0x8>)
 8001bea:	6818      	ldr	r0, [r3, #0]
 8001bec:	4770      	bx	lr
 8001bee:	bf00      	nop
 8001bf0:	2000000c 	.word	0x2000000c

08001bf4 <__libc_init_array>:
 8001bf4:	b570      	push	{r4, r5, r6, lr}
 8001bf6:	4d0d      	ldr	r5, [pc, #52]	@ (8001c2c <__libc_init_array+0x38>)
 8001bf8:	4c0d      	ldr	r4, [pc, #52]	@ (8001c30 <__libc_init_array+0x3c>)
 8001bfa:	1b64      	subs	r4, r4, r5
 8001bfc:	10a4      	asrs	r4, r4, #2
 8001bfe:	2600      	movs	r6, #0
 8001c00:	42a6      	cmp	r6, r4
 8001c02:	d109      	bne.n	8001c18 <__libc_init_array+0x24>
 8001c04:	4d0b      	ldr	r5, [pc, #44]	@ (8001c34 <__libc_init_array+0x40>)
 8001c06:	4c0c      	ldr	r4, [pc, #48]	@ (8001c38 <__libc_init_array+0x44>)
 8001c08:	f000 fde4 	bl	80027d4 <_init>
 8001c0c:	1b64      	subs	r4, r4, r5
 8001c0e:	10a4      	asrs	r4, r4, #2
 8001c10:	2600      	movs	r6, #0
 8001c12:	42a6      	cmp	r6, r4
 8001c14:	d105      	bne.n	8001c22 <__libc_init_array+0x2e>
 8001c16:	bd70      	pop	{r4, r5, r6, pc}
 8001c18:	f855 3b04 	ldr.w	r3, [r5], #4
 8001c1c:	4798      	blx	r3
 8001c1e:	3601      	adds	r6, #1
 8001c20:	e7ee      	b.n	8001c00 <__libc_init_array+0xc>
 8001c22:	f855 3b04 	ldr.w	r3, [r5], #4
 8001c26:	4798      	blx	r3
 8001c28:	3601      	adds	r6, #1
 8001c2a:	e7f2      	b.n	8001c12 <__libc_init_array+0x1e>
 8001c2c:	08002838 	.word	0x08002838
 8001c30:	08002838 	.word	0x08002838
 8001c34:	08002838 	.word	0x08002838
 8001c38:	0800283c 	.word	0x0800283c

08001c3c <__retarget_lock_init_recursive>:
 8001c3c:	4770      	bx	lr

08001c3e <__retarget_lock_acquire_recursive>:
 8001c3e:	4770      	bx	lr

08001c40 <__retarget_lock_release_recursive>:
 8001c40:	4770      	bx	lr
	...

08001c44 <_free_r>:
 8001c44:	b538      	push	{r3, r4, r5, lr}
 8001c46:	4605      	mov	r5, r0
 8001c48:	2900      	cmp	r1, #0
 8001c4a:	d041      	beq.n	8001cd0 <_free_r+0x8c>
 8001c4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001c50:	1f0c      	subs	r4, r1, #4
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	bfb8      	it	lt
 8001c56:	18e4      	addlt	r4, r4, r3
 8001c58:	f000 f8e0 	bl	8001e1c <__malloc_lock>
 8001c5c:	4a1d      	ldr	r2, [pc, #116]	@ (8001cd4 <_free_r+0x90>)
 8001c5e:	6813      	ldr	r3, [r2, #0]
 8001c60:	b933      	cbnz	r3, 8001c70 <_free_r+0x2c>
 8001c62:	6063      	str	r3, [r4, #4]
 8001c64:	6014      	str	r4, [r2, #0]
 8001c66:	4628      	mov	r0, r5
 8001c68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001c6c:	f000 b8dc 	b.w	8001e28 <__malloc_unlock>
 8001c70:	42a3      	cmp	r3, r4
 8001c72:	d908      	bls.n	8001c86 <_free_r+0x42>
 8001c74:	6820      	ldr	r0, [r4, #0]
 8001c76:	1821      	adds	r1, r4, r0
 8001c78:	428b      	cmp	r3, r1
 8001c7a:	bf01      	itttt	eq
 8001c7c:	6819      	ldreq	r1, [r3, #0]
 8001c7e:	685b      	ldreq	r3, [r3, #4]
 8001c80:	1809      	addeq	r1, r1, r0
 8001c82:	6021      	streq	r1, [r4, #0]
 8001c84:	e7ed      	b.n	8001c62 <_free_r+0x1e>
 8001c86:	461a      	mov	r2, r3
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	b10b      	cbz	r3, 8001c90 <_free_r+0x4c>
 8001c8c:	42a3      	cmp	r3, r4
 8001c8e:	d9fa      	bls.n	8001c86 <_free_r+0x42>
 8001c90:	6811      	ldr	r1, [r2, #0]
 8001c92:	1850      	adds	r0, r2, r1
 8001c94:	42a0      	cmp	r0, r4
 8001c96:	d10b      	bne.n	8001cb0 <_free_r+0x6c>
 8001c98:	6820      	ldr	r0, [r4, #0]
 8001c9a:	4401      	add	r1, r0
 8001c9c:	1850      	adds	r0, r2, r1
 8001c9e:	4283      	cmp	r3, r0
 8001ca0:	6011      	str	r1, [r2, #0]
 8001ca2:	d1e0      	bne.n	8001c66 <_free_r+0x22>
 8001ca4:	6818      	ldr	r0, [r3, #0]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	6053      	str	r3, [r2, #4]
 8001caa:	4408      	add	r0, r1
 8001cac:	6010      	str	r0, [r2, #0]
 8001cae:	e7da      	b.n	8001c66 <_free_r+0x22>
 8001cb0:	d902      	bls.n	8001cb8 <_free_r+0x74>
 8001cb2:	230c      	movs	r3, #12
 8001cb4:	602b      	str	r3, [r5, #0]
 8001cb6:	e7d6      	b.n	8001c66 <_free_r+0x22>
 8001cb8:	6820      	ldr	r0, [r4, #0]
 8001cba:	1821      	adds	r1, r4, r0
 8001cbc:	428b      	cmp	r3, r1
 8001cbe:	bf04      	itt	eq
 8001cc0:	6819      	ldreq	r1, [r3, #0]
 8001cc2:	685b      	ldreq	r3, [r3, #4]
 8001cc4:	6063      	str	r3, [r4, #4]
 8001cc6:	bf04      	itt	eq
 8001cc8:	1809      	addeq	r1, r1, r0
 8001cca:	6021      	streq	r1, [r4, #0]
 8001ccc:	6054      	str	r4, [r2, #4]
 8001cce:	e7ca      	b.n	8001c66 <_free_r+0x22>
 8001cd0:	bd38      	pop	{r3, r4, r5, pc}
 8001cd2:	bf00      	nop
 8001cd4:	200001d0 	.word	0x200001d0

08001cd8 <sbrk_aligned>:
 8001cd8:	b570      	push	{r4, r5, r6, lr}
 8001cda:	4e0f      	ldr	r6, [pc, #60]	@ (8001d18 <sbrk_aligned+0x40>)
 8001cdc:	460c      	mov	r4, r1
 8001cde:	6831      	ldr	r1, [r6, #0]
 8001ce0:	4605      	mov	r5, r0
 8001ce2:	b911      	cbnz	r1, 8001cea <sbrk_aligned+0x12>
 8001ce4:	f000 fce2 	bl	80026ac <_sbrk_r>
 8001ce8:	6030      	str	r0, [r6, #0]
 8001cea:	4621      	mov	r1, r4
 8001cec:	4628      	mov	r0, r5
 8001cee:	f000 fcdd 	bl	80026ac <_sbrk_r>
 8001cf2:	1c43      	adds	r3, r0, #1
 8001cf4:	d103      	bne.n	8001cfe <sbrk_aligned+0x26>
 8001cf6:	f04f 34ff 	mov.w	r4, #4294967295
 8001cfa:	4620      	mov	r0, r4
 8001cfc:	bd70      	pop	{r4, r5, r6, pc}
 8001cfe:	1cc4      	adds	r4, r0, #3
 8001d00:	f024 0403 	bic.w	r4, r4, #3
 8001d04:	42a0      	cmp	r0, r4
 8001d06:	d0f8      	beq.n	8001cfa <sbrk_aligned+0x22>
 8001d08:	1a21      	subs	r1, r4, r0
 8001d0a:	4628      	mov	r0, r5
 8001d0c:	f000 fcce 	bl	80026ac <_sbrk_r>
 8001d10:	3001      	adds	r0, #1
 8001d12:	d1f2      	bne.n	8001cfa <sbrk_aligned+0x22>
 8001d14:	e7ef      	b.n	8001cf6 <sbrk_aligned+0x1e>
 8001d16:	bf00      	nop
 8001d18:	200001cc 	.word	0x200001cc

08001d1c <_malloc_r>:
 8001d1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001d20:	1ccd      	adds	r5, r1, #3
 8001d22:	f025 0503 	bic.w	r5, r5, #3
 8001d26:	3508      	adds	r5, #8
 8001d28:	2d0c      	cmp	r5, #12
 8001d2a:	bf38      	it	cc
 8001d2c:	250c      	movcc	r5, #12
 8001d2e:	2d00      	cmp	r5, #0
 8001d30:	4606      	mov	r6, r0
 8001d32:	db01      	blt.n	8001d38 <_malloc_r+0x1c>
 8001d34:	42a9      	cmp	r1, r5
 8001d36:	d904      	bls.n	8001d42 <_malloc_r+0x26>
 8001d38:	230c      	movs	r3, #12
 8001d3a:	6033      	str	r3, [r6, #0]
 8001d3c:	2000      	movs	r0, #0
 8001d3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001d42:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001e18 <_malloc_r+0xfc>
 8001d46:	f000 f869 	bl	8001e1c <__malloc_lock>
 8001d4a:	f8d8 3000 	ldr.w	r3, [r8]
 8001d4e:	461c      	mov	r4, r3
 8001d50:	bb44      	cbnz	r4, 8001da4 <_malloc_r+0x88>
 8001d52:	4629      	mov	r1, r5
 8001d54:	4630      	mov	r0, r6
 8001d56:	f7ff ffbf 	bl	8001cd8 <sbrk_aligned>
 8001d5a:	1c43      	adds	r3, r0, #1
 8001d5c:	4604      	mov	r4, r0
 8001d5e:	d158      	bne.n	8001e12 <_malloc_r+0xf6>
 8001d60:	f8d8 4000 	ldr.w	r4, [r8]
 8001d64:	4627      	mov	r7, r4
 8001d66:	2f00      	cmp	r7, #0
 8001d68:	d143      	bne.n	8001df2 <_malloc_r+0xd6>
 8001d6a:	2c00      	cmp	r4, #0
 8001d6c:	d04b      	beq.n	8001e06 <_malloc_r+0xea>
 8001d6e:	6823      	ldr	r3, [r4, #0]
 8001d70:	4639      	mov	r1, r7
 8001d72:	4630      	mov	r0, r6
 8001d74:	eb04 0903 	add.w	r9, r4, r3
 8001d78:	f000 fc98 	bl	80026ac <_sbrk_r>
 8001d7c:	4581      	cmp	r9, r0
 8001d7e:	d142      	bne.n	8001e06 <_malloc_r+0xea>
 8001d80:	6821      	ldr	r1, [r4, #0]
 8001d82:	1a6d      	subs	r5, r5, r1
 8001d84:	4629      	mov	r1, r5
 8001d86:	4630      	mov	r0, r6
 8001d88:	f7ff ffa6 	bl	8001cd8 <sbrk_aligned>
 8001d8c:	3001      	adds	r0, #1
 8001d8e:	d03a      	beq.n	8001e06 <_malloc_r+0xea>
 8001d90:	6823      	ldr	r3, [r4, #0]
 8001d92:	442b      	add	r3, r5
 8001d94:	6023      	str	r3, [r4, #0]
 8001d96:	f8d8 3000 	ldr.w	r3, [r8]
 8001d9a:	685a      	ldr	r2, [r3, #4]
 8001d9c:	bb62      	cbnz	r2, 8001df8 <_malloc_r+0xdc>
 8001d9e:	f8c8 7000 	str.w	r7, [r8]
 8001da2:	e00f      	b.n	8001dc4 <_malloc_r+0xa8>
 8001da4:	6822      	ldr	r2, [r4, #0]
 8001da6:	1b52      	subs	r2, r2, r5
 8001da8:	d420      	bmi.n	8001dec <_malloc_r+0xd0>
 8001daa:	2a0b      	cmp	r2, #11
 8001dac:	d917      	bls.n	8001dde <_malloc_r+0xc2>
 8001dae:	1961      	adds	r1, r4, r5
 8001db0:	42a3      	cmp	r3, r4
 8001db2:	6025      	str	r5, [r4, #0]
 8001db4:	bf18      	it	ne
 8001db6:	6059      	strne	r1, [r3, #4]
 8001db8:	6863      	ldr	r3, [r4, #4]
 8001dba:	bf08      	it	eq
 8001dbc:	f8c8 1000 	streq.w	r1, [r8]
 8001dc0:	5162      	str	r2, [r4, r5]
 8001dc2:	604b      	str	r3, [r1, #4]
 8001dc4:	4630      	mov	r0, r6
 8001dc6:	f000 f82f 	bl	8001e28 <__malloc_unlock>
 8001dca:	f104 000b 	add.w	r0, r4, #11
 8001dce:	1d23      	adds	r3, r4, #4
 8001dd0:	f020 0007 	bic.w	r0, r0, #7
 8001dd4:	1ac2      	subs	r2, r0, r3
 8001dd6:	bf1c      	itt	ne
 8001dd8:	1a1b      	subne	r3, r3, r0
 8001dda:	50a3      	strne	r3, [r4, r2]
 8001ddc:	e7af      	b.n	8001d3e <_malloc_r+0x22>
 8001dde:	6862      	ldr	r2, [r4, #4]
 8001de0:	42a3      	cmp	r3, r4
 8001de2:	bf0c      	ite	eq
 8001de4:	f8c8 2000 	streq.w	r2, [r8]
 8001de8:	605a      	strne	r2, [r3, #4]
 8001dea:	e7eb      	b.n	8001dc4 <_malloc_r+0xa8>
 8001dec:	4623      	mov	r3, r4
 8001dee:	6864      	ldr	r4, [r4, #4]
 8001df0:	e7ae      	b.n	8001d50 <_malloc_r+0x34>
 8001df2:	463c      	mov	r4, r7
 8001df4:	687f      	ldr	r7, [r7, #4]
 8001df6:	e7b6      	b.n	8001d66 <_malloc_r+0x4a>
 8001df8:	461a      	mov	r2, r3
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	42a3      	cmp	r3, r4
 8001dfe:	d1fb      	bne.n	8001df8 <_malloc_r+0xdc>
 8001e00:	2300      	movs	r3, #0
 8001e02:	6053      	str	r3, [r2, #4]
 8001e04:	e7de      	b.n	8001dc4 <_malloc_r+0xa8>
 8001e06:	230c      	movs	r3, #12
 8001e08:	6033      	str	r3, [r6, #0]
 8001e0a:	4630      	mov	r0, r6
 8001e0c:	f000 f80c 	bl	8001e28 <__malloc_unlock>
 8001e10:	e794      	b.n	8001d3c <_malloc_r+0x20>
 8001e12:	6005      	str	r5, [r0, #0]
 8001e14:	e7d6      	b.n	8001dc4 <_malloc_r+0xa8>
 8001e16:	bf00      	nop
 8001e18:	200001d0 	.word	0x200001d0

08001e1c <__malloc_lock>:
 8001e1c:	4801      	ldr	r0, [pc, #4]	@ (8001e24 <__malloc_lock+0x8>)
 8001e1e:	f7ff bf0e 	b.w	8001c3e <__retarget_lock_acquire_recursive>
 8001e22:	bf00      	nop
 8001e24:	200001c8 	.word	0x200001c8

08001e28 <__malloc_unlock>:
 8001e28:	4801      	ldr	r0, [pc, #4]	@ (8001e30 <__malloc_unlock+0x8>)
 8001e2a:	f7ff bf09 	b.w	8001c40 <__retarget_lock_release_recursive>
 8001e2e:	bf00      	nop
 8001e30:	200001c8 	.word	0x200001c8

08001e34 <__sfputc_r>:
 8001e34:	6893      	ldr	r3, [r2, #8]
 8001e36:	3b01      	subs	r3, #1
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	b410      	push	{r4}
 8001e3c:	6093      	str	r3, [r2, #8]
 8001e3e:	da07      	bge.n	8001e50 <__sfputc_r+0x1c>
 8001e40:	6994      	ldr	r4, [r2, #24]
 8001e42:	42a3      	cmp	r3, r4
 8001e44:	db01      	blt.n	8001e4a <__sfputc_r+0x16>
 8001e46:	290a      	cmp	r1, #10
 8001e48:	d102      	bne.n	8001e50 <__sfputc_r+0x1c>
 8001e4a:	bc10      	pop	{r4}
 8001e4c:	f000 bb9a 	b.w	8002584 <__swbuf_r>
 8001e50:	6813      	ldr	r3, [r2, #0]
 8001e52:	1c58      	adds	r0, r3, #1
 8001e54:	6010      	str	r0, [r2, #0]
 8001e56:	7019      	strb	r1, [r3, #0]
 8001e58:	4608      	mov	r0, r1
 8001e5a:	bc10      	pop	{r4}
 8001e5c:	4770      	bx	lr

08001e5e <__sfputs_r>:
 8001e5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e60:	4606      	mov	r6, r0
 8001e62:	460f      	mov	r7, r1
 8001e64:	4614      	mov	r4, r2
 8001e66:	18d5      	adds	r5, r2, r3
 8001e68:	42ac      	cmp	r4, r5
 8001e6a:	d101      	bne.n	8001e70 <__sfputs_r+0x12>
 8001e6c:	2000      	movs	r0, #0
 8001e6e:	e007      	b.n	8001e80 <__sfputs_r+0x22>
 8001e70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001e74:	463a      	mov	r2, r7
 8001e76:	4630      	mov	r0, r6
 8001e78:	f7ff ffdc 	bl	8001e34 <__sfputc_r>
 8001e7c:	1c43      	adds	r3, r0, #1
 8001e7e:	d1f3      	bne.n	8001e68 <__sfputs_r+0xa>
 8001e80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001e84 <_vfiprintf_r>:
 8001e84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e88:	460d      	mov	r5, r1
 8001e8a:	b09d      	sub	sp, #116	@ 0x74
 8001e8c:	4614      	mov	r4, r2
 8001e8e:	4698      	mov	r8, r3
 8001e90:	4606      	mov	r6, r0
 8001e92:	b118      	cbz	r0, 8001e9c <_vfiprintf_r+0x18>
 8001e94:	6a03      	ldr	r3, [r0, #32]
 8001e96:	b90b      	cbnz	r3, 8001e9c <_vfiprintf_r+0x18>
 8001e98:	f7ff fdc4 	bl	8001a24 <__sinit>
 8001e9c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001e9e:	07d9      	lsls	r1, r3, #31
 8001ea0:	d405      	bmi.n	8001eae <_vfiprintf_r+0x2a>
 8001ea2:	89ab      	ldrh	r3, [r5, #12]
 8001ea4:	059a      	lsls	r2, r3, #22
 8001ea6:	d402      	bmi.n	8001eae <_vfiprintf_r+0x2a>
 8001ea8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001eaa:	f7ff fec8 	bl	8001c3e <__retarget_lock_acquire_recursive>
 8001eae:	89ab      	ldrh	r3, [r5, #12]
 8001eb0:	071b      	lsls	r3, r3, #28
 8001eb2:	d501      	bpl.n	8001eb8 <_vfiprintf_r+0x34>
 8001eb4:	692b      	ldr	r3, [r5, #16]
 8001eb6:	b99b      	cbnz	r3, 8001ee0 <_vfiprintf_r+0x5c>
 8001eb8:	4629      	mov	r1, r5
 8001eba:	4630      	mov	r0, r6
 8001ebc:	f000 fba0 	bl	8002600 <__swsetup_r>
 8001ec0:	b170      	cbz	r0, 8001ee0 <_vfiprintf_r+0x5c>
 8001ec2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001ec4:	07dc      	lsls	r4, r3, #31
 8001ec6:	d504      	bpl.n	8001ed2 <_vfiprintf_r+0x4e>
 8001ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8001ecc:	b01d      	add	sp, #116	@ 0x74
 8001ece:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001ed2:	89ab      	ldrh	r3, [r5, #12]
 8001ed4:	0598      	lsls	r0, r3, #22
 8001ed6:	d4f7      	bmi.n	8001ec8 <_vfiprintf_r+0x44>
 8001ed8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001eda:	f7ff feb1 	bl	8001c40 <__retarget_lock_release_recursive>
 8001ede:	e7f3      	b.n	8001ec8 <_vfiprintf_r+0x44>
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	9309      	str	r3, [sp, #36]	@ 0x24
 8001ee4:	2320      	movs	r3, #32
 8001ee6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8001eea:	f8cd 800c 	str.w	r8, [sp, #12]
 8001eee:	2330      	movs	r3, #48	@ 0x30
 8001ef0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80020a0 <_vfiprintf_r+0x21c>
 8001ef4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8001ef8:	f04f 0901 	mov.w	r9, #1
 8001efc:	4623      	mov	r3, r4
 8001efe:	469a      	mov	sl, r3
 8001f00:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001f04:	b10a      	cbz	r2, 8001f0a <_vfiprintf_r+0x86>
 8001f06:	2a25      	cmp	r2, #37	@ 0x25
 8001f08:	d1f9      	bne.n	8001efe <_vfiprintf_r+0x7a>
 8001f0a:	ebba 0b04 	subs.w	fp, sl, r4
 8001f0e:	d00b      	beq.n	8001f28 <_vfiprintf_r+0xa4>
 8001f10:	465b      	mov	r3, fp
 8001f12:	4622      	mov	r2, r4
 8001f14:	4629      	mov	r1, r5
 8001f16:	4630      	mov	r0, r6
 8001f18:	f7ff ffa1 	bl	8001e5e <__sfputs_r>
 8001f1c:	3001      	adds	r0, #1
 8001f1e:	f000 80a7 	beq.w	8002070 <_vfiprintf_r+0x1ec>
 8001f22:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8001f24:	445a      	add	r2, fp
 8001f26:	9209      	str	r2, [sp, #36]	@ 0x24
 8001f28:	f89a 3000 	ldrb.w	r3, [sl]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	f000 809f 	beq.w	8002070 <_vfiprintf_r+0x1ec>
 8001f32:	2300      	movs	r3, #0
 8001f34:	f04f 32ff 	mov.w	r2, #4294967295
 8001f38:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001f3c:	f10a 0a01 	add.w	sl, sl, #1
 8001f40:	9304      	str	r3, [sp, #16]
 8001f42:	9307      	str	r3, [sp, #28]
 8001f44:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8001f48:	931a      	str	r3, [sp, #104]	@ 0x68
 8001f4a:	4654      	mov	r4, sl
 8001f4c:	2205      	movs	r2, #5
 8001f4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001f52:	4853      	ldr	r0, [pc, #332]	@ (80020a0 <_vfiprintf_r+0x21c>)
 8001f54:	f7fe f95c 	bl	8000210 <memchr>
 8001f58:	9a04      	ldr	r2, [sp, #16]
 8001f5a:	b9d8      	cbnz	r0, 8001f94 <_vfiprintf_r+0x110>
 8001f5c:	06d1      	lsls	r1, r2, #27
 8001f5e:	bf44      	itt	mi
 8001f60:	2320      	movmi	r3, #32
 8001f62:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001f66:	0713      	lsls	r3, r2, #28
 8001f68:	bf44      	itt	mi
 8001f6a:	232b      	movmi	r3, #43	@ 0x2b
 8001f6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001f70:	f89a 3000 	ldrb.w	r3, [sl]
 8001f74:	2b2a      	cmp	r3, #42	@ 0x2a
 8001f76:	d015      	beq.n	8001fa4 <_vfiprintf_r+0x120>
 8001f78:	9a07      	ldr	r2, [sp, #28]
 8001f7a:	4654      	mov	r4, sl
 8001f7c:	2000      	movs	r0, #0
 8001f7e:	f04f 0c0a 	mov.w	ip, #10
 8001f82:	4621      	mov	r1, r4
 8001f84:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001f88:	3b30      	subs	r3, #48	@ 0x30
 8001f8a:	2b09      	cmp	r3, #9
 8001f8c:	d94b      	bls.n	8002026 <_vfiprintf_r+0x1a2>
 8001f8e:	b1b0      	cbz	r0, 8001fbe <_vfiprintf_r+0x13a>
 8001f90:	9207      	str	r2, [sp, #28]
 8001f92:	e014      	b.n	8001fbe <_vfiprintf_r+0x13a>
 8001f94:	eba0 0308 	sub.w	r3, r0, r8
 8001f98:	fa09 f303 	lsl.w	r3, r9, r3
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	9304      	str	r3, [sp, #16]
 8001fa0:	46a2      	mov	sl, r4
 8001fa2:	e7d2      	b.n	8001f4a <_vfiprintf_r+0xc6>
 8001fa4:	9b03      	ldr	r3, [sp, #12]
 8001fa6:	1d19      	adds	r1, r3, #4
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	9103      	str	r1, [sp, #12]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	bfbb      	ittet	lt
 8001fb0:	425b      	neglt	r3, r3
 8001fb2:	f042 0202 	orrlt.w	r2, r2, #2
 8001fb6:	9307      	strge	r3, [sp, #28]
 8001fb8:	9307      	strlt	r3, [sp, #28]
 8001fba:	bfb8      	it	lt
 8001fbc:	9204      	strlt	r2, [sp, #16]
 8001fbe:	7823      	ldrb	r3, [r4, #0]
 8001fc0:	2b2e      	cmp	r3, #46	@ 0x2e
 8001fc2:	d10a      	bne.n	8001fda <_vfiprintf_r+0x156>
 8001fc4:	7863      	ldrb	r3, [r4, #1]
 8001fc6:	2b2a      	cmp	r3, #42	@ 0x2a
 8001fc8:	d132      	bne.n	8002030 <_vfiprintf_r+0x1ac>
 8001fca:	9b03      	ldr	r3, [sp, #12]
 8001fcc:	1d1a      	adds	r2, r3, #4
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	9203      	str	r2, [sp, #12]
 8001fd2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8001fd6:	3402      	adds	r4, #2
 8001fd8:	9305      	str	r3, [sp, #20]
 8001fda:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80020a4 <_vfiprintf_r+0x220>
 8001fde:	7821      	ldrb	r1, [r4, #0]
 8001fe0:	2203      	movs	r2, #3
 8001fe2:	4650      	mov	r0, sl
 8001fe4:	f7fe f914 	bl	8000210 <memchr>
 8001fe8:	b138      	cbz	r0, 8001ffa <_vfiprintf_r+0x176>
 8001fea:	9b04      	ldr	r3, [sp, #16]
 8001fec:	eba0 000a 	sub.w	r0, r0, sl
 8001ff0:	2240      	movs	r2, #64	@ 0x40
 8001ff2:	4082      	lsls	r2, r0
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	3401      	adds	r4, #1
 8001ff8:	9304      	str	r3, [sp, #16]
 8001ffa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001ffe:	482a      	ldr	r0, [pc, #168]	@ (80020a8 <_vfiprintf_r+0x224>)
 8002000:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002004:	2206      	movs	r2, #6
 8002006:	f7fe f903 	bl	8000210 <memchr>
 800200a:	2800      	cmp	r0, #0
 800200c:	d03f      	beq.n	800208e <_vfiprintf_r+0x20a>
 800200e:	4b27      	ldr	r3, [pc, #156]	@ (80020ac <_vfiprintf_r+0x228>)
 8002010:	bb1b      	cbnz	r3, 800205a <_vfiprintf_r+0x1d6>
 8002012:	9b03      	ldr	r3, [sp, #12]
 8002014:	3307      	adds	r3, #7
 8002016:	f023 0307 	bic.w	r3, r3, #7
 800201a:	3308      	adds	r3, #8
 800201c:	9303      	str	r3, [sp, #12]
 800201e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002020:	443b      	add	r3, r7
 8002022:	9309      	str	r3, [sp, #36]	@ 0x24
 8002024:	e76a      	b.n	8001efc <_vfiprintf_r+0x78>
 8002026:	fb0c 3202 	mla	r2, ip, r2, r3
 800202a:	460c      	mov	r4, r1
 800202c:	2001      	movs	r0, #1
 800202e:	e7a8      	b.n	8001f82 <_vfiprintf_r+0xfe>
 8002030:	2300      	movs	r3, #0
 8002032:	3401      	adds	r4, #1
 8002034:	9305      	str	r3, [sp, #20]
 8002036:	4619      	mov	r1, r3
 8002038:	f04f 0c0a 	mov.w	ip, #10
 800203c:	4620      	mov	r0, r4
 800203e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002042:	3a30      	subs	r2, #48	@ 0x30
 8002044:	2a09      	cmp	r2, #9
 8002046:	d903      	bls.n	8002050 <_vfiprintf_r+0x1cc>
 8002048:	2b00      	cmp	r3, #0
 800204a:	d0c6      	beq.n	8001fda <_vfiprintf_r+0x156>
 800204c:	9105      	str	r1, [sp, #20]
 800204e:	e7c4      	b.n	8001fda <_vfiprintf_r+0x156>
 8002050:	fb0c 2101 	mla	r1, ip, r1, r2
 8002054:	4604      	mov	r4, r0
 8002056:	2301      	movs	r3, #1
 8002058:	e7f0      	b.n	800203c <_vfiprintf_r+0x1b8>
 800205a:	ab03      	add	r3, sp, #12
 800205c:	9300      	str	r3, [sp, #0]
 800205e:	462a      	mov	r2, r5
 8002060:	4b13      	ldr	r3, [pc, #76]	@ (80020b0 <_vfiprintf_r+0x22c>)
 8002062:	a904      	add	r1, sp, #16
 8002064:	4630      	mov	r0, r6
 8002066:	f3af 8000 	nop.w
 800206a:	4607      	mov	r7, r0
 800206c:	1c78      	adds	r0, r7, #1
 800206e:	d1d6      	bne.n	800201e <_vfiprintf_r+0x19a>
 8002070:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002072:	07d9      	lsls	r1, r3, #31
 8002074:	d405      	bmi.n	8002082 <_vfiprintf_r+0x1fe>
 8002076:	89ab      	ldrh	r3, [r5, #12]
 8002078:	059a      	lsls	r2, r3, #22
 800207a:	d402      	bmi.n	8002082 <_vfiprintf_r+0x1fe>
 800207c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800207e:	f7ff fddf 	bl	8001c40 <__retarget_lock_release_recursive>
 8002082:	89ab      	ldrh	r3, [r5, #12]
 8002084:	065b      	lsls	r3, r3, #25
 8002086:	f53f af1f 	bmi.w	8001ec8 <_vfiprintf_r+0x44>
 800208a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800208c:	e71e      	b.n	8001ecc <_vfiprintf_r+0x48>
 800208e:	ab03      	add	r3, sp, #12
 8002090:	9300      	str	r3, [sp, #0]
 8002092:	462a      	mov	r2, r5
 8002094:	4b06      	ldr	r3, [pc, #24]	@ (80020b0 <_vfiprintf_r+0x22c>)
 8002096:	a904      	add	r1, sp, #16
 8002098:	4630      	mov	r0, r6
 800209a:	f000 f879 	bl	8002190 <_printf_i>
 800209e:	e7e4      	b.n	800206a <_vfiprintf_r+0x1e6>
 80020a0:	080027fd 	.word	0x080027fd
 80020a4:	08002803 	.word	0x08002803
 80020a8:	08002807 	.word	0x08002807
 80020ac:	00000000 	.word	0x00000000
 80020b0:	08001e5f 	.word	0x08001e5f

080020b4 <_printf_common>:
 80020b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80020b8:	4616      	mov	r6, r2
 80020ba:	4698      	mov	r8, r3
 80020bc:	688a      	ldr	r2, [r1, #8]
 80020be:	690b      	ldr	r3, [r1, #16]
 80020c0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80020c4:	4293      	cmp	r3, r2
 80020c6:	bfb8      	it	lt
 80020c8:	4613      	movlt	r3, r2
 80020ca:	6033      	str	r3, [r6, #0]
 80020cc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80020d0:	4607      	mov	r7, r0
 80020d2:	460c      	mov	r4, r1
 80020d4:	b10a      	cbz	r2, 80020da <_printf_common+0x26>
 80020d6:	3301      	adds	r3, #1
 80020d8:	6033      	str	r3, [r6, #0]
 80020da:	6823      	ldr	r3, [r4, #0]
 80020dc:	0699      	lsls	r1, r3, #26
 80020de:	bf42      	ittt	mi
 80020e0:	6833      	ldrmi	r3, [r6, #0]
 80020e2:	3302      	addmi	r3, #2
 80020e4:	6033      	strmi	r3, [r6, #0]
 80020e6:	6825      	ldr	r5, [r4, #0]
 80020e8:	f015 0506 	ands.w	r5, r5, #6
 80020ec:	d106      	bne.n	80020fc <_printf_common+0x48>
 80020ee:	f104 0a19 	add.w	sl, r4, #25
 80020f2:	68e3      	ldr	r3, [r4, #12]
 80020f4:	6832      	ldr	r2, [r6, #0]
 80020f6:	1a9b      	subs	r3, r3, r2
 80020f8:	42ab      	cmp	r3, r5
 80020fa:	dc26      	bgt.n	800214a <_printf_common+0x96>
 80020fc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002100:	6822      	ldr	r2, [r4, #0]
 8002102:	3b00      	subs	r3, #0
 8002104:	bf18      	it	ne
 8002106:	2301      	movne	r3, #1
 8002108:	0692      	lsls	r2, r2, #26
 800210a:	d42b      	bmi.n	8002164 <_printf_common+0xb0>
 800210c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002110:	4641      	mov	r1, r8
 8002112:	4638      	mov	r0, r7
 8002114:	47c8      	blx	r9
 8002116:	3001      	adds	r0, #1
 8002118:	d01e      	beq.n	8002158 <_printf_common+0xa4>
 800211a:	6823      	ldr	r3, [r4, #0]
 800211c:	6922      	ldr	r2, [r4, #16]
 800211e:	f003 0306 	and.w	r3, r3, #6
 8002122:	2b04      	cmp	r3, #4
 8002124:	bf02      	ittt	eq
 8002126:	68e5      	ldreq	r5, [r4, #12]
 8002128:	6833      	ldreq	r3, [r6, #0]
 800212a:	1aed      	subeq	r5, r5, r3
 800212c:	68a3      	ldr	r3, [r4, #8]
 800212e:	bf0c      	ite	eq
 8002130:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002134:	2500      	movne	r5, #0
 8002136:	4293      	cmp	r3, r2
 8002138:	bfc4      	itt	gt
 800213a:	1a9b      	subgt	r3, r3, r2
 800213c:	18ed      	addgt	r5, r5, r3
 800213e:	2600      	movs	r6, #0
 8002140:	341a      	adds	r4, #26
 8002142:	42b5      	cmp	r5, r6
 8002144:	d11a      	bne.n	800217c <_printf_common+0xc8>
 8002146:	2000      	movs	r0, #0
 8002148:	e008      	b.n	800215c <_printf_common+0xa8>
 800214a:	2301      	movs	r3, #1
 800214c:	4652      	mov	r2, sl
 800214e:	4641      	mov	r1, r8
 8002150:	4638      	mov	r0, r7
 8002152:	47c8      	blx	r9
 8002154:	3001      	adds	r0, #1
 8002156:	d103      	bne.n	8002160 <_printf_common+0xac>
 8002158:	f04f 30ff 	mov.w	r0, #4294967295
 800215c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002160:	3501      	adds	r5, #1
 8002162:	e7c6      	b.n	80020f2 <_printf_common+0x3e>
 8002164:	18e1      	adds	r1, r4, r3
 8002166:	1c5a      	adds	r2, r3, #1
 8002168:	2030      	movs	r0, #48	@ 0x30
 800216a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800216e:	4422      	add	r2, r4
 8002170:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002174:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002178:	3302      	adds	r3, #2
 800217a:	e7c7      	b.n	800210c <_printf_common+0x58>
 800217c:	2301      	movs	r3, #1
 800217e:	4622      	mov	r2, r4
 8002180:	4641      	mov	r1, r8
 8002182:	4638      	mov	r0, r7
 8002184:	47c8      	blx	r9
 8002186:	3001      	adds	r0, #1
 8002188:	d0e6      	beq.n	8002158 <_printf_common+0xa4>
 800218a:	3601      	adds	r6, #1
 800218c:	e7d9      	b.n	8002142 <_printf_common+0x8e>
	...

08002190 <_printf_i>:
 8002190:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002194:	7e0f      	ldrb	r7, [r1, #24]
 8002196:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002198:	2f78      	cmp	r7, #120	@ 0x78
 800219a:	4691      	mov	r9, r2
 800219c:	4680      	mov	r8, r0
 800219e:	460c      	mov	r4, r1
 80021a0:	469a      	mov	sl, r3
 80021a2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80021a6:	d807      	bhi.n	80021b8 <_printf_i+0x28>
 80021a8:	2f62      	cmp	r7, #98	@ 0x62
 80021aa:	d80a      	bhi.n	80021c2 <_printf_i+0x32>
 80021ac:	2f00      	cmp	r7, #0
 80021ae:	f000 80d1 	beq.w	8002354 <_printf_i+0x1c4>
 80021b2:	2f58      	cmp	r7, #88	@ 0x58
 80021b4:	f000 80b8 	beq.w	8002328 <_printf_i+0x198>
 80021b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80021bc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80021c0:	e03a      	b.n	8002238 <_printf_i+0xa8>
 80021c2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80021c6:	2b15      	cmp	r3, #21
 80021c8:	d8f6      	bhi.n	80021b8 <_printf_i+0x28>
 80021ca:	a101      	add	r1, pc, #4	@ (adr r1, 80021d0 <_printf_i+0x40>)
 80021cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80021d0:	08002229 	.word	0x08002229
 80021d4:	0800223d 	.word	0x0800223d
 80021d8:	080021b9 	.word	0x080021b9
 80021dc:	080021b9 	.word	0x080021b9
 80021e0:	080021b9 	.word	0x080021b9
 80021e4:	080021b9 	.word	0x080021b9
 80021e8:	0800223d 	.word	0x0800223d
 80021ec:	080021b9 	.word	0x080021b9
 80021f0:	080021b9 	.word	0x080021b9
 80021f4:	080021b9 	.word	0x080021b9
 80021f8:	080021b9 	.word	0x080021b9
 80021fc:	0800233b 	.word	0x0800233b
 8002200:	08002267 	.word	0x08002267
 8002204:	080022f5 	.word	0x080022f5
 8002208:	080021b9 	.word	0x080021b9
 800220c:	080021b9 	.word	0x080021b9
 8002210:	0800235d 	.word	0x0800235d
 8002214:	080021b9 	.word	0x080021b9
 8002218:	08002267 	.word	0x08002267
 800221c:	080021b9 	.word	0x080021b9
 8002220:	080021b9 	.word	0x080021b9
 8002224:	080022fd 	.word	0x080022fd
 8002228:	6833      	ldr	r3, [r6, #0]
 800222a:	1d1a      	adds	r2, r3, #4
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	6032      	str	r2, [r6, #0]
 8002230:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002234:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002238:	2301      	movs	r3, #1
 800223a:	e09c      	b.n	8002376 <_printf_i+0x1e6>
 800223c:	6833      	ldr	r3, [r6, #0]
 800223e:	6820      	ldr	r0, [r4, #0]
 8002240:	1d19      	adds	r1, r3, #4
 8002242:	6031      	str	r1, [r6, #0]
 8002244:	0606      	lsls	r6, r0, #24
 8002246:	d501      	bpl.n	800224c <_printf_i+0xbc>
 8002248:	681d      	ldr	r5, [r3, #0]
 800224a:	e003      	b.n	8002254 <_printf_i+0xc4>
 800224c:	0645      	lsls	r5, r0, #25
 800224e:	d5fb      	bpl.n	8002248 <_printf_i+0xb8>
 8002250:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002254:	2d00      	cmp	r5, #0
 8002256:	da03      	bge.n	8002260 <_printf_i+0xd0>
 8002258:	232d      	movs	r3, #45	@ 0x2d
 800225a:	426d      	negs	r5, r5
 800225c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002260:	4858      	ldr	r0, [pc, #352]	@ (80023c4 <_printf_i+0x234>)
 8002262:	230a      	movs	r3, #10
 8002264:	e011      	b.n	800228a <_printf_i+0xfa>
 8002266:	6821      	ldr	r1, [r4, #0]
 8002268:	6833      	ldr	r3, [r6, #0]
 800226a:	0608      	lsls	r0, r1, #24
 800226c:	f853 5b04 	ldr.w	r5, [r3], #4
 8002270:	d402      	bmi.n	8002278 <_printf_i+0xe8>
 8002272:	0649      	lsls	r1, r1, #25
 8002274:	bf48      	it	mi
 8002276:	b2ad      	uxthmi	r5, r5
 8002278:	2f6f      	cmp	r7, #111	@ 0x6f
 800227a:	4852      	ldr	r0, [pc, #328]	@ (80023c4 <_printf_i+0x234>)
 800227c:	6033      	str	r3, [r6, #0]
 800227e:	bf14      	ite	ne
 8002280:	230a      	movne	r3, #10
 8002282:	2308      	moveq	r3, #8
 8002284:	2100      	movs	r1, #0
 8002286:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800228a:	6866      	ldr	r6, [r4, #4]
 800228c:	60a6      	str	r6, [r4, #8]
 800228e:	2e00      	cmp	r6, #0
 8002290:	db05      	blt.n	800229e <_printf_i+0x10e>
 8002292:	6821      	ldr	r1, [r4, #0]
 8002294:	432e      	orrs	r6, r5
 8002296:	f021 0104 	bic.w	r1, r1, #4
 800229a:	6021      	str	r1, [r4, #0]
 800229c:	d04b      	beq.n	8002336 <_printf_i+0x1a6>
 800229e:	4616      	mov	r6, r2
 80022a0:	fbb5 f1f3 	udiv	r1, r5, r3
 80022a4:	fb03 5711 	mls	r7, r3, r1, r5
 80022a8:	5dc7      	ldrb	r7, [r0, r7]
 80022aa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80022ae:	462f      	mov	r7, r5
 80022b0:	42bb      	cmp	r3, r7
 80022b2:	460d      	mov	r5, r1
 80022b4:	d9f4      	bls.n	80022a0 <_printf_i+0x110>
 80022b6:	2b08      	cmp	r3, #8
 80022b8:	d10b      	bne.n	80022d2 <_printf_i+0x142>
 80022ba:	6823      	ldr	r3, [r4, #0]
 80022bc:	07df      	lsls	r7, r3, #31
 80022be:	d508      	bpl.n	80022d2 <_printf_i+0x142>
 80022c0:	6923      	ldr	r3, [r4, #16]
 80022c2:	6861      	ldr	r1, [r4, #4]
 80022c4:	4299      	cmp	r1, r3
 80022c6:	bfde      	ittt	le
 80022c8:	2330      	movle	r3, #48	@ 0x30
 80022ca:	f806 3c01 	strble.w	r3, [r6, #-1]
 80022ce:	f106 36ff 	addle.w	r6, r6, #4294967295
 80022d2:	1b92      	subs	r2, r2, r6
 80022d4:	6122      	str	r2, [r4, #16]
 80022d6:	f8cd a000 	str.w	sl, [sp]
 80022da:	464b      	mov	r3, r9
 80022dc:	aa03      	add	r2, sp, #12
 80022de:	4621      	mov	r1, r4
 80022e0:	4640      	mov	r0, r8
 80022e2:	f7ff fee7 	bl	80020b4 <_printf_common>
 80022e6:	3001      	adds	r0, #1
 80022e8:	d14a      	bne.n	8002380 <_printf_i+0x1f0>
 80022ea:	f04f 30ff 	mov.w	r0, #4294967295
 80022ee:	b004      	add	sp, #16
 80022f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80022f4:	6823      	ldr	r3, [r4, #0]
 80022f6:	f043 0320 	orr.w	r3, r3, #32
 80022fa:	6023      	str	r3, [r4, #0]
 80022fc:	4832      	ldr	r0, [pc, #200]	@ (80023c8 <_printf_i+0x238>)
 80022fe:	2778      	movs	r7, #120	@ 0x78
 8002300:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002304:	6823      	ldr	r3, [r4, #0]
 8002306:	6831      	ldr	r1, [r6, #0]
 8002308:	061f      	lsls	r7, r3, #24
 800230a:	f851 5b04 	ldr.w	r5, [r1], #4
 800230e:	d402      	bmi.n	8002316 <_printf_i+0x186>
 8002310:	065f      	lsls	r7, r3, #25
 8002312:	bf48      	it	mi
 8002314:	b2ad      	uxthmi	r5, r5
 8002316:	6031      	str	r1, [r6, #0]
 8002318:	07d9      	lsls	r1, r3, #31
 800231a:	bf44      	itt	mi
 800231c:	f043 0320 	orrmi.w	r3, r3, #32
 8002320:	6023      	strmi	r3, [r4, #0]
 8002322:	b11d      	cbz	r5, 800232c <_printf_i+0x19c>
 8002324:	2310      	movs	r3, #16
 8002326:	e7ad      	b.n	8002284 <_printf_i+0xf4>
 8002328:	4826      	ldr	r0, [pc, #152]	@ (80023c4 <_printf_i+0x234>)
 800232a:	e7e9      	b.n	8002300 <_printf_i+0x170>
 800232c:	6823      	ldr	r3, [r4, #0]
 800232e:	f023 0320 	bic.w	r3, r3, #32
 8002332:	6023      	str	r3, [r4, #0]
 8002334:	e7f6      	b.n	8002324 <_printf_i+0x194>
 8002336:	4616      	mov	r6, r2
 8002338:	e7bd      	b.n	80022b6 <_printf_i+0x126>
 800233a:	6833      	ldr	r3, [r6, #0]
 800233c:	6825      	ldr	r5, [r4, #0]
 800233e:	6961      	ldr	r1, [r4, #20]
 8002340:	1d18      	adds	r0, r3, #4
 8002342:	6030      	str	r0, [r6, #0]
 8002344:	062e      	lsls	r6, r5, #24
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	d501      	bpl.n	800234e <_printf_i+0x1be>
 800234a:	6019      	str	r1, [r3, #0]
 800234c:	e002      	b.n	8002354 <_printf_i+0x1c4>
 800234e:	0668      	lsls	r0, r5, #25
 8002350:	d5fb      	bpl.n	800234a <_printf_i+0x1ba>
 8002352:	8019      	strh	r1, [r3, #0]
 8002354:	2300      	movs	r3, #0
 8002356:	6123      	str	r3, [r4, #16]
 8002358:	4616      	mov	r6, r2
 800235a:	e7bc      	b.n	80022d6 <_printf_i+0x146>
 800235c:	6833      	ldr	r3, [r6, #0]
 800235e:	1d1a      	adds	r2, r3, #4
 8002360:	6032      	str	r2, [r6, #0]
 8002362:	681e      	ldr	r6, [r3, #0]
 8002364:	6862      	ldr	r2, [r4, #4]
 8002366:	2100      	movs	r1, #0
 8002368:	4630      	mov	r0, r6
 800236a:	f7fd ff51 	bl	8000210 <memchr>
 800236e:	b108      	cbz	r0, 8002374 <_printf_i+0x1e4>
 8002370:	1b80      	subs	r0, r0, r6
 8002372:	6060      	str	r0, [r4, #4]
 8002374:	6863      	ldr	r3, [r4, #4]
 8002376:	6123      	str	r3, [r4, #16]
 8002378:	2300      	movs	r3, #0
 800237a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800237e:	e7aa      	b.n	80022d6 <_printf_i+0x146>
 8002380:	6923      	ldr	r3, [r4, #16]
 8002382:	4632      	mov	r2, r6
 8002384:	4649      	mov	r1, r9
 8002386:	4640      	mov	r0, r8
 8002388:	47d0      	blx	sl
 800238a:	3001      	adds	r0, #1
 800238c:	d0ad      	beq.n	80022ea <_printf_i+0x15a>
 800238e:	6823      	ldr	r3, [r4, #0]
 8002390:	079b      	lsls	r3, r3, #30
 8002392:	d413      	bmi.n	80023bc <_printf_i+0x22c>
 8002394:	68e0      	ldr	r0, [r4, #12]
 8002396:	9b03      	ldr	r3, [sp, #12]
 8002398:	4298      	cmp	r0, r3
 800239a:	bfb8      	it	lt
 800239c:	4618      	movlt	r0, r3
 800239e:	e7a6      	b.n	80022ee <_printf_i+0x15e>
 80023a0:	2301      	movs	r3, #1
 80023a2:	4632      	mov	r2, r6
 80023a4:	4649      	mov	r1, r9
 80023a6:	4640      	mov	r0, r8
 80023a8:	47d0      	blx	sl
 80023aa:	3001      	adds	r0, #1
 80023ac:	d09d      	beq.n	80022ea <_printf_i+0x15a>
 80023ae:	3501      	adds	r5, #1
 80023b0:	68e3      	ldr	r3, [r4, #12]
 80023b2:	9903      	ldr	r1, [sp, #12]
 80023b4:	1a5b      	subs	r3, r3, r1
 80023b6:	42ab      	cmp	r3, r5
 80023b8:	dcf2      	bgt.n	80023a0 <_printf_i+0x210>
 80023ba:	e7eb      	b.n	8002394 <_printf_i+0x204>
 80023bc:	2500      	movs	r5, #0
 80023be:	f104 0619 	add.w	r6, r4, #25
 80023c2:	e7f5      	b.n	80023b0 <_printf_i+0x220>
 80023c4:	0800280e 	.word	0x0800280e
 80023c8:	0800281f 	.word	0x0800281f

080023cc <__sflush_r>:
 80023cc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80023d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023d2:	0716      	lsls	r6, r2, #28
 80023d4:	4605      	mov	r5, r0
 80023d6:	460c      	mov	r4, r1
 80023d8:	d454      	bmi.n	8002484 <__sflush_r+0xb8>
 80023da:	684b      	ldr	r3, [r1, #4]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	dc02      	bgt.n	80023e6 <__sflush_r+0x1a>
 80023e0:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	dd48      	ble.n	8002478 <__sflush_r+0xac>
 80023e6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80023e8:	2e00      	cmp	r6, #0
 80023ea:	d045      	beq.n	8002478 <__sflush_r+0xac>
 80023ec:	2300      	movs	r3, #0
 80023ee:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80023f2:	682f      	ldr	r7, [r5, #0]
 80023f4:	6a21      	ldr	r1, [r4, #32]
 80023f6:	602b      	str	r3, [r5, #0]
 80023f8:	d030      	beq.n	800245c <__sflush_r+0x90>
 80023fa:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80023fc:	89a3      	ldrh	r3, [r4, #12]
 80023fe:	0759      	lsls	r1, r3, #29
 8002400:	d505      	bpl.n	800240e <__sflush_r+0x42>
 8002402:	6863      	ldr	r3, [r4, #4]
 8002404:	1ad2      	subs	r2, r2, r3
 8002406:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002408:	b10b      	cbz	r3, 800240e <__sflush_r+0x42>
 800240a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800240c:	1ad2      	subs	r2, r2, r3
 800240e:	2300      	movs	r3, #0
 8002410:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002412:	6a21      	ldr	r1, [r4, #32]
 8002414:	4628      	mov	r0, r5
 8002416:	47b0      	blx	r6
 8002418:	1c43      	adds	r3, r0, #1
 800241a:	89a3      	ldrh	r3, [r4, #12]
 800241c:	d106      	bne.n	800242c <__sflush_r+0x60>
 800241e:	6829      	ldr	r1, [r5, #0]
 8002420:	291d      	cmp	r1, #29
 8002422:	d82b      	bhi.n	800247c <__sflush_r+0xb0>
 8002424:	4a28      	ldr	r2, [pc, #160]	@ (80024c8 <__sflush_r+0xfc>)
 8002426:	40ca      	lsrs	r2, r1
 8002428:	07d6      	lsls	r6, r2, #31
 800242a:	d527      	bpl.n	800247c <__sflush_r+0xb0>
 800242c:	2200      	movs	r2, #0
 800242e:	6062      	str	r2, [r4, #4]
 8002430:	04d9      	lsls	r1, r3, #19
 8002432:	6922      	ldr	r2, [r4, #16]
 8002434:	6022      	str	r2, [r4, #0]
 8002436:	d504      	bpl.n	8002442 <__sflush_r+0x76>
 8002438:	1c42      	adds	r2, r0, #1
 800243a:	d101      	bne.n	8002440 <__sflush_r+0x74>
 800243c:	682b      	ldr	r3, [r5, #0]
 800243e:	b903      	cbnz	r3, 8002442 <__sflush_r+0x76>
 8002440:	6560      	str	r0, [r4, #84]	@ 0x54
 8002442:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002444:	602f      	str	r7, [r5, #0]
 8002446:	b1b9      	cbz	r1, 8002478 <__sflush_r+0xac>
 8002448:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800244c:	4299      	cmp	r1, r3
 800244e:	d002      	beq.n	8002456 <__sflush_r+0x8a>
 8002450:	4628      	mov	r0, r5
 8002452:	f7ff fbf7 	bl	8001c44 <_free_r>
 8002456:	2300      	movs	r3, #0
 8002458:	6363      	str	r3, [r4, #52]	@ 0x34
 800245a:	e00d      	b.n	8002478 <__sflush_r+0xac>
 800245c:	2301      	movs	r3, #1
 800245e:	4628      	mov	r0, r5
 8002460:	47b0      	blx	r6
 8002462:	4602      	mov	r2, r0
 8002464:	1c50      	adds	r0, r2, #1
 8002466:	d1c9      	bne.n	80023fc <__sflush_r+0x30>
 8002468:	682b      	ldr	r3, [r5, #0]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d0c6      	beq.n	80023fc <__sflush_r+0x30>
 800246e:	2b1d      	cmp	r3, #29
 8002470:	d001      	beq.n	8002476 <__sflush_r+0xaa>
 8002472:	2b16      	cmp	r3, #22
 8002474:	d11d      	bne.n	80024b2 <__sflush_r+0xe6>
 8002476:	602f      	str	r7, [r5, #0]
 8002478:	2000      	movs	r0, #0
 800247a:	e021      	b.n	80024c0 <__sflush_r+0xf4>
 800247c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002480:	b21b      	sxth	r3, r3
 8002482:	e01a      	b.n	80024ba <__sflush_r+0xee>
 8002484:	690f      	ldr	r7, [r1, #16]
 8002486:	2f00      	cmp	r7, #0
 8002488:	d0f6      	beq.n	8002478 <__sflush_r+0xac>
 800248a:	0793      	lsls	r3, r2, #30
 800248c:	680e      	ldr	r6, [r1, #0]
 800248e:	bf08      	it	eq
 8002490:	694b      	ldreq	r3, [r1, #20]
 8002492:	600f      	str	r7, [r1, #0]
 8002494:	bf18      	it	ne
 8002496:	2300      	movne	r3, #0
 8002498:	1bf6      	subs	r6, r6, r7
 800249a:	608b      	str	r3, [r1, #8]
 800249c:	2e00      	cmp	r6, #0
 800249e:	ddeb      	ble.n	8002478 <__sflush_r+0xac>
 80024a0:	6a21      	ldr	r1, [r4, #32]
 80024a2:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80024a6:	4633      	mov	r3, r6
 80024a8:	463a      	mov	r2, r7
 80024aa:	4628      	mov	r0, r5
 80024ac:	47e0      	blx	ip
 80024ae:	2800      	cmp	r0, #0
 80024b0:	dc07      	bgt.n	80024c2 <__sflush_r+0xf6>
 80024b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80024b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80024ba:	81a3      	strh	r3, [r4, #12]
 80024bc:	f04f 30ff 	mov.w	r0, #4294967295
 80024c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80024c2:	4407      	add	r7, r0
 80024c4:	1a36      	subs	r6, r6, r0
 80024c6:	e7e9      	b.n	800249c <__sflush_r+0xd0>
 80024c8:	20400001 	.word	0x20400001

080024cc <_fflush_r>:
 80024cc:	b538      	push	{r3, r4, r5, lr}
 80024ce:	690b      	ldr	r3, [r1, #16]
 80024d0:	4605      	mov	r5, r0
 80024d2:	460c      	mov	r4, r1
 80024d4:	b913      	cbnz	r3, 80024dc <_fflush_r+0x10>
 80024d6:	2500      	movs	r5, #0
 80024d8:	4628      	mov	r0, r5
 80024da:	bd38      	pop	{r3, r4, r5, pc}
 80024dc:	b118      	cbz	r0, 80024e6 <_fflush_r+0x1a>
 80024de:	6a03      	ldr	r3, [r0, #32]
 80024e0:	b90b      	cbnz	r3, 80024e6 <_fflush_r+0x1a>
 80024e2:	f7ff fa9f 	bl	8001a24 <__sinit>
 80024e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d0f3      	beq.n	80024d6 <_fflush_r+0xa>
 80024ee:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80024f0:	07d0      	lsls	r0, r2, #31
 80024f2:	d404      	bmi.n	80024fe <_fflush_r+0x32>
 80024f4:	0599      	lsls	r1, r3, #22
 80024f6:	d402      	bmi.n	80024fe <_fflush_r+0x32>
 80024f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80024fa:	f7ff fba0 	bl	8001c3e <__retarget_lock_acquire_recursive>
 80024fe:	4628      	mov	r0, r5
 8002500:	4621      	mov	r1, r4
 8002502:	f7ff ff63 	bl	80023cc <__sflush_r>
 8002506:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002508:	07da      	lsls	r2, r3, #31
 800250a:	4605      	mov	r5, r0
 800250c:	d4e4      	bmi.n	80024d8 <_fflush_r+0xc>
 800250e:	89a3      	ldrh	r3, [r4, #12]
 8002510:	059b      	lsls	r3, r3, #22
 8002512:	d4e1      	bmi.n	80024d8 <_fflush_r+0xc>
 8002514:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002516:	f7ff fb93 	bl	8001c40 <__retarget_lock_release_recursive>
 800251a:	e7dd      	b.n	80024d8 <_fflush_r+0xc>

0800251c <_putc_r>:
 800251c:	b570      	push	{r4, r5, r6, lr}
 800251e:	460d      	mov	r5, r1
 8002520:	4614      	mov	r4, r2
 8002522:	4606      	mov	r6, r0
 8002524:	b118      	cbz	r0, 800252e <_putc_r+0x12>
 8002526:	6a03      	ldr	r3, [r0, #32]
 8002528:	b90b      	cbnz	r3, 800252e <_putc_r+0x12>
 800252a:	f7ff fa7b 	bl	8001a24 <__sinit>
 800252e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002530:	07d8      	lsls	r0, r3, #31
 8002532:	d405      	bmi.n	8002540 <_putc_r+0x24>
 8002534:	89a3      	ldrh	r3, [r4, #12]
 8002536:	0599      	lsls	r1, r3, #22
 8002538:	d402      	bmi.n	8002540 <_putc_r+0x24>
 800253a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800253c:	f7ff fb7f 	bl	8001c3e <__retarget_lock_acquire_recursive>
 8002540:	68a3      	ldr	r3, [r4, #8]
 8002542:	3b01      	subs	r3, #1
 8002544:	2b00      	cmp	r3, #0
 8002546:	60a3      	str	r3, [r4, #8]
 8002548:	da05      	bge.n	8002556 <_putc_r+0x3a>
 800254a:	69a2      	ldr	r2, [r4, #24]
 800254c:	4293      	cmp	r3, r2
 800254e:	db12      	blt.n	8002576 <_putc_r+0x5a>
 8002550:	b2eb      	uxtb	r3, r5
 8002552:	2b0a      	cmp	r3, #10
 8002554:	d00f      	beq.n	8002576 <_putc_r+0x5a>
 8002556:	6823      	ldr	r3, [r4, #0]
 8002558:	1c5a      	adds	r2, r3, #1
 800255a:	6022      	str	r2, [r4, #0]
 800255c:	701d      	strb	r5, [r3, #0]
 800255e:	b2ed      	uxtb	r5, r5
 8002560:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002562:	07da      	lsls	r2, r3, #31
 8002564:	d405      	bmi.n	8002572 <_putc_r+0x56>
 8002566:	89a3      	ldrh	r3, [r4, #12]
 8002568:	059b      	lsls	r3, r3, #22
 800256a:	d402      	bmi.n	8002572 <_putc_r+0x56>
 800256c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800256e:	f7ff fb67 	bl	8001c40 <__retarget_lock_release_recursive>
 8002572:	4628      	mov	r0, r5
 8002574:	bd70      	pop	{r4, r5, r6, pc}
 8002576:	4629      	mov	r1, r5
 8002578:	4622      	mov	r2, r4
 800257a:	4630      	mov	r0, r6
 800257c:	f000 f802 	bl	8002584 <__swbuf_r>
 8002580:	4605      	mov	r5, r0
 8002582:	e7ed      	b.n	8002560 <_putc_r+0x44>

08002584 <__swbuf_r>:
 8002584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002586:	460e      	mov	r6, r1
 8002588:	4614      	mov	r4, r2
 800258a:	4605      	mov	r5, r0
 800258c:	b118      	cbz	r0, 8002596 <__swbuf_r+0x12>
 800258e:	6a03      	ldr	r3, [r0, #32]
 8002590:	b90b      	cbnz	r3, 8002596 <__swbuf_r+0x12>
 8002592:	f7ff fa47 	bl	8001a24 <__sinit>
 8002596:	69a3      	ldr	r3, [r4, #24]
 8002598:	60a3      	str	r3, [r4, #8]
 800259a:	89a3      	ldrh	r3, [r4, #12]
 800259c:	071a      	lsls	r2, r3, #28
 800259e:	d501      	bpl.n	80025a4 <__swbuf_r+0x20>
 80025a0:	6923      	ldr	r3, [r4, #16]
 80025a2:	b943      	cbnz	r3, 80025b6 <__swbuf_r+0x32>
 80025a4:	4621      	mov	r1, r4
 80025a6:	4628      	mov	r0, r5
 80025a8:	f000 f82a 	bl	8002600 <__swsetup_r>
 80025ac:	b118      	cbz	r0, 80025b6 <__swbuf_r+0x32>
 80025ae:	f04f 37ff 	mov.w	r7, #4294967295
 80025b2:	4638      	mov	r0, r7
 80025b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80025b6:	6823      	ldr	r3, [r4, #0]
 80025b8:	6922      	ldr	r2, [r4, #16]
 80025ba:	1a98      	subs	r0, r3, r2
 80025bc:	6963      	ldr	r3, [r4, #20]
 80025be:	b2f6      	uxtb	r6, r6
 80025c0:	4283      	cmp	r3, r0
 80025c2:	4637      	mov	r7, r6
 80025c4:	dc05      	bgt.n	80025d2 <__swbuf_r+0x4e>
 80025c6:	4621      	mov	r1, r4
 80025c8:	4628      	mov	r0, r5
 80025ca:	f7ff ff7f 	bl	80024cc <_fflush_r>
 80025ce:	2800      	cmp	r0, #0
 80025d0:	d1ed      	bne.n	80025ae <__swbuf_r+0x2a>
 80025d2:	68a3      	ldr	r3, [r4, #8]
 80025d4:	3b01      	subs	r3, #1
 80025d6:	60a3      	str	r3, [r4, #8]
 80025d8:	6823      	ldr	r3, [r4, #0]
 80025da:	1c5a      	adds	r2, r3, #1
 80025dc:	6022      	str	r2, [r4, #0]
 80025de:	701e      	strb	r6, [r3, #0]
 80025e0:	6962      	ldr	r2, [r4, #20]
 80025e2:	1c43      	adds	r3, r0, #1
 80025e4:	429a      	cmp	r2, r3
 80025e6:	d004      	beq.n	80025f2 <__swbuf_r+0x6e>
 80025e8:	89a3      	ldrh	r3, [r4, #12]
 80025ea:	07db      	lsls	r3, r3, #31
 80025ec:	d5e1      	bpl.n	80025b2 <__swbuf_r+0x2e>
 80025ee:	2e0a      	cmp	r6, #10
 80025f0:	d1df      	bne.n	80025b2 <__swbuf_r+0x2e>
 80025f2:	4621      	mov	r1, r4
 80025f4:	4628      	mov	r0, r5
 80025f6:	f7ff ff69 	bl	80024cc <_fflush_r>
 80025fa:	2800      	cmp	r0, #0
 80025fc:	d0d9      	beq.n	80025b2 <__swbuf_r+0x2e>
 80025fe:	e7d6      	b.n	80025ae <__swbuf_r+0x2a>

08002600 <__swsetup_r>:
 8002600:	b538      	push	{r3, r4, r5, lr}
 8002602:	4b29      	ldr	r3, [pc, #164]	@ (80026a8 <__swsetup_r+0xa8>)
 8002604:	4605      	mov	r5, r0
 8002606:	6818      	ldr	r0, [r3, #0]
 8002608:	460c      	mov	r4, r1
 800260a:	b118      	cbz	r0, 8002614 <__swsetup_r+0x14>
 800260c:	6a03      	ldr	r3, [r0, #32]
 800260e:	b90b      	cbnz	r3, 8002614 <__swsetup_r+0x14>
 8002610:	f7ff fa08 	bl	8001a24 <__sinit>
 8002614:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002618:	0719      	lsls	r1, r3, #28
 800261a:	d422      	bmi.n	8002662 <__swsetup_r+0x62>
 800261c:	06da      	lsls	r2, r3, #27
 800261e:	d407      	bmi.n	8002630 <__swsetup_r+0x30>
 8002620:	2209      	movs	r2, #9
 8002622:	602a      	str	r2, [r5, #0]
 8002624:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002628:	81a3      	strh	r3, [r4, #12]
 800262a:	f04f 30ff 	mov.w	r0, #4294967295
 800262e:	e033      	b.n	8002698 <__swsetup_r+0x98>
 8002630:	0758      	lsls	r0, r3, #29
 8002632:	d512      	bpl.n	800265a <__swsetup_r+0x5a>
 8002634:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002636:	b141      	cbz	r1, 800264a <__swsetup_r+0x4a>
 8002638:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800263c:	4299      	cmp	r1, r3
 800263e:	d002      	beq.n	8002646 <__swsetup_r+0x46>
 8002640:	4628      	mov	r0, r5
 8002642:	f7ff faff 	bl	8001c44 <_free_r>
 8002646:	2300      	movs	r3, #0
 8002648:	6363      	str	r3, [r4, #52]	@ 0x34
 800264a:	89a3      	ldrh	r3, [r4, #12]
 800264c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8002650:	81a3      	strh	r3, [r4, #12]
 8002652:	2300      	movs	r3, #0
 8002654:	6063      	str	r3, [r4, #4]
 8002656:	6923      	ldr	r3, [r4, #16]
 8002658:	6023      	str	r3, [r4, #0]
 800265a:	89a3      	ldrh	r3, [r4, #12]
 800265c:	f043 0308 	orr.w	r3, r3, #8
 8002660:	81a3      	strh	r3, [r4, #12]
 8002662:	6923      	ldr	r3, [r4, #16]
 8002664:	b94b      	cbnz	r3, 800267a <__swsetup_r+0x7a>
 8002666:	89a3      	ldrh	r3, [r4, #12]
 8002668:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800266c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002670:	d003      	beq.n	800267a <__swsetup_r+0x7a>
 8002672:	4621      	mov	r1, r4
 8002674:	4628      	mov	r0, r5
 8002676:	f000 f84f 	bl	8002718 <__smakebuf_r>
 800267a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800267e:	f013 0201 	ands.w	r2, r3, #1
 8002682:	d00a      	beq.n	800269a <__swsetup_r+0x9a>
 8002684:	2200      	movs	r2, #0
 8002686:	60a2      	str	r2, [r4, #8]
 8002688:	6962      	ldr	r2, [r4, #20]
 800268a:	4252      	negs	r2, r2
 800268c:	61a2      	str	r2, [r4, #24]
 800268e:	6922      	ldr	r2, [r4, #16]
 8002690:	b942      	cbnz	r2, 80026a4 <__swsetup_r+0xa4>
 8002692:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8002696:	d1c5      	bne.n	8002624 <__swsetup_r+0x24>
 8002698:	bd38      	pop	{r3, r4, r5, pc}
 800269a:	0799      	lsls	r1, r3, #30
 800269c:	bf58      	it	pl
 800269e:	6962      	ldrpl	r2, [r4, #20]
 80026a0:	60a2      	str	r2, [r4, #8]
 80026a2:	e7f4      	b.n	800268e <__swsetup_r+0x8e>
 80026a4:	2000      	movs	r0, #0
 80026a6:	e7f7      	b.n	8002698 <__swsetup_r+0x98>
 80026a8:	2000000c 	.word	0x2000000c

080026ac <_sbrk_r>:
 80026ac:	b538      	push	{r3, r4, r5, lr}
 80026ae:	4d06      	ldr	r5, [pc, #24]	@ (80026c8 <_sbrk_r+0x1c>)
 80026b0:	2300      	movs	r3, #0
 80026b2:	4604      	mov	r4, r0
 80026b4:	4608      	mov	r0, r1
 80026b6:	602b      	str	r3, [r5, #0]
 80026b8:	f7ff f8c8 	bl	800184c <_sbrk>
 80026bc:	1c43      	adds	r3, r0, #1
 80026be:	d102      	bne.n	80026c6 <_sbrk_r+0x1a>
 80026c0:	682b      	ldr	r3, [r5, #0]
 80026c2:	b103      	cbz	r3, 80026c6 <_sbrk_r+0x1a>
 80026c4:	6023      	str	r3, [r4, #0]
 80026c6:	bd38      	pop	{r3, r4, r5, pc}
 80026c8:	200001c4 	.word	0x200001c4

080026cc <__swhatbuf_r>:
 80026cc:	b570      	push	{r4, r5, r6, lr}
 80026ce:	460c      	mov	r4, r1
 80026d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80026d4:	2900      	cmp	r1, #0
 80026d6:	b096      	sub	sp, #88	@ 0x58
 80026d8:	4615      	mov	r5, r2
 80026da:	461e      	mov	r6, r3
 80026dc:	da0d      	bge.n	80026fa <__swhatbuf_r+0x2e>
 80026de:	89a3      	ldrh	r3, [r4, #12]
 80026e0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80026e4:	f04f 0100 	mov.w	r1, #0
 80026e8:	bf14      	ite	ne
 80026ea:	2340      	movne	r3, #64	@ 0x40
 80026ec:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80026f0:	2000      	movs	r0, #0
 80026f2:	6031      	str	r1, [r6, #0]
 80026f4:	602b      	str	r3, [r5, #0]
 80026f6:	b016      	add	sp, #88	@ 0x58
 80026f8:	bd70      	pop	{r4, r5, r6, pc}
 80026fa:	466a      	mov	r2, sp
 80026fc:	f000 f848 	bl	8002790 <_fstat_r>
 8002700:	2800      	cmp	r0, #0
 8002702:	dbec      	blt.n	80026de <__swhatbuf_r+0x12>
 8002704:	9901      	ldr	r1, [sp, #4]
 8002706:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800270a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800270e:	4259      	negs	r1, r3
 8002710:	4159      	adcs	r1, r3
 8002712:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002716:	e7eb      	b.n	80026f0 <__swhatbuf_r+0x24>

08002718 <__smakebuf_r>:
 8002718:	898b      	ldrh	r3, [r1, #12]
 800271a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800271c:	079d      	lsls	r5, r3, #30
 800271e:	4606      	mov	r6, r0
 8002720:	460c      	mov	r4, r1
 8002722:	d507      	bpl.n	8002734 <__smakebuf_r+0x1c>
 8002724:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8002728:	6023      	str	r3, [r4, #0]
 800272a:	6123      	str	r3, [r4, #16]
 800272c:	2301      	movs	r3, #1
 800272e:	6163      	str	r3, [r4, #20]
 8002730:	b003      	add	sp, #12
 8002732:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002734:	ab01      	add	r3, sp, #4
 8002736:	466a      	mov	r2, sp
 8002738:	f7ff ffc8 	bl	80026cc <__swhatbuf_r>
 800273c:	9f00      	ldr	r7, [sp, #0]
 800273e:	4605      	mov	r5, r0
 8002740:	4639      	mov	r1, r7
 8002742:	4630      	mov	r0, r6
 8002744:	f7ff faea 	bl	8001d1c <_malloc_r>
 8002748:	b948      	cbnz	r0, 800275e <__smakebuf_r+0x46>
 800274a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800274e:	059a      	lsls	r2, r3, #22
 8002750:	d4ee      	bmi.n	8002730 <__smakebuf_r+0x18>
 8002752:	f023 0303 	bic.w	r3, r3, #3
 8002756:	f043 0302 	orr.w	r3, r3, #2
 800275a:	81a3      	strh	r3, [r4, #12]
 800275c:	e7e2      	b.n	8002724 <__smakebuf_r+0xc>
 800275e:	89a3      	ldrh	r3, [r4, #12]
 8002760:	6020      	str	r0, [r4, #0]
 8002762:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002766:	81a3      	strh	r3, [r4, #12]
 8002768:	9b01      	ldr	r3, [sp, #4]
 800276a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800276e:	b15b      	cbz	r3, 8002788 <__smakebuf_r+0x70>
 8002770:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002774:	4630      	mov	r0, r6
 8002776:	f000 f81d 	bl	80027b4 <_isatty_r>
 800277a:	b128      	cbz	r0, 8002788 <__smakebuf_r+0x70>
 800277c:	89a3      	ldrh	r3, [r4, #12]
 800277e:	f023 0303 	bic.w	r3, r3, #3
 8002782:	f043 0301 	orr.w	r3, r3, #1
 8002786:	81a3      	strh	r3, [r4, #12]
 8002788:	89a3      	ldrh	r3, [r4, #12]
 800278a:	431d      	orrs	r5, r3
 800278c:	81a5      	strh	r5, [r4, #12]
 800278e:	e7cf      	b.n	8002730 <__smakebuf_r+0x18>

08002790 <_fstat_r>:
 8002790:	b538      	push	{r3, r4, r5, lr}
 8002792:	4d07      	ldr	r5, [pc, #28]	@ (80027b0 <_fstat_r+0x20>)
 8002794:	2300      	movs	r3, #0
 8002796:	4604      	mov	r4, r0
 8002798:	4608      	mov	r0, r1
 800279a:	4611      	mov	r1, r2
 800279c:	602b      	str	r3, [r5, #0]
 800279e:	f7ff f82f 	bl	8001800 <_fstat>
 80027a2:	1c43      	adds	r3, r0, #1
 80027a4:	d102      	bne.n	80027ac <_fstat_r+0x1c>
 80027a6:	682b      	ldr	r3, [r5, #0]
 80027a8:	b103      	cbz	r3, 80027ac <_fstat_r+0x1c>
 80027aa:	6023      	str	r3, [r4, #0]
 80027ac:	bd38      	pop	{r3, r4, r5, pc}
 80027ae:	bf00      	nop
 80027b0:	200001c4 	.word	0x200001c4

080027b4 <_isatty_r>:
 80027b4:	b538      	push	{r3, r4, r5, lr}
 80027b6:	4d06      	ldr	r5, [pc, #24]	@ (80027d0 <_isatty_r+0x1c>)
 80027b8:	2300      	movs	r3, #0
 80027ba:	4604      	mov	r4, r0
 80027bc:	4608      	mov	r0, r1
 80027be:	602b      	str	r3, [r5, #0]
 80027c0:	f7ff f82d 	bl	800181e <_isatty>
 80027c4:	1c43      	adds	r3, r0, #1
 80027c6:	d102      	bne.n	80027ce <_isatty_r+0x1a>
 80027c8:	682b      	ldr	r3, [r5, #0]
 80027ca:	b103      	cbz	r3, 80027ce <_isatty_r+0x1a>
 80027cc:	6023      	str	r3, [r4, #0]
 80027ce:	bd38      	pop	{r3, r4, r5, pc}
 80027d0:	200001c4 	.word	0x200001c4

080027d4 <_init>:
 80027d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027d6:	bf00      	nop
 80027d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027da:	bc08      	pop	{r3}
 80027dc:	469e      	mov	lr, r3
 80027de:	4770      	bx	lr

080027e0 <_fini>:
 80027e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027e2:	bf00      	nop
 80027e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027e6:	bc08      	pop	{r3}
 80027e8:	469e      	mov	lr, r3
 80027ea:	4770      	bx	lr
