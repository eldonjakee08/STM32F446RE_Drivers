
010STM32F446xx_Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001760  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08001924  08001924  00002924  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001984  08001984  0000305c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08001984  08001984  0000305c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08001984  08001984  0000305c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001984  08001984  00002984  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001988  08001988  00002988  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  0800198c  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  2000005c  080019e8  0000305c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  080019e8  000031c8  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0000305c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001fc7  00000000  00000000  00003086  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000810  00000000  00000000  0000504d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000270  00000000  00000000  00005860  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000001c1  00000000  00000000  00005ad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000036dc  00000000  00000000  00005c91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002c83  00000000  00000000  0000936d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000c687  00000000  00000000  0000bff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00018677  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000f9c  00000000  00000000  000186bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  00019658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000005c 	.word	0x2000005c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800190c 	.word	0x0800190c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000060 	.word	0x20000060
 8000200:	0800190c 	.word	0x0800190c

08000204 <GPIO_PeripheralClkCtrl>:
 * @return		- none
 *
 * @Note 		-
 */
void GPIO_PeripheralClkCtrl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 8000204:	b480      	push	{r7}
 8000206:	b085      	sub	sp, #20
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]
 800020c:	460b      	mov	r3, r1
 800020e:	70fb      	strb	r3, [r7, #3]
	 * translates the GPIO port base addresses into primitive integer data for
	 * ease of use in switch case statement or other applications that require
	 * a more primitive type of data.
	 * note: GPIO port base addresses which are pointers are not primitive data types
	 */
	uint8_t temp1 = GPIO_BASEADDR_TO_CODE(pGPIOx);
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	4a6c      	ldr	r2, [pc, #432]	@ (80003c4 <GPIO_PeripheralClkCtrl+0x1c0>)
 8000214:	4293      	cmp	r3, r2
 8000216:	d02b      	beq.n	8000270 <GPIO_PeripheralClkCtrl+0x6c>
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	4a6b      	ldr	r2, [pc, #428]	@ (80003c8 <GPIO_PeripheralClkCtrl+0x1c4>)
 800021c:	4293      	cmp	r3, r2
 800021e:	d025      	beq.n	800026c <GPIO_PeripheralClkCtrl+0x68>
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	4a6a      	ldr	r2, [pc, #424]	@ (80003cc <GPIO_PeripheralClkCtrl+0x1c8>)
 8000224:	4293      	cmp	r3, r2
 8000226:	d01f      	beq.n	8000268 <GPIO_PeripheralClkCtrl+0x64>
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	4a69      	ldr	r2, [pc, #420]	@ (80003d0 <GPIO_PeripheralClkCtrl+0x1cc>)
 800022c:	4293      	cmp	r3, r2
 800022e:	d019      	beq.n	8000264 <GPIO_PeripheralClkCtrl+0x60>
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	4a68      	ldr	r2, [pc, #416]	@ (80003d4 <GPIO_PeripheralClkCtrl+0x1d0>)
 8000234:	4293      	cmp	r3, r2
 8000236:	d013      	beq.n	8000260 <GPIO_PeripheralClkCtrl+0x5c>
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	4a67      	ldr	r2, [pc, #412]	@ (80003d8 <GPIO_PeripheralClkCtrl+0x1d4>)
 800023c:	4293      	cmp	r3, r2
 800023e:	d00d      	beq.n	800025c <GPIO_PeripheralClkCtrl+0x58>
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	4a66      	ldr	r2, [pc, #408]	@ (80003dc <GPIO_PeripheralClkCtrl+0x1d8>)
 8000244:	4293      	cmp	r3, r2
 8000246:	d007      	beq.n	8000258 <GPIO_PeripheralClkCtrl+0x54>
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	4a65      	ldr	r2, [pc, #404]	@ (80003e0 <GPIO_PeripheralClkCtrl+0x1dc>)
 800024c:	4293      	cmp	r3, r2
 800024e:	d101      	bne.n	8000254 <GPIO_PeripheralClkCtrl+0x50>
 8000250:	2307      	movs	r3, #7
 8000252:	e00e      	b.n	8000272 <GPIO_PeripheralClkCtrl+0x6e>
 8000254:	2300      	movs	r3, #0
 8000256:	e00c      	b.n	8000272 <GPIO_PeripheralClkCtrl+0x6e>
 8000258:	2306      	movs	r3, #6
 800025a:	e00a      	b.n	8000272 <GPIO_PeripheralClkCtrl+0x6e>
 800025c:	2305      	movs	r3, #5
 800025e:	e008      	b.n	8000272 <GPIO_PeripheralClkCtrl+0x6e>
 8000260:	2304      	movs	r3, #4
 8000262:	e006      	b.n	8000272 <GPIO_PeripheralClkCtrl+0x6e>
 8000264:	2303      	movs	r3, #3
 8000266:	e004      	b.n	8000272 <GPIO_PeripheralClkCtrl+0x6e>
 8000268:	2302      	movs	r3, #2
 800026a:	e002      	b.n	8000272 <GPIO_PeripheralClkCtrl+0x6e>
 800026c:	2301      	movs	r3, #1
 800026e:	e000      	b.n	8000272 <GPIO_PeripheralClkCtrl+0x6e>
 8000270:	2300      	movs	r3, #0
 8000272:	73fb      	strb	r3, [r7, #15]

	if(EnorDi == ENABLE){
 8000274:	78fb      	ldrb	r3, [r7, #3]
 8000276:	2b01      	cmp	r3, #1
 8000278:	d14e      	bne.n	8000318 <GPIO_PeripheralClkCtrl+0x114>
		/*
		 * I've used switch case statements for better readability compared to previous
		 * version of else if statements.
		 */
		switch(temp1){
 800027a:	7bfb      	ldrb	r3, [r7, #15]
 800027c:	2b07      	cmp	r3, #7
 800027e:	f200 8099 	bhi.w	80003b4 <GPIO_PeripheralClkCtrl+0x1b0>
 8000282:	a201      	add	r2, pc, #4	@ (adr r2, 8000288 <GPIO_PeripheralClkCtrl+0x84>)
 8000284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000288:	080002a9 	.word	0x080002a9
 800028c:	080002b7 	.word	0x080002b7
 8000290:	080002c5 	.word	0x080002c5
 8000294:	080002d3 	.word	0x080002d3
 8000298:	080002e1 	.word	0x080002e1
 800029c:	080002ef 	.word	0x080002ef
 80002a0:	080002fd 	.word	0x080002fd
 80002a4:	0800030b 	.word	0x0800030b
		case 0:
			GPIOA_PCLK_EN();
 80002a8:	4b4e      	ldr	r3, [pc, #312]	@ (80003e4 <GPIO_PeripheralClkCtrl+0x1e0>)
 80002aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002ac:	4a4d      	ldr	r2, [pc, #308]	@ (80003e4 <GPIO_PeripheralClkCtrl+0x1e0>)
 80002ae:	f043 0301 	orr.w	r3, r3, #1
 80002b2:	6313      	str	r3, [r2, #48]	@ 0x30
			break;
 80002b4:	e081      	b.n	80003ba <GPIO_PeripheralClkCtrl+0x1b6>
		case 1:
			GPIOB_PCLK_EN();
 80002b6:	4b4b      	ldr	r3, [pc, #300]	@ (80003e4 <GPIO_PeripheralClkCtrl+0x1e0>)
 80002b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002ba:	4a4a      	ldr	r2, [pc, #296]	@ (80003e4 <GPIO_PeripheralClkCtrl+0x1e0>)
 80002bc:	f043 0302 	orr.w	r3, r3, #2
 80002c0:	6313      	str	r3, [r2, #48]	@ 0x30
			break;
 80002c2:	e07a      	b.n	80003ba <GPIO_PeripheralClkCtrl+0x1b6>
		case 2:
			GPIOC_PCLK_EN();
 80002c4:	4b47      	ldr	r3, [pc, #284]	@ (80003e4 <GPIO_PeripheralClkCtrl+0x1e0>)
 80002c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002c8:	4a46      	ldr	r2, [pc, #280]	@ (80003e4 <GPIO_PeripheralClkCtrl+0x1e0>)
 80002ca:	f043 0304 	orr.w	r3, r3, #4
 80002ce:	6313      	str	r3, [r2, #48]	@ 0x30
			break;
 80002d0:	e073      	b.n	80003ba <GPIO_PeripheralClkCtrl+0x1b6>
		case 3:
			GPIOD_PCLK_EN();
 80002d2:	4b44      	ldr	r3, [pc, #272]	@ (80003e4 <GPIO_PeripheralClkCtrl+0x1e0>)
 80002d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002d6:	4a43      	ldr	r2, [pc, #268]	@ (80003e4 <GPIO_PeripheralClkCtrl+0x1e0>)
 80002d8:	f043 0308 	orr.w	r3, r3, #8
 80002dc:	6313      	str	r3, [r2, #48]	@ 0x30
			break;
 80002de:	e06c      	b.n	80003ba <GPIO_PeripheralClkCtrl+0x1b6>
		case 4:
			GPIOE_PCLK_EN();
 80002e0:	4b40      	ldr	r3, [pc, #256]	@ (80003e4 <GPIO_PeripheralClkCtrl+0x1e0>)
 80002e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002e4:	4a3f      	ldr	r2, [pc, #252]	@ (80003e4 <GPIO_PeripheralClkCtrl+0x1e0>)
 80002e6:	f043 0310 	orr.w	r3, r3, #16
 80002ea:	6313      	str	r3, [r2, #48]	@ 0x30
			break;
 80002ec:	e065      	b.n	80003ba <GPIO_PeripheralClkCtrl+0x1b6>
		case 5:
			GPIOF_PCLK_EN();
 80002ee:	4b3d      	ldr	r3, [pc, #244]	@ (80003e4 <GPIO_PeripheralClkCtrl+0x1e0>)
 80002f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002f2:	4a3c      	ldr	r2, [pc, #240]	@ (80003e4 <GPIO_PeripheralClkCtrl+0x1e0>)
 80002f4:	f043 0320 	orr.w	r3, r3, #32
 80002f8:	6313      	str	r3, [r2, #48]	@ 0x30
			break;
 80002fa:	e05e      	b.n	80003ba <GPIO_PeripheralClkCtrl+0x1b6>
		case 6:
			GPIOG_PCLK_EN();
 80002fc:	4b39      	ldr	r3, [pc, #228]	@ (80003e4 <GPIO_PeripheralClkCtrl+0x1e0>)
 80002fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000300:	4a38      	ldr	r2, [pc, #224]	@ (80003e4 <GPIO_PeripheralClkCtrl+0x1e0>)
 8000302:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000306:	6313      	str	r3, [r2, #48]	@ 0x30
			break;
 8000308:	e057      	b.n	80003ba <GPIO_PeripheralClkCtrl+0x1b6>
		case 7:
			GPIOH_PCLK_EN();
 800030a:	4b36      	ldr	r3, [pc, #216]	@ (80003e4 <GPIO_PeripheralClkCtrl+0x1e0>)
 800030c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800030e:	4a35      	ldr	r2, [pc, #212]	@ (80003e4 <GPIO_PeripheralClkCtrl+0x1e0>)
 8000310:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000314:	6313      	str	r3, [r2, #48]	@ 0x30
			break;
 8000316:	e050      	b.n	80003ba <GPIO_PeripheralClkCtrl+0x1b6>
			break;
		}

	}
	else{
		switch(temp1){
 8000318:	7bfb      	ldrb	r3, [r7, #15]
 800031a:	2b07      	cmp	r3, #7
 800031c:	d84c      	bhi.n	80003b8 <GPIO_PeripheralClkCtrl+0x1b4>
 800031e:	a201      	add	r2, pc, #4	@ (adr r2, 8000324 <GPIO_PeripheralClkCtrl+0x120>)
 8000320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000324:	08000345 	.word	0x08000345
 8000328:	08000353 	.word	0x08000353
 800032c:	08000361 	.word	0x08000361
 8000330:	0800036f 	.word	0x0800036f
 8000334:	0800037d 	.word	0x0800037d
 8000338:	0800038b 	.word	0x0800038b
 800033c:	08000399 	.word	0x08000399
 8000340:	080003a7 	.word	0x080003a7
		case 0:
			GPIOA_PCLK_DI();
 8000344:	4b27      	ldr	r3, [pc, #156]	@ (80003e4 <GPIO_PeripheralClkCtrl+0x1e0>)
 8000346:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000348:	4a26      	ldr	r2, [pc, #152]	@ (80003e4 <GPIO_PeripheralClkCtrl+0x1e0>)
 800034a:	f023 0301 	bic.w	r3, r3, #1
 800034e:	6313      	str	r3, [r2, #48]	@ 0x30
			break;
 8000350:	e033      	b.n	80003ba <GPIO_PeripheralClkCtrl+0x1b6>
		case 1:
			GPIOB_PCLK_DI();
 8000352:	4b24      	ldr	r3, [pc, #144]	@ (80003e4 <GPIO_PeripheralClkCtrl+0x1e0>)
 8000354:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000356:	4a23      	ldr	r2, [pc, #140]	@ (80003e4 <GPIO_PeripheralClkCtrl+0x1e0>)
 8000358:	f023 0302 	bic.w	r3, r3, #2
 800035c:	6313      	str	r3, [r2, #48]	@ 0x30
			break;
 800035e:	e02c      	b.n	80003ba <GPIO_PeripheralClkCtrl+0x1b6>
		case 2:
			GPIOC_PCLK_DI();
 8000360:	4b20      	ldr	r3, [pc, #128]	@ (80003e4 <GPIO_PeripheralClkCtrl+0x1e0>)
 8000362:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000364:	4a1f      	ldr	r2, [pc, #124]	@ (80003e4 <GPIO_PeripheralClkCtrl+0x1e0>)
 8000366:	f023 0304 	bic.w	r3, r3, #4
 800036a:	6313      	str	r3, [r2, #48]	@ 0x30
			break;
 800036c:	e025      	b.n	80003ba <GPIO_PeripheralClkCtrl+0x1b6>
		case 3:
			GPIOD_PCLK_DI();
 800036e:	4b1d      	ldr	r3, [pc, #116]	@ (80003e4 <GPIO_PeripheralClkCtrl+0x1e0>)
 8000370:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000372:	4a1c      	ldr	r2, [pc, #112]	@ (80003e4 <GPIO_PeripheralClkCtrl+0x1e0>)
 8000374:	f023 0308 	bic.w	r3, r3, #8
 8000378:	6313      	str	r3, [r2, #48]	@ 0x30
			break;
 800037a:	e01e      	b.n	80003ba <GPIO_PeripheralClkCtrl+0x1b6>
		case 4:
			GPIOE_PCLK_DI();
 800037c:	4b19      	ldr	r3, [pc, #100]	@ (80003e4 <GPIO_PeripheralClkCtrl+0x1e0>)
 800037e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000380:	4a18      	ldr	r2, [pc, #96]	@ (80003e4 <GPIO_PeripheralClkCtrl+0x1e0>)
 8000382:	f023 0310 	bic.w	r3, r3, #16
 8000386:	6313      	str	r3, [r2, #48]	@ 0x30
			break;
 8000388:	e017      	b.n	80003ba <GPIO_PeripheralClkCtrl+0x1b6>
		case 5:
			GPIOF_PCLK_DI();
 800038a:	4b16      	ldr	r3, [pc, #88]	@ (80003e4 <GPIO_PeripheralClkCtrl+0x1e0>)
 800038c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800038e:	4a15      	ldr	r2, [pc, #84]	@ (80003e4 <GPIO_PeripheralClkCtrl+0x1e0>)
 8000390:	f023 0320 	bic.w	r3, r3, #32
 8000394:	6313      	str	r3, [r2, #48]	@ 0x30
			break;
 8000396:	e010      	b.n	80003ba <GPIO_PeripheralClkCtrl+0x1b6>
		case 6:
			GPIOG_PCLK_DI();
 8000398:	4b12      	ldr	r3, [pc, #72]	@ (80003e4 <GPIO_PeripheralClkCtrl+0x1e0>)
 800039a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800039c:	4a11      	ldr	r2, [pc, #68]	@ (80003e4 <GPIO_PeripheralClkCtrl+0x1e0>)
 800039e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80003a2:	6313      	str	r3, [r2, #48]	@ 0x30
			break;
 80003a4:	e009      	b.n	80003ba <GPIO_PeripheralClkCtrl+0x1b6>
		case 7:
			GPIOH_PCLK_DI();
 80003a6:	4b0f      	ldr	r3, [pc, #60]	@ (80003e4 <GPIO_PeripheralClkCtrl+0x1e0>)
 80003a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003aa:	4a0e      	ldr	r2, [pc, #56]	@ (80003e4 <GPIO_PeripheralClkCtrl+0x1e0>)
 80003ac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80003b0:	6313      	str	r3, [r2, #48]	@ 0x30
			break;
 80003b2:	e002      	b.n	80003ba <GPIO_PeripheralClkCtrl+0x1b6>
			break;
 80003b4:	bf00      	nop
 80003b6:	e000      	b.n	80003ba <GPIO_PeripheralClkCtrl+0x1b6>
		default:
			break;
 80003b8:	bf00      	nop
		}

	}

}
 80003ba:	bf00      	nop
 80003bc:	3714      	adds	r7, #20
 80003be:	46bd      	mov	sp, r7
 80003c0:	bc80      	pop	{r7}
 80003c2:	4770      	bx	lr
 80003c4:	40020000 	.word	0x40020000
 80003c8:	40020400 	.word	0x40020400
 80003cc:	40020800 	.word	0x40020800
 80003d0:	40020c00 	.word	0x40020c00
 80003d4:	40021000 	.word	0x40021000
 80003d8:	40021400 	.word	0x40021400
 80003dc:	40021800 	.word	0x40021800
 80003e0:	40021c00 	.word	0x40021c00
 80003e4:	40023800 	.word	0x40023800

080003e8 <GPIO_Init>:
 *
 * @Note 		-
 */

void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b086      	sub	sp, #24
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	6078      	str	r0, [r7, #4]
	GPIO_PeripheralClkCtrl(pGPIOHandle->pGPIOx, ENABLE);
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	2101      	movs	r1, #1
 80003f6:	4618      	mov	r0, r3
 80003f8:	f7ff ff04 	bl	8000204 <GPIO_PeripheralClkCtrl>

	uint32_t temp=0;
 80003fc:	2300      	movs	r3, #0
 80003fe:	617b      	str	r3, [r7, #20]

	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <=GPIO_MODE_ANALOG ){
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	795b      	ldrb	r3, [r3, #5]
 8000404:	2b03      	cmp	r3, #3
 8000406:	d822      	bhi.n	800044e <GPIO_Init+0x66>

		//1. Configure mode of GPIO pin
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)) );
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	795b      	ldrb	r3, [r3, #5]
 800040c:	461a      	mov	r2, r3
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	791b      	ldrb	r3, [r3, #4]
 8000412:	005b      	lsls	r3, r3, #1
 8000414:	fa02 f303 	lsl.w	r3, r2, r3
 8000418:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(3 << (2 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)) ); //clears the bit fields first before setting
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	681a      	ldr	r2, [r3, #0]
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	791b      	ldrb	r3, [r3, #4]
 8000424:	005b      	lsls	r3, r3, #1
 8000426:	2103      	movs	r1, #3
 8000428:	fa01 f303 	lsl.w	r3, r1, r3
 800042c:	43db      	mvns	r3, r3
 800042e:	4619      	mov	r1, r3
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	400a      	ands	r2, r1
 8000436:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; //sets the bit fields in the register
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	6819      	ldr	r1, [r3, #0]
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	697a      	ldr	r2, [r7, #20]
 8000444:	430a      	orrs	r2, r1
 8000446:	601a      	str	r2, [r3, #0]
		temp = 0;
 8000448:	2300      	movs	r3, #0
 800044a:	617b      	str	r3, [r7, #20]
 800044c:	e0ea      	b.n	8000624 <GPIO_Init+0x23c>
		//1. pin must be in input configuration
		//2. configure the edge trigger (RT,FT,RFT)
		//3. ENABLE INTERRUPT DELIVERY FROM PERIPHERAL TO THE PROCEssor (on peripheral side)

		//clears bits at the same time setting to input mode since input mode is "00".
		pGPIOHandle->pGPIOx->MODER &= ~(3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	681a      	ldr	r2, [r3, #0]
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	791b      	ldrb	r3, [r3, #4]
 8000458:	005b      	lsls	r3, r3, #1
 800045a:	2103      	movs	r1, #3
 800045c:	fa01 f303 	lsl.w	r3, r1, r3
 8000460:	43db      	mvns	r3, r3
 8000462:	4619      	mov	r1, r3
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	400a      	ands	r2, r1
 800046a:	601a      	str	r2, [r3, #0]

		switch(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode){
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	795b      	ldrb	r3, [r3, #5]
 8000470:	2b06      	cmp	r3, #6
 8000472:	d036      	beq.n	80004e2 <GPIO_Init+0xfa>
 8000474:	2b06      	cmp	r3, #6
 8000476:	dc4b      	bgt.n	8000510 <GPIO_Init+0x128>
 8000478:	2b04      	cmp	r3, #4
 800047a:	d002      	beq.n	8000482 <GPIO_Init+0x9a>
 800047c:	2b05      	cmp	r3, #5
 800047e:	d018      	beq.n	80004b2 <GPIO_Init+0xca>
			//1. configure both FTSR & RTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
			break;
		default:
			break;
 8000480:	e046      	b.n	8000510 <GPIO_Init+0x128>
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000482:	4b44      	ldr	r3, [pc, #272]	@ (8000594 <GPIO_Init+0x1ac>)
 8000484:	68db      	ldr	r3, [r3, #12]
 8000486:	687a      	ldr	r2, [r7, #4]
 8000488:	7912      	ldrb	r2, [r2, #4]
 800048a:	4611      	mov	r1, r2
 800048c:	2201      	movs	r2, #1
 800048e:	408a      	lsls	r2, r1
 8000490:	4611      	mov	r1, r2
 8000492:	4a40      	ldr	r2, [pc, #256]	@ (8000594 <GPIO_Init+0x1ac>)
 8000494:	430b      	orrs	r3, r1
 8000496:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000498:	4b3e      	ldr	r3, [pc, #248]	@ (8000594 <GPIO_Init+0x1ac>)
 800049a:	689b      	ldr	r3, [r3, #8]
 800049c:	687a      	ldr	r2, [r7, #4]
 800049e:	7912      	ldrb	r2, [r2, #4]
 80004a0:	4611      	mov	r1, r2
 80004a2:	2201      	movs	r2, #1
 80004a4:	408a      	lsls	r2, r1
 80004a6:	43d2      	mvns	r2, r2
 80004a8:	4611      	mov	r1, r2
 80004aa:	4a3a      	ldr	r2, [pc, #232]	@ (8000594 <GPIO_Init+0x1ac>)
 80004ac:	400b      	ands	r3, r1
 80004ae:	6093      	str	r3, [r2, #8]
			break;
 80004b0:	e02f      	b.n	8000512 <GPIO_Init+0x12a>
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004b2:	4b38      	ldr	r3, [pc, #224]	@ (8000594 <GPIO_Init+0x1ac>)
 80004b4:	689b      	ldr	r3, [r3, #8]
 80004b6:	687a      	ldr	r2, [r7, #4]
 80004b8:	7912      	ldrb	r2, [r2, #4]
 80004ba:	4611      	mov	r1, r2
 80004bc:	2201      	movs	r2, #1
 80004be:	408a      	lsls	r2, r1
 80004c0:	4611      	mov	r1, r2
 80004c2:	4a34      	ldr	r2, [pc, #208]	@ (8000594 <GPIO_Init+0x1ac>)
 80004c4:	430b      	orrs	r3, r1
 80004c6:	6093      	str	r3, [r2, #8]
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004c8:	4b32      	ldr	r3, [pc, #200]	@ (8000594 <GPIO_Init+0x1ac>)
 80004ca:	68db      	ldr	r3, [r3, #12]
 80004cc:	687a      	ldr	r2, [r7, #4]
 80004ce:	7912      	ldrb	r2, [r2, #4]
 80004d0:	4611      	mov	r1, r2
 80004d2:	2201      	movs	r2, #1
 80004d4:	408a      	lsls	r2, r1
 80004d6:	43d2      	mvns	r2, r2
 80004d8:	4611      	mov	r1, r2
 80004da:	4a2e      	ldr	r2, [pc, #184]	@ (8000594 <GPIO_Init+0x1ac>)
 80004dc:	400b      	ands	r3, r1
 80004de:	60d3      	str	r3, [r2, #12]
			break;
 80004e0:	e017      	b.n	8000512 <GPIO_Init+0x12a>
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004e2:	4b2c      	ldr	r3, [pc, #176]	@ (8000594 <GPIO_Init+0x1ac>)
 80004e4:	68db      	ldr	r3, [r3, #12]
 80004e6:	687a      	ldr	r2, [r7, #4]
 80004e8:	7912      	ldrb	r2, [r2, #4]
 80004ea:	4611      	mov	r1, r2
 80004ec:	2201      	movs	r2, #1
 80004ee:	408a      	lsls	r2, r1
 80004f0:	4611      	mov	r1, r2
 80004f2:	4a28      	ldr	r2, [pc, #160]	@ (8000594 <GPIO_Init+0x1ac>)
 80004f4:	430b      	orrs	r3, r1
 80004f6:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004f8:	4b26      	ldr	r3, [pc, #152]	@ (8000594 <GPIO_Init+0x1ac>)
 80004fa:	689b      	ldr	r3, [r3, #8]
 80004fc:	687a      	ldr	r2, [r7, #4]
 80004fe:	7912      	ldrb	r2, [r2, #4]
 8000500:	4611      	mov	r1, r2
 8000502:	2201      	movs	r2, #1
 8000504:	408a      	lsls	r2, r1
 8000506:	4611      	mov	r1, r2
 8000508:	4a22      	ldr	r2, [pc, #136]	@ (8000594 <GPIO_Init+0x1ac>)
 800050a:	430b      	orrs	r3, r1
 800050c:	6093      	str	r3, [r2, #8]
			break;
 800050e:	e000      	b.n	8000512 <GPIO_Init+0x12a>
			break;
 8000510:	bf00      	nop
		 * This part is where it chooses the specific EXTI line to program.
		 * temp1 chooses the specific EXTICR peripheral register (out of 4) to program
		 * With the given pin number, we then calculate how much left shift the bits need to program the specific
		 * EXTI which the GPIO number is associated with and stored into Lshift_val. EXTI0 = PIN 0's ----> EXTI15 = PIN 15's.
		 */
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	791b      	ldrb	r3, [r3, #4]
 8000516:	089b      	lsrs	r3, r3, #2
 8000518:	74fb      	strb	r3, [r7, #19]
		uint8_t Lshift_val = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	791b      	ldrb	r3, [r3, #4]
 800051e:	f003 0303 	and.w	r3, r3, #3
 8000522:	74bb      	strb	r3, [r7, #18]

		/*translates the given GPIO port address into a specific GPIO port code for programming
		 * the SYSCFG EXTICR peripheral register.*/
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	4a1b      	ldr	r2, [pc, #108]	@ (8000598 <GPIO_Init+0x1b0>)
 800052a:	4293      	cmp	r3, r2
 800052c:	d044      	beq.n	80005b8 <GPIO_Init+0x1d0>
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	4a1a      	ldr	r2, [pc, #104]	@ (800059c <GPIO_Init+0x1b4>)
 8000534:	4293      	cmp	r3, r2
 8000536:	d02b      	beq.n	8000590 <GPIO_Init+0x1a8>
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	4a18      	ldr	r2, [pc, #96]	@ (80005a0 <GPIO_Init+0x1b8>)
 800053e:	4293      	cmp	r3, r2
 8000540:	d024      	beq.n	800058c <GPIO_Init+0x1a4>
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	4a17      	ldr	r2, [pc, #92]	@ (80005a4 <GPIO_Init+0x1bc>)
 8000548:	4293      	cmp	r3, r2
 800054a:	d01d      	beq.n	8000588 <GPIO_Init+0x1a0>
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	4a15      	ldr	r2, [pc, #84]	@ (80005a8 <GPIO_Init+0x1c0>)
 8000552:	4293      	cmp	r3, r2
 8000554:	d016      	beq.n	8000584 <GPIO_Init+0x19c>
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	4a14      	ldr	r2, [pc, #80]	@ (80005ac <GPIO_Init+0x1c4>)
 800055c:	4293      	cmp	r3, r2
 800055e:	d00f      	beq.n	8000580 <GPIO_Init+0x198>
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	4a12      	ldr	r2, [pc, #72]	@ (80005b0 <GPIO_Init+0x1c8>)
 8000566:	4293      	cmp	r3, r2
 8000568:	d008      	beq.n	800057c <GPIO_Init+0x194>
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	4a11      	ldr	r2, [pc, #68]	@ (80005b4 <GPIO_Init+0x1cc>)
 8000570:	4293      	cmp	r3, r2
 8000572:	d101      	bne.n	8000578 <GPIO_Init+0x190>
 8000574:	2307      	movs	r3, #7
 8000576:	e020      	b.n	80005ba <GPIO_Init+0x1d2>
 8000578:	2300      	movs	r3, #0
 800057a:	e01e      	b.n	80005ba <GPIO_Init+0x1d2>
 800057c:	2306      	movs	r3, #6
 800057e:	e01c      	b.n	80005ba <GPIO_Init+0x1d2>
 8000580:	2305      	movs	r3, #5
 8000582:	e01a      	b.n	80005ba <GPIO_Init+0x1d2>
 8000584:	2304      	movs	r3, #4
 8000586:	e018      	b.n	80005ba <GPIO_Init+0x1d2>
 8000588:	2303      	movs	r3, #3
 800058a:	e016      	b.n	80005ba <GPIO_Init+0x1d2>
 800058c:	2302      	movs	r3, #2
 800058e:	e014      	b.n	80005ba <GPIO_Init+0x1d2>
 8000590:	2301      	movs	r3, #1
 8000592:	e012      	b.n	80005ba <GPIO_Init+0x1d2>
 8000594:	40013c00 	.word	0x40013c00
 8000598:	40020000 	.word	0x40020000
 800059c:	40020400 	.word	0x40020400
 80005a0:	40020800 	.word	0x40020800
 80005a4:	40020c00 	.word	0x40020c00
 80005a8:	40021000 	.word	0x40021000
 80005ac:	40021400 	.word	0x40021400
 80005b0:	40021800 	.word	0x40021800
 80005b4:	40021c00 	.word	0x40021c00
 80005b8:	2300      	movs	r3, #0
 80005ba:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 80005bc:	4b6c      	ldr	r3, [pc, #432]	@ (8000770 <GPIO_Init+0x388>)
 80005be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80005c0:	4a6b      	ldr	r2, [pc, #428]	@ (8000770 <GPIO_Init+0x388>)
 80005c2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005c6:	6453      	str	r3, [r2, #68]	@ 0x44
		SYSCFG->EXTICR[temp1] &= ~(15 << (4*Lshift_val) ); //clears peripheral register bitfield
 80005c8:	4a6a      	ldr	r2, [pc, #424]	@ (8000774 <GPIO_Init+0x38c>)
 80005ca:	7cfb      	ldrb	r3, [r7, #19]
 80005cc:	3302      	adds	r3, #2
 80005ce:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80005d2:	7cbb      	ldrb	r3, [r7, #18]
 80005d4:	009b      	lsls	r3, r3, #2
 80005d6:	210f      	movs	r1, #15
 80005d8:	fa01 f303 	lsl.w	r3, r1, r3
 80005dc:	43db      	mvns	r3, r3
 80005de:	4618      	mov	r0, r3
 80005e0:	4964      	ldr	r1, [pc, #400]	@ (8000774 <GPIO_Init+0x38c>)
 80005e2:	7cfb      	ldrb	r3, [r7, #19]
 80005e4:	4002      	ands	r2, r0
 80005e6:	3302      	adds	r3, #2
 80005e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		SYSCFG->EXTICR[temp1] |= ( portcode << (4*Lshift_val) ); //clears peripheral register bitfield
 80005ec:	4a61      	ldr	r2, [pc, #388]	@ (8000774 <GPIO_Init+0x38c>)
 80005ee:	7cfb      	ldrb	r3, [r7, #19]
 80005f0:	3302      	adds	r3, #2
 80005f2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80005f6:	7c79      	ldrb	r1, [r7, #17]
 80005f8:	7cbb      	ldrb	r3, [r7, #18]
 80005fa:	009b      	lsls	r3, r3, #2
 80005fc:	fa01 f303 	lsl.w	r3, r1, r3
 8000600:	4618      	mov	r0, r3
 8000602:	495c      	ldr	r1, [pc, #368]	@ (8000774 <GPIO_Init+0x38c>)
 8000604:	7cfb      	ldrb	r3, [r7, #19]
 8000606:	4302      	orrs	r2, r0
 8000608:	3302      	adds	r3, #2
 800060a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		/*
		 * /3. enable the EXTI interrupt delivery using IMR.
		 *     Basically unmasks the interrupt that will run through the specific EXTI line
		 */
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800060e:	4b5a      	ldr	r3, [pc, #360]	@ (8000778 <GPIO_Init+0x390>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	687a      	ldr	r2, [r7, #4]
 8000614:	7912      	ldrb	r2, [r2, #4]
 8000616:	4611      	mov	r1, r2
 8000618:	2201      	movs	r2, #1
 800061a:	408a      	lsls	r2, r1
 800061c:	4611      	mov	r1, r2
 800061e:	4a56      	ldr	r2, [pc, #344]	@ (8000778 <GPIO_Init+0x390>)
 8000620:	430b      	orrs	r3, r1
 8000622:	6013      	str	r3, [r2, #0]
	}

	//2. Configure pup pud settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdCtrl << (2 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)) );
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	79db      	ldrb	r3, [r3, #7]
 8000628:	461a      	mov	r2, r3
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	791b      	ldrb	r3, [r3, #4]
 800062e:	005b      	lsls	r3, r3, #1
 8000630:	fa02 f303 	lsl.w	r3, r2, r3
 8000634:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(3 << (2 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)) ); //clears the bit fields first before setting
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	68da      	ldr	r2, [r3, #12]
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	791b      	ldrb	r3, [r3, #4]
 8000640:	005b      	lsls	r3, r3, #1
 8000642:	2103      	movs	r1, #3
 8000644:	fa01 f303 	lsl.w	r3, r1, r3
 8000648:	43db      	mvns	r3, r3
 800064a:	4619      	mov	r1, r3
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	400a      	ands	r2, r1
 8000652:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp; //sets the bit fields
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	68d9      	ldr	r1, [r3, #12]
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	697a      	ldr	r2, [r7, #20]
 8000660:	430a      	orrs	r2, r1
 8000662:	60da      	str	r2, [r3, #12]
	temp = 0;
 8000664:	2300      	movs	r3, #0
 8000666:	617b      	str	r3, [r7, #20]

	//3. Configure output type & output speed(if set only at output mode)
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_OUTPUT){
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	795b      	ldrb	r3, [r3, #5]
 800066c:	2b01      	cmp	r3, #1
 800066e:	d141      	bne.n	80006f4 <GPIO_Init+0x30c>

		//Only executes if user wants to set GPIO as output mode because no pushpull or open drain config for GPIO input mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOType << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	7a1b      	ldrb	r3, [r3, #8]
 8000674:	461a      	mov	r2, r3
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	791b      	ldrb	r3, [r3, #4]
 800067a:	fa02 f303 	lsl.w	r3, r2, r3
 800067e:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->OTYPER &= ~(1 << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) ); //clears the bit fields
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	685a      	ldr	r2, [r3, #4]
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	791b      	ldrb	r3, [r3, #4]
 800068a:	4619      	mov	r1, r3
 800068c:	2301      	movs	r3, #1
 800068e:	408b      	lsls	r3, r1
 8000690:	43db      	mvns	r3, r3
 8000692:	4619      	mov	r1, r3
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	400a      	ands	r2, r1
 800069a:	605a      	str	r2, [r3, #4]
		pGPIOHandle->pGPIOx->OTYPER |= temp; //sets the bit fields
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	6859      	ldr	r1, [r3, #4]
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	697a      	ldr	r2, [r7, #20]
 80006a8:	430a      	orrs	r2, r1
 80006aa:	605a      	str	r2, [r3, #4]
		temp = 0;
 80006ac:	2300      	movs	r3, #0
 80006ae:	617b      	str	r3, [r7, #20]

		//sets GPIO output speed
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)) );
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	799b      	ldrb	r3, [r3, #6]
 80006b4:	461a      	mov	r2, r3
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	791b      	ldrb	r3, [r3, #4]
 80006ba:	005b      	lsls	r3, r3, #1
 80006bc:	fa02 f303 	lsl.w	r3, r2, r3
 80006c0:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->OSPEEDER &= ~(3 << (2 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)) ); //clears the bit fields
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	689a      	ldr	r2, [r3, #8]
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	791b      	ldrb	r3, [r3, #4]
 80006cc:	005b      	lsls	r3, r3, #1
 80006ce:	2103      	movs	r1, #3
 80006d0:	fa01 f303 	lsl.w	r3, r1, r3
 80006d4:	43db      	mvns	r3, r3
 80006d6:	4619      	mov	r1, r3
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	400a      	ands	r2, r1
 80006de:	609a      	str	r2, [r3, #8]
		pGPIOHandle->pGPIOx->OSPEEDER |= temp; //sets the bit fields
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	6899      	ldr	r1, [r3, #8]
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	697a      	ldr	r2, [r7, #20]
 80006ec:	430a      	orrs	r2, r1
 80006ee:	609a      	str	r2, [r3, #8]
		temp = 0;
 80006f0:	2300      	movs	r3, #0
 80006f2:	617b      	str	r3, [r7, #20]
	}

	//4. Configure alternate function setting (if GPIO is set at alternate function mode)
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN){
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	795b      	ldrb	r3, [r3, #5]
 80006f8:	2b02      	cmp	r3, #2
 80006fa:	d134      	bne.n	8000766 <GPIO_Init+0x37e>
		 * The resulting quotient selects whether AFRL = 0 or AFRH = 1 to be used as index in the AFR array
		 * Logic behind: any number that is less than 8 divided by 8 will result in a quotient of 0 since only the integer part is stored
		 * in the variable hence it will  use the 0 index which the AFRL address is at.
		 * If the number (pin number) is greater than 8, the resulting quotient is 1 hence will use the index 1 which the AFRH address is at
		 */
		uint8_t temp1 = ((pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) / 8);
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	791b      	ldrb	r3, [r3, #4]
 8000700:	08db      	lsrs	r3, r3, #3
 8000702:	743b      	strb	r3, [r7, #16]

		/*
		 * the resulting modulo determines the left shift needed for setting the peripheral register
		 */
		uint8_t Lshift_val = ((pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) % 8);
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	791b      	ldrb	r3, [r3, #4]
 8000708:	f003 0307 	and.w	r3, r3, #7
 800070c:	73fb      	strb	r3, [r7, #15]

		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinAFMode << (4 * Lshift_val) );
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	7a5b      	ldrb	r3, [r3, #9]
 8000712:	461a      	mov	r2, r3
 8000714:	7bfb      	ldrb	r3, [r7, #15]
 8000716:	009b      	lsls	r3, r3, #2
 8000718:	fa02 f303 	lsl.w	r3, r2, r3
 800071c:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(15 << (4 * Lshift_val) ); //clears the bit fields in the register before setting
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	7c3a      	ldrb	r2, [r7, #16]
 8000724:	3208      	adds	r2, #8
 8000726:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800072a:	7bfb      	ldrb	r3, [r7, #15]
 800072c:	009b      	lsls	r3, r3, #2
 800072e:	220f      	movs	r2, #15
 8000730:	fa02 f303 	lsl.w	r3, r2, r3
 8000734:	43db      	mvns	r3, r3
 8000736:	4618      	mov	r0, r3
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	7c3a      	ldrb	r2, [r7, #16]
 800073e:	4001      	ands	r1, r0
 8000740:	3208      	adds	r2, #8
 8000742:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= temp;  //Sets the bit fields in the register
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	7c3a      	ldrb	r2, [r7, #16]
 800074c:	3208      	adds	r2, #8
 800074e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	7c3a      	ldrb	r2, [r7, #16]
 8000758:	6979      	ldr	r1, [r7, #20]
 800075a:	4301      	orrs	r1, r0
 800075c:	3208      	adds	r2, #8
 800075e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		temp = 0;
 8000762:	2300      	movs	r3, #0
 8000764:	617b      	str	r3, [r7, #20]
	}

}
 8000766:	bf00      	nop
 8000768:	3718      	adds	r7, #24
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	40023800 	.word	0x40023800
 8000774:	40013800 	.word	0x40013800
 8000778:	40013c00 	.word	0x40013c00

0800077c <GPIO_ReadInputPin>:
 * @return		- uint8_t
 *
 * @Note 		-
 */
uint8_t GPIO_ReadInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 800077c:	b480      	push	{r7}
 800077e:	b085      	sub	sp, #20
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
 8000784:	460b      	mov	r3, r1
 8000786:	70fb      	strb	r3, [r7, #3]
	 * then right shift the data according the the pin number putting the
	 * target data to the 0th bit (LSB) it is then put through a bitwise AND operator
	 * with 0th bit left at 1 to only extract the 0th bit value and clears the remaining 31 bits.
	 */
	uint8_t value;
	value = (uint8_t) ((pGPIOx->IDR >> PinNumber) & 0x00000001);
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	691a      	ldr	r2, [r3, #16]
 800078c:	78fb      	ldrb	r3, [r7, #3]
 800078e:	fa22 f303 	lsr.w	r3, r2, r3
 8000792:	b2db      	uxtb	r3, r3
 8000794:	f003 0301 	and.w	r3, r3, #1
 8000798:	73fb      	strb	r3, [r7, #15]
	return value;
 800079a:	7bfb      	ldrb	r3, [r7, #15]
}
 800079c:	4618      	mov	r0, r3
 800079e:	3714      	adds	r7, #20
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bc80      	pop	{r7}
 80007a4:	4770      	bx	lr
	...

080007a8 <SPI_PeripheralClkCtrl>:
 * @return		- none
 *
 * @Note 		-
 */
void SPI_PeripheralClkCtrl(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
 80007a8:	b480      	push	{r7}
 80007aa:	b085      	sub	sp, #20
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
 80007b0:	460b      	mov	r3, r1
 80007b2:	70fb      	strb	r3, [r7, #3]
	uint8_t temp1 = SPI_BASEADDR_TO_CODE(pSPIx);
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	4a3c      	ldr	r2, [pc, #240]	@ (80008a8 <SPI_PeripheralClkCtrl+0x100>)
 80007b8:	4293      	cmp	r3, r2
 80007ba:	d013      	beq.n	80007e4 <SPI_PeripheralClkCtrl+0x3c>
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	4a3b      	ldr	r2, [pc, #236]	@ (80008ac <SPI_PeripheralClkCtrl+0x104>)
 80007c0:	4293      	cmp	r3, r2
 80007c2:	d00d      	beq.n	80007e0 <SPI_PeripheralClkCtrl+0x38>
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	4a3a      	ldr	r2, [pc, #232]	@ (80008b0 <SPI_PeripheralClkCtrl+0x108>)
 80007c8:	4293      	cmp	r3, r2
 80007ca:	d007      	beq.n	80007dc <SPI_PeripheralClkCtrl+0x34>
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	4a39      	ldr	r2, [pc, #228]	@ (80008b4 <SPI_PeripheralClkCtrl+0x10c>)
 80007d0:	4293      	cmp	r3, r2
 80007d2:	d101      	bne.n	80007d8 <SPI_PeripheralClkCtrl+0x30>
 80007d4:	2303      	movs	r3, #3
 80007d6:	e006      	b.n	80007e6 <SPI_PeripheralClkCtrl+0x3e>
 80007d8:	2300      	movs	r3, #0
 80007da:	e004      	b.n	80007e6 <SPI_PeripheralClkCtrl+0x3e>
 80007dc:	2302      	movs	r3, #2
 80007de:	e002      	b.n	80007e6 <SPI_PeripheralClkCtrl+0x3e>
 80007e0:	2301      	movs	r3, #1
 80007e2:	e000      	b.n	80007e6 <SPI_PeripheralClkCtrl+0x3e>
 80007e4:	2300      	movs	r3, #0
 80007e6:	73fb      	strb	r3, [r7, #15]

	if(EnorDi == ENABLE){
 80007e8:	78fb      	ldrb	r3, [r7, #3]
 80007ea:	2b01      	cmp	r3, #1
 80007ec:	d12a      	bne.n	8000844 <SPI_PeripheralClkCtrl+0x9c>
		/*
		 * I've used switch case statements for better readability compared to previous
		 * version of else if statements.
		 */
		switch(temp1){
 80007ee:	7bfb      	ldrb	r3, [r7, #15]
 80007f0:	2b03      	cmp	r3, #3
 80007f2:	d851      	bhi.n	8000898 <SPI_PeripheralClkCtrl+0xf0>
 80007f4:	a201      	add	r2, pc, #4	@ (adr r2, 80007fc <SPI_PeripheralClkCtrl+0x54>)
 80007f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007fa:	bf00      	nop
 80007fc:	0800080d 	.word	0x0800080d
 8000800:	0800081b 	.word	0x0800081b
 8000804:	08000829 	.word	0x08000829
 8000808:	08000837 	.word	0x08000837
		case 0:
			SPI1_PCLK_EN();
 800080c:	4b2a      	ldr	r3, [pc, #168]	@ (80008b8 <SPI_PeripheralClkCtrl+0x110>)
 800080e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000810:	4a29      	ldr	r2, [pc, #164]	@ (80008b8 <SPI_PeripheralClkCtrl+0x110>)
 8000812:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000816:	6453      	str	r3, [r2, #68]	@ 0x44
			break;
 8000818:	e041      	b.n	800089e <SPI_PeripheralClkCtrl+0xf6>
		case 1:
			SPI2_PCLK_EN();
 800081a:	4b27      	ldr	r3, [pc, #156]	@ (80008b8 <SPI_PeripheralClkCtrl+0x110>)
 800081c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800081e:	4a26      	ldr	r2, [pc, #152]	@ (80008b8 <SPI_PeripheralClkCtrl+0x110>)
 8000820:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000824:	6413      	str	r3, [r2, #64]	@ 0x40
			break;
 8000826:	e03a      	b.n	800089e <SPI_PeripheralClkCtrl+0xf6>
		case 2:
			SPI3_PCLK_EN();
 8000828:	4b23      	ldr	r3, [pc, #140]	@ (80008b8 <SPI_PeripheralClkCtrl+0x110>)
 800082a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800082c:	4a22      	ldr	r2, [pc, #136]	@ (80008b8 <SPI_PeripheralClkCtrl+0x110>)
 800082e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000832:	6413      	str	r3, [r2, #64]	@ 0x40
			break;
 8000834:	e033      	b.n	800089e <SPI_PeripheralClkCtrl+0xf6>
		case 3:
			SPI4_PCLK_EN();
 8000836:	4b20      	ldr	r3, [pc, #128]	@ (80008b8 <SPI_PeripheralClkCtrl+0x110>)
 8000838:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800083a:	4a1f      	ldr	r2, [pc, #124]	@ (80008b8 <SPI_PeripheralClkCtrl+0x110>)
 800083c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000840:	6453      	str	r3, [r2, #68]	@ 0x44
			break;
 8000842:	e02c      	b.n	800089e <SPI_PeripheralClkCtrl+0xf6>
			break;
		}

	}
	else{
		switch(temp1){
 8000844:	7bfb      	ldrb	r3, [r7, #15]
 8000846:	2b03      	cmp	r3, #3
 8000848:	d828      	bhi.n	800089c <SPI_PeripheralClkCtrl+0xf4>
 800084a:	a201      	add	r2, pc, #4	@ (adr r2, 8000850 <SPI_PeripheralClkCtrl+0xa8>)
 800084c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000850:	08000861 	.word	0x08000861
 8000854:	0800086f 	.word	0x0800086f
 8000858:	0800087d 	.word	0x0800087d
 800085c:	0800088b 	.word	0x0800088b
		case 0:
			SPI1_PCLK_DI();
 8000860:	4b15      	ldr	r3, [pc, #84]	@ (80008b8 <SPI_PeripheralClkCtrl+0x110>)
 8000862:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000864:	4a14      	ldr	r2, [pc, #80]	@ (80008b8 <SPI_PeripheralClkCtrl+0x110>)
 8000866:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800086a:	6453      	str	r3, [r2, #68]	@ 0x44
			break;
 800086c:	e017      	b.n	800089e <SPI_PeripheralClkCtrl+0xf6>
		case 1:
			SPI2_PCLK_DI();
 800086e:	4b12      	ldr	r3, [pc, #72]	@ (80008b8 <SPI_PeripheralClkCtrl+0x110>)
 8000870:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000872:	4a11      	ldr	r2, [pc, #68]	@ (80008b8 <SPI_PeripheralClkCtrl+0x110>)
 8000874:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000878:	6413      	str	r3, [r2, #64]	@ 0x40
			break;
 800087a:	e010      	b.n	800089e <SPI_PeripheralClkCtrl+0xf6>
		case 2:
			SPI3_PCLK_DI();
 800087c:	4b0e      	ldr	r3, [pc, #56]	@ (80008b8 <SPI_PeripheralClkCtrl+0x110>)
 800087e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000880:	4a0d      	ldr	r2, [pc, #52]	@ (80008b8 <SPI_PeripheralClkCtrl+0x110>)
 8000882:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000886:	6413      	str	r3, [r2, #64]	@ 0x40
			break;
 8000888:	e009      	b.n	800089e <SPI_PeripheralClkCtrl+0xf6>
		case 3:
			SPI4_PCLK_DI();
 800088a:	4b0b      	ldr	r3, [pc, #44]	@ (80008b8 <SPI_PeripheralClkCtrl+0x110>)
 800088c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800088e:	4a0a      	ldr	r2, [pc, #40]	@ (80008b8 <SPI_PeripheralClkCtrl+0x110>)
 8000890:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8000894:	6453      	str	r3, [r2, #68]	@ 0x44
			break;
 8000896:	e002      	b.n	800089e <SPI_PeripheralClkCtrl+0xf6>
			break;
 8000898:	bf00      	nop
 800089a:	e000      	b.n	800089e <SPI_PeripheralClkCtrl+0xf6>
		default:
			break;
 800089c:	bf00      	nop
		}

	}
}
 800089e:	bf00      	nop
 80008a0:	3714      	adds	r7, #20
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bc80      	pop	{r7}
 80008a6:	4770      	bx	lr
 80008a8:	40013000 	.word	0x40013000
 80008ac:	40003800 	.word	0x40003800
 80008b0:	40003c00 	.word	0x40003c00
 80008b4:	40013400 	.word	0x40013400
 80008b8:	40023800 	.word	0x40023800

080008bc <SPI_Init>:
 * @return		- none
 *
 * @Note 		-
 */
void SPI_Init(SPI_Handle_t *pSPIHandle)
{
 80008bc:	b480      	push	{r7}
 80008be:	b085      	sub	sp, #20
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
	//tempreg acts a placeholer for the CR1 register.
	uint32_t tempreg = 0;
 80008c4:	2300      	movs	r3, #0
 80008c6:	60fb      	str	r3, [r7, #12]

	//1. configure the device mode
	tempreg |= pSPIHandle->SPIConfig.SPI_DeviceMode << 2;
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	791b      	ldrb	r3, [r3, #4]
 80008cc:	009b      	lsls	r3, r3, #2
 80008ce:	68fa      	ldr	r2, [r7, #12]
 80008d0:	4313      	orrs	r3, r2
 80008d2:	60fb      	str	r3, [r7, #12]


	//2. configure bus config
	switch(pSPIHandle->SPIConfig.SPI_BusConfig)
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	795b      	ldrb	r3, [r3, #5]
 80008d8:	2b03      	cmp	r3, #3
 80008da:	d010      	beq.n	80008fe <SPI_Init+0x42>
 80008dc:	2b03      	cmp	r3, #3
 80008de:	dc17      	bgt.n	8000910 <SPI_Init+0x54>
 80008e0:	2b01      	cmp	r3, #1
 80008e2:	d002      	beq.n	80008ea <SPI_Init+0x2e>
 80008e4:	2b02      	cmp	r3, #2
 80008e6:	d005      	beq.n	80008f4 <SPI_Init+0x38>
 80008e8:	e012      	b.n	8000910 <SPI_Init+0x54>
	{
	case 1:		//SPI_BUSCONF_FULLDUPLEX
		//bidi mode should be cleared
		tempreg &= ~(1 << SPI_CR1_BIDIMODE);
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80008f0:	60fb      	str	r3, [r7, #12]
		break;
 80008f2:	e00d      	b.n	8000910 <SPI_Init+0x54>
	case 2:		//SPI_BUSCONF_HALFDUPLEX
		//bidi mode should be set
		tempreg |= 1 << SPI_CR1_BIDIMODE;
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80008fa:	60fb      	str	r3, [r7, #12]
		break;
 80008fc:	e008      	b.n	8000910 <SPI_Init+0x54>
	case 3:		//SPI_BUSCONF_SIMPLEX_RXONLY
		//bidi mode should be cleared
		tempreg &= ~(1 << SPI_CR1_BIDIMODE);
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000904:	60fb      	str	r3, [r7, #12]

		//rxonly bit must be set
		tempreg |= 1 << SPI_CR1_RXONLY;
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800090c:	60fb      	str	r3, [r7, #12]
		break;
 800090e:	bf00      	nop
	}

	//3. Configure the SPI serial clock speed (baud rate)
	tempreg |= pSPIHandle->SPIConfig.SPI_SclkSpeed << SPI_CR1_BAUDRATE;
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	799b      	ldrb	r3, [r3, #6]
 8000914:	00db      	lsls	r3, r3, #3
 8000916:	68fa      	ldr	r2, [r7, #12]
 8000918:	4313      	orrs	r3, r2
 800091a:	60fb      	str	r3, [r7, #12]

	//4. Configure the DFF
	tempreg |= pSPIHandle->SPIConfig.SPI_DFF << SPI_CR1_DFF;
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	79db      	ldrb	r3, [r3, #7]
 8000920:	02db      	lsls	r3, r3, #11
 8000922:	68fa      	ldr	r2, [r7, #12]
 8000924:	4313      	orrs	r3, r2
 8000926:	60fb      	str	r3, [r7, #12]

	//5. Configure the CPOL
	tempreg |= pSPIHandle->SPIConfig.SPI_CPOL << SPI_CR1_CPOL;
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	7a1b      	ldrb	r3, [r3, #8]
 800092c:	005b      	lsls	r3, r3, #1
 800092e:	68fa      	ldr	r2, [r7, #12]
 8000930:	4313      	orrs	r3, r2
 8000932:	60fb      	str	r3, [r7, #12]

	//6. Configure the CPHA
	tempreg |= pSPIHandle->SPIConfig.SPI_CPHA << SPI_CR1_CPHA;
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	7a5b      	ldrb	r3, [r3, #9]
 8000938:	461a      	mov	r2, r3
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	4313      	orrs	r3, r2
 800093e:	60fb      	str	r3, [r7, #12]

	//7. Configure the Software Slave Management (SSM)
	tempreg |= pSPIHandle->SPIConfig.SPI_SSM << SPI_CR1_SSM;
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	7a9b      	ldrb	r3, [r3, #10]
 8000944:	025b      	lsls	r3, r3, #9
 8000946:	68fa      	ldr	r2, [r7, #12]
 8000948:	4313      	orrs	r3, r2
 800094a:	60fb      	str	r3, [r7, #12]

	//writes the value of tempreg to the control register 1 to initialize the SPI peripheral
	pSPIHandle->pSPIx->CR1 = tempreg;
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	68fa      	ldr	r2, [r7, #12]
 8000952:	601a      	str	r2, [r3, #0]
}
 8000954:	bf00      	nop
 8000956:	3714      	adds	r7, #20
 8000958:	46bd      	mov	sp, r7
 800095a:	bc80      	pop	{r7}
 800095c:	4770      	bx	lr

0800095e <SPI_SendData>:
 *
 * @Note 		- This is a blocking call, the function will not return until all the data is sent. Inefficient.
 *                there is a better way to do this using interrupts or DMA
 */
void SPI_SendData(SPI_RegDef_t *pSPIx, uint8_t *pTxBuffer, uint32_t Len)
{
 800095e:	b580      	push	{r7, lr}
 8000960:	b086      	sub	sp, #24
 8000962:	af00      	add	r7, sp, #0
 8000964:	60f8      	str	r0, [r7, #12]
 8000966:	60b9      	str	r1, [r7, #8]
 8000968:	607a      	str	r2, [r7, #4]
	while(Len > 0)
 800096a:	e02c      	b.n	80009c6 <SPI_SendData+0x68>
	{
		//extracts data from TXE and check if its equal to 0 (TXBuffer is not empty).
		//breaks from the loop if TXE = 1, which means TXBuffer is empty and ready to write data in.
		while( SPI_GetFlagStatus(pSPIx, SPI_SR_TXE) == FLAG_RESET );
 800096c:	bf00      	nop
 800096e:	2101      	movs	r1, #1
 8000970:	68f8      	ldr	r0, [r7, #12]
 8000972:	f000 f86c 	bl	8000a4e <SPI_GetFlagStatus>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d0f8      	beq.n	800096e <SPI_SendData+0x10>


		//checks whether DFF is set to 8bit = 0 or 16bit = 1 data frame.
		uint8_t temp1 = ((pSPIx->CR1 >> SPI_CR1_DFF) & 0x0001);
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	0adb      	lsrs	r3, r3, #11
 8000982:	b2db      	uxtb	r3, r3
 8000984:	f003 0301 	and.w	r3, r3, #1
 8000988:	75fb      	strb	r3, [r7, #23]

		switch(temp1)
 800098a:	7dfb      	ldrb	r3, [r7, #23]
 800098c:	2b00      	cmp	r3, #0
 800098e:	d002      	beq.n	8000996 <SPI_SendData+0x38>
 8000990:	2b01      	cmp	r3, #1
 8000992:	d00c      	beq.n	80009ae <SPI_SendData+0x50>

			//Increments pointer address to next 2 bytes to be sent in the next loop
			(uint16_t*)pTxBuffer++;
			break;
		default:
			break;
 8000994:	e017      	b.n	80009c6 <SPI_SendData+0x68>
			pSPIx->DR = *pTxBuffer;
 8000996:	68bb      	ldr	r3, [r7, #8]
 8000998:	781b      	ldrb	r3, [r3, #0]
 800099a:	461a      	mov	r2, r3
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	60da      	str	r2, [r3, #12]
			Len--;
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	3b01      	subs	r3, #1
 80009a4:	607b      	str	r3, [r7, #4]
			pTxBuffer++;
 80009a6:	68bb      	ldr	r3, [r7, #8]
 80009a8:	3301      	adds	r3, #1
 80009aa:	60bb      	str	r3, [r7, #8]
			break;
 80009ac:	e00b      	b.n	80009c6 <SPI_SendData+0x68>
			pSPIx->DR = *((uint16_t*)pTxBuffer);
 80009ae:	68bb      	ldr	r3, [r7, #8]
 80009b0:	881b      	ldrh	r3, [r3, #0]
 80009b2:	461a      	mov	r2, r3
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	60da      	str	r2, [r3, #12]
			Len -= 2;
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	3b02      	subs	r3, #2
 80009bc:	607b      	str	r3, [r7, #4]
			(uint16_t*)pTxBuffer++;
 80009be:	68bb      	ldr	r3, [r7, #8]
 80009c0:	3301      	adds	r3, #1
 80009c2:	60bb      	str	r3, [r7, #8]
			break;
 80009c4:	bf00      	nop
	while(Len > 0)
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d1cf      	bne.n	800096c <SPI_SendData+0xe>
		}

	}
}
 80009cc:	bf00      	nop
 80009ce:	bf00      	nop
 80009d0:	3718      	adds	r7, #24
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}

080009d6 <SPI_ReceiveData>:
 *
 * @Note 		- This is a blocking call, the function will not return until all the data is received. Inefficient.
 *                there is a better way to do this using interrupts or DMA
 */
void SPI_ReceiveData(SPI_RegDef_t *pSPIx, uint8_t *pRxBuffer, uint32_t Len)
{
 80009d6:	b480      	push	{r7}
 80009d8:	b087      	sub	sp, #28
 80009da:	af00      	add	r7, sp, #0
 80009dc:	60f8      	str	r0, [r7, #12]
 80009de:	60b9      	str	r1, [r7, #8]
 80009e0:	607a      	str	r2, [r7, #4]
	while(Len > 0)
 80009e2:	e02b      	b.n	8000a3c <SPI_ReceiveData+0x66>
	{
		//extracts data from RXNE and check if its equal to 1 (RXBuffer is not empty).
		//breaks from the loop if RXNE = 0, which means RXBuffer is empty and ready to write data in.
		while( ((pSPIx->SR >> SPI_SR_RXNE) & 0x0001 ) == FLAG_SET );
 80009e4:	bf00      	nop
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	689b      	ldr	r3, [r3, #8]
 80009ea:	f003 0301 	and.w	r3, r3, #1
 80009ee:	2b01      	cmp	r3, #1
 80009f0:	d0f9      	beq.n	80009e6 <SPI_ReceiveData+0x10>


		//checks whether DFF is set to 8bit = 0 or 16bit = 1 data frame.
		uint8_t temp1 = ((pSPIx->CR1 >> SPI_CR1_DFF) & 0x0001);
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	0adb      	lsrs	r3, r3, #11
 80009f8:	b2db      	uxtb	r3, r3
 80009fa:	f003 0301 	and.w	r3, r3, #1
 80009fe:	75fb      	strb	r3, [r7, #23]

		switch(temp1)
 8000a00:	7dfb      	ldrb	r3, [r7, #23]
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d002      	beq.n	8000a0c <SPI_ReceiveData+0x36>
 8000a06:	2b01      	cmp	r3, #1
 8000a08:	d00c      	beq.n	8000a24 <SPI_ReceiveData+0x4e>

			//Increments pointer address to next 2 bytes to be sent in the next loop
			(uint16_t*)pRxBuffer ++;
			break;
		default:
			break;
 8000a0a:	e017      	b.n	8000a3c <SPI_ReceiveData+0x66>
			*pRxBuffer = (uint8_t) pSPIx->DR;
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	68db      	ldr	r3, [r3, #12]
 8000a10:	b2da      	uxtb	r2, r3
 8000a12:	68bb      	ldr	r3, [r7, #8]
 8000a14:	701a      	strb	r2, [r3, #0]
			Len--;
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	3b01      	subs	r3, #1
 8000a1a:	607b      	str	r3, [r7, #4]
			pRxBuffer++;
 8000a1c:	68bb      	ldr	r3, [r7, #8]
 8000a1e:	3301      	adds	r3, #1
 8000a20:	60bb      	str	r3, [r7, #8]
			break;
 8000a22:	e00b      	b.n	8000a3c <SPI_ReceiveData+0x66>
			*((uint16_t*)pRxBuffer) = (uint16_t) pSPIx->DR;
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	68db      	ldr	r3, [r3, #12]
 8000a28:	b29a      	uxth	r2, r3
 8000a2a:	68bb      	ldr	r3, [r7, #8]
 8000a2c:	801a      	strh	r2, [r3, #0]
			Len -= 2;
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	3b02      	subs	r3, #2
 8000a32:	607b      	str	r3, [r7, #4]
			(uint16_t*)pRxBuffer ++;
 8000a34:	68bb      	ldr	r3, [r7, #8]
 8000a36:	3301      	adds	r3, #1
 8000a38:	60bb      	str	r3, [r7, #8]
			break;
 8000a3a:	bf00      	nop
	while(Len > 0)
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d1d0      	bne.n	80009e4 <SPI_ReceiveData+0xe>
		}

	}
}
 8000a42:	bf00      	nop
 8000a44:	bf00      	nop
 8000a46:	371c      	adds	r7, #28
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bc80      	pop	{r7}
 8000a4c:	4770      	bx	lr

08000a4e <SPI_GetFlagStatus>:
 *
 * @return		- returns the flag status.
 *
 * @Note 		-
 */
uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx, uint8_t FlagName) {
 8000a4e:	b480      	push	{r7}
 8000a50:	b085      	sub	sp, #20
 8000a52:	af00      	add	r7, sp, #0
 8000a54:	6078      	str	r0, [r7, #4]
 8000a56:	460b      	mov	r3, r1
 8000a58:	70fb      	strb	r3, [r7, #3]

	//gets the status of the flag from the status register
	uint8_t flag_status = (pSPIx->SR >> FlagName) & 0x0001;
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	689a      	ldr	r2, [r3, #8]
 8000a5e:	78fb      	ldrb	r3, [r7, #3]
 8000a60:	fa22 f303 	lsr.w	r3, r2, r3
 8000a64:	b2db      	uxtb	r3, r3
 8000a66:	f003 0301 	and.w	r3, r3, #1
 8000a6a:	73fb      	strb	r3, [r7, #15]

	//return the flag status
	return flag_status;
 8000a6c:	7bfb      	ldrb	r3, [r7, #15]

}
 8000a6e:	4618      	mov	r0, r3
 8000a70:	3714      	adds	r7, #20
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bc80      	pop	{r7}
 8000a76:	4770      	bx	lr

08000a78 <delay>:
 * PB15 - MOSI
 *
 * AF5
 */

void delay(uint32_t count) {
 8000a78:	b480      	push	{r7}
 8000a7a:	b085      	sub	sp, #20
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
	for (uint32_t i = 0; i < count; i++);
 8000a80:	2300      	movs	r3, #0
 8000a82:	60fb      	str	r3, [r7, #12]
 8000a84:	e002      	b.n	8000a8c <delay+0x14>
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	3301      	adds	r3, #1
 8000a8a:	60fb      	str	r3, [r7, #12]
 8000a8c:	68fa      	ldr	r2, [r7, #12]
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	429a      	cmp	r2, r3
 8000a92:	d3f8      	bcc.n	8000a86 <delay+0xe>
}
 8000a94:	bf00      	nop
 8000a96:	bf00      	nop
 8000a98:	3714      	adds	r7, #20
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bc80      	pop	{r7}
 8000a9e:	4770      	bx	lr

08000aa0 <GPIOPins_Init>:


void GPIOPins_Init()
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b084      	sub	sp, #16
 8000aa4:	af00      	add	r7, sp, #0
	GPIO_Handle_t GPIOHandle;

	//config PB12 NSS as Alternate function SPI pins
	GPIOHandle.pGPIOx = GPIOB;
 8000aa6:	4b26      	ldr	r3, [pc, #152]	@ (8000b40 <GPIOPins_Init+0xa0>)
 8000aa8:	607b      	str	r3, [r7, #4]
	GPIOHandle.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000aaa:	2302      	movs	r3, #2
 8000aac:	727b      	strb	r3, [r7, #9]
	GPIOHandle.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN12;
 8000aae:	230c      	movs	r3, #12
 8000ab0:	723b      	strb	r3, [r7, #8]
	GPIOHandle.GPIO_PinConfig.GPIO_PinOType = NONE;
 8000ab2:	2310      	movs	r3, #16
 8000ab4:	733b      	strb	r3, [r7, #12]
	GPIOHandle.GPIO_PinConfig.GPIO_PinPuPdCtrl = GPIO_NO_PULLUP_PULLDOWN;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	72fb      	strb	r3, [r7, #11]
	GPIOHandle.GPIO_PinConfig.GPIO_PinSpeed = NONE;
 8000aba:	2310      	movs	r3, #16
 8000abc:	72bb      	strb	r3, [r7, #10]
	GPIOHandle.GPIO_PinConfig.GPIO_PinAFMode = GPIO_AF5;
 8000abe:	2305      	movs	r3, #5
 8000ac0:	737b      	strb	r3, [r7, #13]

	//initialize PB12 config
	GPIO_Init(&GPIOHandle);
 8000ac2:	1d3b      	adds	r3, r7, #4
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f7ff fc8f 	bl	80003e8 <GPIO_Init>


	//config PB13 SCLK as Alternate function SPI pins
	GPIOHandle.pGPIOx = GPIOB;
 8000aca:	4b1d      	ldr	r3, [pc, #116]	@ (8000b40 <GPIOPins_Init+0xa0>)
 8000acc:	607b      	str	r3, [r7, #4]
	GPIOHandle.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000ace:	2302      	movs	r3, #2
 8000ad0:	727b      	strb	r3, [r7, #9]
	GPIOHandle.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN13;
 8000ad2:	230d      	movs	r3, #13
 8000ad4:	723b      	strb	r3, [r7, #8]
	GPIOHandle.GPIO_PinConfig.GPIO_PinOType = NONE;
 8000ad6:	2310      	movs	r3, #16
 8000ad8:	733b      	strb	r3, [r7, #12]
	GPIOHandle.GPIO_PinConfig.GPIO_PinPuPdCtrl = GPIO_NO_PULLUP_PULLDOWN;
 8000ada:	2300      	movs	r3, #0
 8000adc:	72fb      	strb	r3, [r7, #11]
	GPIOHandle.GPIO_PinConfig.GPIO_PinSpeed = NONE;
 8000ade:	2310      	movs	r3, #16
 8000ae0:	72bb      	strb	r3, [r7, #10]
	GPIOHandle.GPIO_PinConfig.GPIO_PinAFMode = GPIO_AF5;
 8000ae2:	2305      	movs	r3, #5
 8000ae4:	737b      	strb	r3, [r7, #13]

	//initialize PB13 config
	GPIO_Init(&GPIOHandle);
 8000ae6:	1d3b      	adds	r3, r7, #4
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f7ff fc7d 	bl	80003e8 <GPIO_Init>

	//config PB14 MISO as Alternate function SPI pins
	GPIOHandle.pGPIOx = GPIOB;
 8000aee:	4b14      	ldr	r3, [pc, #80]	@ (8000b40 <GPIOPins_Init+0xa0>)
 8000af0:	607b      	str	r3, [r7, #4]
	GPIOHandle.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000af2:	2302      	movs	r3, #2
 8000af4:	727b      	strb	r3, [r7, #9]
	GPIOHandle.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN14;
 8000af6:	230e      	movs	r3, #14
 8000af8:	723b      	strb	r3, [r7, #8]
	GPIOHandle.GPIO_PinConfig.GPIO_PinOType = NONE;
 8000afa:	2310      	movs	r3, #16
 8000afc:	733b      	strb	r3, [r7, #12]
	GPIOHandle.GPIO_PinConfig.GPIO_PinPuPdCtrl = GPIO_NO_PULLUP_PULLDOWN;
 8000afe:	2300      	movs	r3, #0
 8000b00:	72fb      	strb	r3, [r7, #11]
	GPIOHandle.GPIO_PinConfig.GPIO_PinSpeed = NONE;
 8000b02:	2310      	movs	r3, #16
 8000b04:	72bb      	strb	r3, [r7, #10]
	GPIOHandle.GPIO_PinConfig.GPIO_PinAFMode = GPIO_AF5;
 8000b06:	2305      	movs	r3, #5
 8000b08:	737b      	strb	r3, [r7, #13]

	//initialize PB14 config
	GPIO_Init(&GPIOHandle);
 8000b0a:	1d3b      	adds	r3, r7, #4
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f7ff fc6b 	bl	80003e8 <GPIO_Init>

	//config PB15 MOSI as Alternate function SPI pins
	GPIOHandle.pGPIOx = GPIOB;
 8000b12:	4b0b      	ldr	r3, [pc, #44]	@ (8000b40 <GPIOPins_Init+0xa0>)
 8000b14:	607b      	str	r3, [r7, #4]
	GPIOHandle.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000b16:	2302      	movs	r3, #2
 8000b18:	727b      	strb	r3, [r7, #9]
	GPIOHandle.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN15;
 8000b1a:	230f      	movs	r3, #15
 8000b1c:	723b      	strb	r3, [r7, #8]
	GPIOHandle.GPIO_PinConfig.GPIO_PinOType = NONE;
 8000b1e:	2310      	movs	r3, #16
 8000b20:	733b      	strb	r3, [r7, #12]
	GPIOHandle.GPIO_PinConfig.GPIO_PinPuPdCtrl = GPIO_NO_PULLUP_PULLDOWN;
 8000b22:	2300      	movs	r3, #0
 8000b24:	72fb      	strb	r3, [r7, #11]
	GPIOHandle.GPIO_PinConfig.GPIO_PinSpeed = NONE;
 8000b26:	2310      	movs	r3, #16
 8000b28:	72bb      	strb	r3, [r7, #10]
	GPIOHandle.GPIO_PinConfig.GPIO_PinAFMode = GPIO_AF5;
 8000b2a:	2305      	movs	r3, #5
 8000b2c:	737b      	strb	r3, [r7, #13]

	//initialize PB15 config
	GPIO_Init(&GPIOHandle);
 8000b2e:	1d3b      	adds	r3, r7, #4
 8000b30:	4618      	mov	r0, r3
 8000b32:	f7ff fc59 	bl	80003e8 <GPIO_Init>
}
 8000b36:	bf00      	nop
 8000b38:	3710      	adds	r7, #16
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	40020400 	.word	0x40020400

08000b44 <GPIOButton_Init>:

void GPIOButton_Init()
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b084      	sub	sp, #16
 8000b48:	af00      	add	r7, sp, #0
	GPIO_Handle_t GPIOHandle;

	//config PC13 as input pin for button
	GPIOHandle.pGPIOx = GPIOC;
 8000b4a:	4b0b      	ldr	r3, [pc, #44]	@ (8000b78 <GPIOButton_Init+0x34>)
 8000b4c:	607b      	str	r3, [r7, #4]
	GPIOHandle.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_INPUT;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	727b      	strb	r3, [r7, #9]
	GPIOHandle.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN13;
 8000b52:	230d      	movs	r3, #13
 8000b54:	723b      	strb	r3, [r7, #8]
	GPIOHandle.GPIO_PinConfig.GPIO_PinOType	= NONE;
 8000b56:	2310      	movs	r3, #16
 8000b58:	733b      	strb	r3, [r7, #12]
	GPIOHandle.GPIO_PinConfig.GPIO_PinPuPdCtrl = GPIO_NO_PULLUP_PULLDOWN;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	72fb      	strb	r3, [r7, #11]
	GPIOHandle.GPIO_PinConfig.GPIO_PinSpeed = NONE;
 8000b5e:	2310      	movs	r3, #16
 8000b60:	72bb      	strb	r3, [r7, #10]
	GPIOHandle.GPIO_PinConfig.GPIO_PinAFMode = NONE;
 8000b62:	2310      	movs	r3, #16
 8000b64:	737b      	strb	r3, [r7, #13]

	//initialize PC13 config
	GPIO_Init(&GPIOHandle);
 8000b66:	1d3b      	adds	r3, r7, #4
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f7ff fc3d 	bl	80003e8 <GPIO_Init>
}
 8000b6e:	bf00      	nop
 8000b70:	3710      	adds	r7, #16
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	40020800 	.word	0x40020800

08000b7c <SPIInit>:


void SPIInit()
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b088      	sub	sp, #32
 8000b80:	af00      	add	r7, sp, #0
	SPI_Handle_t SPI2Handle;

	//config settings for SPI2
	SPI2Handle.pSPIx 						= SPI2;
 8000b82:	4b0c      	ldr	r3, [pc, #48]	@ (8000bb4 <SPIInit+0x38>)
 8000b84:	603b      	str	r3, [r7, #0]
	SPI2Handle.SPIConfig.SPI_BusConfig 		= SPI_BUSCONF_FULLDUPLEX;
 8000b86:	2301      	movs	r3, #1
 8000b88:	717b      	strb	r3, [r7, #5]
	SPI2Handle.SPIConfig.SPI_CPHA 			= SPI_CPHA_LOW;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	727b      	strb	r3, [r7, #9]
	SPI2Handle.SPIConfig.SPI_CPOL 			= SPI_CPOL_LOW;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	723b      	strb	r3, [r7, #8]
	SPI2Handle.SPIConfig.SPI_DFF 			= SPI_DFF_8BITS;
 8000b92:	2300      	movs	r3, #0
 8000b94:	71fb      	strb	r3, [r7, #7]
	SPI2Handle.SPIConfig.SPI_DeviceMode		= SPI_DEVICE_MODE_MASTER;
 8000b96:	2301      	movs	r3, #1
 8000b98:	713b      	strb	r3, [r7, #4]
	SPI2Handle.SPIConfig.SPI_SSM			= SPI_SSM_DI;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	72bb      	strb	r3, [r7, #10]
	SPI2Handle.SPIConfig.SPI_SclkSpeed		= SPI_SCLK_SPEED_DIV8;
 8000b9e:	2302      	movs	r3, #2
 8000ba0:	71bb      	strb	r3, [r7, #6]

	//initialize the SPI2 settings
	SPI_Init(&SPI2Handle);
 8000ba2:	463b      	mov	r3, r7
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f7ff fe89 	bl	80008bc <SPI_Init>
}
 8000baa:	bf00      	nop
 8000bac:	3720      	adds	r7, #32
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	40003800 	.word	0x40003800

08000bb8 <SPI_VerifyResponse>:

uint8_t SPI_VerifyResponse(uint8_t ackbyte) {
 8000bb8:	b480      	push	{r7}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	71fb      	strb	r3, [r7, #7]
	if (ackbyte == 0xA5) {
 8000bc2:	79fb      	ldrb	r3, [r7, #7]
 8000bc4:	2ba5      	cmp	r3, #165	@ 0xa5
 8000bc6:	d101      	bne.n	8000bcc <SPI_VerifyResponse+0x14>
		return 1; //acknowledge byte received
 8000bc8:	2301      	movs	r3, #1
 8000bca:	e000      	b.n	8000bce <SPI_VerifyResponse+0x16>
	} else {
		return 0; //acknowledge byte not received
 8000bcc:	2300      	movs	r3, #0
	}
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	370c      	adds	r7, #12
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bc80      	pop	{r7}
 8000bd6:	4770      	bx	lr

08000bd8 <main>:

int main(void){
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b084      	sub	sp, #16
 8000bdc:	af00      	add	r7, sp, #0

	uint8_t dummy_write = 0xff;
 8000bde:	23ff      	movs	r3, #255	@ 0xff
 8000be0:	73fb      	strb	r3, [r7, #15]
	uint8_t dummy_read;


	GPIOPins_Init();
 8000be2:	f7ff ff5d 	bl	8000aa0 <GPIOPins_Init>
	printf("GPIO Pins Initialized\n");
 8000be6:	4876      	ldr	r0, [pc, #472]	@ (8000dc0 <main+0x1e8>)
 8000be8:	f000 fb00 	bl	80011ec <puts>

	SPIInit();
 8000bec:	f7ff ffc6 	bl	8000b7c <SPIInit>
	printf("SPI Initialized\n");
 8000bf0:	4874      	ldr	r0, [pc, #464]	@ (8000dc4 <main+0x1ec>)
 8000bf2:	f000 fafb 	bl	80011ec <puts>

	GPIOButton_Init();
 8000bf6:	f7ff ffa5 	bl	8000b44 <GPIOButton_Init>
	printf("GPIO Button Initialized\n");
 8000bfa:	4873      	ldr	r0, [pc, #460]	@ (8000dc8 <main+0x1f0>)
 8000bfc:	f000 faf6 	bl	80011ec <puts>

	while(1)
	{
		while(GPIO_ReadInputPin(GPIOC, GPIO_PIN13) == 1); //wait for button press
 8000c00:	bf00      	nop
 8000c02:	210d      	movs	r1, #13
 8000c04:	4871      	ldr	r0, [pc, #452]	@ (8000dcc <main+0x1f4>)
 8000c06:	f7ff fdb9 	bl	800077c <GPIO_ReadInputPin>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b01      	cmp	r3, #1
 8000c0e:	d0f8      	beq.n	8000c02 <main+0x2a>

		delay(1000000); //debounce delay
 8000c10:	486f      	ldr	r0, [pc, #444]	@ (8000dd0 <main+0x1f8>)
 8000c12:	f7ff ff31 	bl	8000a78 <delay>

		SPI_PeripheralClkCtrl(SPI2, ENABLE);
 8000c16:	2101      	movs	r1, #1
 8000c18:	486e      	ldr	r0, [pc, #440]	@ (8000dd4 <main+0x1fc>)
 8000c1a:	f7ff fdc5 	bl	80007a8 <SPI_PeripheralClkCtrl>

		uint8_t commcode = COMMAND_LED_CTRL;
 8000c1e:	2350      	movs	r3, #80	@ 0x50
 8000c20:	737b      	strb	r3, [r7, #13]
		uint8_t ackbyte;
		uint8_t args[2];

		//send command to slave
		SPI_SendData(SPI2, &commcode, 1);
 8000c22:	f107 030d 	add.w	r3, r7, #13
 8000c26:	2201      	movs	r2, #1
 8000c28:	4619      	mov	r1, r3
 8000c2a:	486a      	ldr	r0, [pc, #424]	@ (8000dd4 <main+0x1fc>)
 8000c2c:	f7ff fe97 	bl	800095e <SPI_SendData>
		printf("Sent COMMAND_LED_CTRL to slave\n");
 8000c30:	4869      	ldr	r0, [pc, #420]	@ (8000dd8 <main+0x200>)
 8000c32:	f000 fadb 	bl	80011ec <puts>

		//dummy read to clear RXNE register. Honestly the instructor could have programmed the slave to send
		//a acknowledge byte immediately after sending the command. IDK why? i'll explore more.
		SPI_ReceiveData(SPI2, &dummy_read, 1);
 8000c36:	f107 030e 	add.w	r3, r7, #14
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	4865      	ldr	r0, [pc, #404]	@ (8000dd4 <main+0x1fc>)
 8000c40:	f7ff fec9 	bl	80009d6 <SPI_ReceiveData>

		//send dummy byte to get the ack byte from slave
		SPI_SendData(SPI2, &dummy_write, 1);
 8000c44:	f107 030f 	add.w	r3, r7, #15
 8000c48:	2201      	movs	r2, #1
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	4861      	ldr	r0, [pc, #388]	@ (8000dd4 <main+0x1fc>)
 8000c4e:	f7ff fe86 	bl	800095e <SPI_SendData>

		//receive ack byte from slave
		SPI_ReceiveData(SPI2, &ackbyte, 1);
 8000c52:	f107 030c 	add.w	r3, r7, #12
 8000c56:	2201      	movs	r2, #1
 8000c58:	4619      	mov	r1, r3
 8000c5a:	485e      	ldr	r0, [pc, #376]	@ (8000dd4 <main+0x1fc>)
 8000c5c:	f7ff febb 	bl	80009d6 <SPI_ReceiveData>

		if(SPI_VerifyResponse(ackbyte))
 8000c60:	7b3b      	ldrb	r3, [r7, #12]
 8000c62:	4618      	mov	r0, r3
 8000c64:	f7ff ffa8 	bl	8000bb8 <SPI_VerifyResponse>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d00a      	beq.n	8000c84 <main+0xac>
		{
			args[0] = LED_PIN; //turn on LED
 8000c6e:	2309      	movs	r3, #9
 8000c70:	723b      	strb	r3, [r7, #8]
			args[1] = LED_ON;
 8000c72:	2301      	movs	r3, #1
 8000c74:	727b      	strb	r3, [r7, #9]

			//send the LED control arguments
			SPI_SendData(SPI2, args, 2);
 8000c76:	f107 0308 	add.w	r3, r7, #8
 8000c7a:	2202      	movs	r2, #2
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	4855      	ldr	r0, [pc, #340]	@ (8000dd4 <main+0x1fc>)
 8000c80:	f7ff fe6d 	bl	800095e <SPI_SendData>
		}

		while(GPIO_ReadInputPin(GPIOC, GPIO_PIN13) == 1); //wait for button press
 8000c84:	bf00      	nop
 8000c86:	210d      	movs	r1, #13
 8000c88:	4850      	ldr	r0, [pc, #320]	@ (8000dcc <main+0x1f4>)
 8000c8a:	f7ff fd77 	bl	800077c <GPIO_ReadInputPin>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b01      	cmp	r3, #1
 8000c92:	d0f8      	beq.n	8000c86 <main+0xae>

		delay(1000000); //debounce delay
 8000c94:	484e      	ldr	r0, [pc, #312]	@ (8000dd0 <main+0x1f8>)
 8000c96:	f7ff feef 	bl	8000a78 <delay>

		commcode = COMMAND_SENSOR_READ;
 8000c9a:	2351      	movs	r3, #81	@ 0x51
 8000c9c:	737b      	strb	r3, [r7, #13]
		//send command to slave
		SPI_SendData(SPI2, &commcode, 1);
 8000c9e:	f107 030d 	add.w	r3, r7, #13
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	484b      	ldr	r0, [pc, #300]	@ (8000dd4 <main+0x1fc>)
 8000ca8:	f7ff fe59 	bl	800095e <SPI_SendData>

		//dummy read to clear RXNE register. Honestly the instructor could have programmed the slave to send
		//a acknowledge byte immediately after sending the command. IDK why? i'll explore more.
		SPI_ReceiveData(SPI2, &dummy_read, 1);
 8000cac:	f107 030e 	add.w	r3, r7, #14
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	4847      	ldr	r0, [pc, #284]	@ (8000dd4 <main+0x1fc>)
 8000cb6:	f7ff fe8e 	bl	80009d6 <SPI_ReceiveData>

		//send dummy byte to get the ack byte from slave
		SPI_SendData(SPI2, &dummy_write, 1);
 8000cba:	f107 030f 	add.w	r3, r7, #15
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	4844      	ldr	r0, [pc, #272]	@ (8000dd4 <main+0x1fc>)
 8000cc4:	f7ff fe4b 	bl	800095e <SPI_SendData>

		//receive ack byte from slave
		SPI_ReceiveData(SPI2, &ackbyte, 1);
 8000cc8:	f107 030c 	add.w	r3, r7, #12
 8000ccc:	2201      	movs	r2, #1
 8000cce:	4619      	mov	r1, r3
 8000cd0:	4840      	ldr	r0, [pc, #256]	@ (8000dd4 <main+0x1fc>)
 8000cd2:	f7ff fe80 	bl	80009d6 <SPI_ReceiveData>

		if(SPI_VerifyResponse(ackbyte))
 8000cd6:	7b3b      	ldrb	r3, [r7, #12]
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f7ff ff6d 	bl	8000bb8 <SPI_VerifyResponse>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d01d      	beq.n	8000d20 <main+0x148>
		{
			uint8_t analog_pin = ANLOG_PIN1;
 8000ce4:	2301      	movs	r3, #1
 8000ce6:	71fb      	strb	r3, [r7, #7]

			//sends the analog pin to read
			SPI_SendData(SPI2, &analog_pin, 1);
 8000ce8:	1dfb      	adds	r3, r7, #7
 8000cea:	2201      	movs	r2, #1
 8000cec:	4619      	mov	r1, r3
 8000cee:	4839      	ldr	r0, [pc, #228]	@ (8000dd4 <main+0x1fc>)
 8000cf0:	f7ff fe35 	bl	800095e <SPI_SendData>

			SPI_ReceiveData(SPI2, &dummy_read, 1);
 8000cf4:	f107 030e 	add.w	r3, r7, #14
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	4835      	ldr	r0, [pc, #212]	@ (8000dd4 <main+0x1fc>)
 8000cfe:	f7ff fe6a 	bl	80009d6 <SPI_ReceiveData>

			//send dummy byte to get the sensor data from slave
			SPI_SendData(SPI2, &dummy_write, 1);
 8000d02:	f107 030f 	add.w	r3, r7, #15
 8000d06:	2201      	movs	r2, #1
 8000d08:	4619      	mov	r1, r3
 8000d0a:	4832      	ldr	r0, [pc, #200]	@ (8000dd4 <main+0x1fc>)
 8000d0c:	f7ff fe27 	bl	800095e <SPI_SendData>

			uint8_t sensor_data=0;
 8000d10:	2300      	movs	r3, #0
 8000d12:	71bb      	strb	r3, [r7, #6]
			SPI_ReceiveData(SPI2, &sensor_data, 1);
 8000d14:	1dbb      	adds	r3, r7, #6
 8000d16:	2201      	movs	r2, #1
 8000d18:	4619      	mov	r1, r3
 8000d1a:	482e      	ldr	r0, [pc, #184]	@ (8000dd4 <main+0x1fc>)
 8000d1c:	f7ff fe5b 	bl	80009d6 <SPI_ReceiveData>

		}


		while(GPIO_ReadInputPin(GPIOC, GPIO_PIN13) == 1); //wait for button press
 8000d20:	bf00      	nop
 8000d22:	210d      	movs	r1, #13
 8000d24:	4829      	ldr	r0, [pc, #164]	@ (8000dcc <main+0x1f4>)
 8000d26:	f7ff fd29 	bl	800077c <GPIO_ReadInputPin>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b01      	cmp	r3, #1
 8000d2e:	d0f8      	beq.n	8000d22 <main+0x14a>

		delay(1000000); //debounce delay
 8000d30:	4827      	ldr	r0, [pc, #156]	@ (8000dd0 <main+0x1f8>)
 8000d32:	f7ff fea1 	bl	8000a78 <delay>

		commcode = COMMAND_LED_READ;
 8000d36:	2352      	movs	r3, #82	@ 0x52
 8000d38:	737b      	strb	r3, [r7, #13]
		//send command to slave
		SPI_SendData(SPI2, &commcode, 1);
 8000d3a:	f107 030d 	add.w	r3, r7, #13
 8000d3e:	2201      	movs	r2, #1
 8000d40:	4619      	mov	r1, r3
 8000d42:	4824      	ldr	r0, [pc, #144]	@ (8000dd4 <main+0x1fc>)
 8000d44:	f7ff fe0b 	bl	800095e <SPI_SendData>

		//dummy read to clear RXNE register. Honestly the instructor could have programmed the slave to send
		//a acknowledge byte immediately after sending the command. IDK why? i'll explore more.
		SPI_ReceiveData(SPI2, &dummy_read, 1);
 8000d48:	f107 030e 	add.w	r3, r7, #14
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	4619      	mov	r1, r3
 8000d50:	4820      	ldr	r0, [pc, #128]	@ (8000dd4 <main+0x1fc>)
 8000d52:	f7ff fe40 	bl	80009d6 <SPI_ReceiveData>

		//send dummy byte to get the ack byte from slave
		SPI_SendData(SPI2, &dummy_write, 1);
 8000d56:	f107 030f 	add.w	r3, r7, #15
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	481d      	ldr	r0, [pc, #116]	@ (8000dd4 <main+0x1fc>)
 8000d60:	f7ff fdfd 	bl	800095e <SPI_SendData>

		//receive ack byte from slave
		SPI_ReceiveData(SPI2, &ackbyte, 1);
 8000d64:	f107 030c 	add.w	r3, r7, #12
 8000d68:	2201      	movs	r2, #1
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	4819      	ldr	r0, [pc, #100]	@ (8000dd4 <main+0x1fc>)
 8000d6e:	f7ff fe32 	bl	80009d6 <SPI_ReceiveData>

		if(SPI_VerifyResponse(ackbyte))
 8000d72:	7b3b      	ldrb	r3, [r7, #12]
 8000d74:	4618      	mov	r0, r3
 8000d76:	f7ff ff1f 	bl	8000bb8 <SPI_VerifyResponse>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	f43f af3f 	beq.w	8000c00 <main+0x28>
		{
			uint8_t led_pin = LED_PIN;
 8000d82:	2309      	movs	r3, #9
 8000d84:	717b      	strb	r3, [r7, #5]

			//sends the analog pin to read
			SPI_SendData(SPI2, &led_pin, 1);
 8000d86:	1d7b      	adds	r3, r7, #5
 8000d88:	2201      	movs	r2, #1
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	4811      	ldr	r0, [pc, #68]	@ (8000dd4 <main+0x1fc>)
 8000d8e:	f7ff fde6 	bl	800095e <SPI_SendData>

			SPI_ReceiveData(SPI2, &dummy_read, 1);
 8000d92:	f107 030e 	add.w	r3, r7, #14
 8000d96:	2201      	movs	r2, #1
 8000d98:	4619      	mov	r1, r3
 8000d9a:	480e      	ldr	r0, [pc, #56]	@ (8000dd4 <main+0x1fc>)
 8000d9c:	f7ff fe1b 	bl	80009d6 <SPI_ReceiveData>

			//send dummy byte to get the sensor data from slave
			SPI_SendData(SPI2, &dummy_write, 1);
 8000da0:	f107 030f 	add.w	r3, r7, #15
 8000da4:	2201      	movs	r2, #1
 8000da6:	4619      	mov	r1, r3
 8000da8:	480a      	ldr	r0, [pc, #40]	@ (8000dd4 <main+0x1fc>)
 8000daa:	f7ff fdd8 	bl	800095e <SPI_SendData>

			uint8_t sensor_data=0;
 8000dae:	2300      	movs	r3, #0
 8000db0:	713b      	strb	r3, [r7, #4]
			SPI_ReceiveData(SPI2, &sensor_data, 1);
 8000db2:	1d3b      	adds	r3, r7, #4
 8000db4:	2201      	movs	r2, #1
 8000db6:	4619      	mov	r1, r3
 8000db8:	4806      	ldr	r0, [pc, #24]	@ (8000dd4 <main+0x1fc>)
 8000dba:	f7ff fe0c 	bl	80009d6 <SPI_ReceiveData>
	{
 8000dbe:	e71f      	b.n	8000c00 <main+0x28>
 8000dc0:	08001924 	.word	0x08001924
 8000dc4:	0800193c 	.word	0x0800193c
 8000dc8:	0800194c 	.word	0x0800194c
 8000dcc:	40020800 	.word	0x40020800
 8000dd0:	000f4240 	.word	0x000f4240
 8000dd4:	40003800 	.word	0x40003800
 8000dd8:	08001964 	.word	0x08001964

08000ddc <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b083      	sub	sp, #12
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	4603      	mov	r3, r0
 8000de4:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8000de6:	4b0e      	ldr	r3, [pc, #56]	@ (8000e20 <ITM_SendChar+0x44>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	4a0d      	ldr	r2, [pc, #52]	@ (8000e20 <ITM_SendChar+0x44>)
 8000dec:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000df0:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000df2:	4b0c      	ldr	r3, [pc, #48]	@ (8000e24 <ITM_SendChar+0x48>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	4a0b      	ldr	r2, [pc, #44]	@ (8000e24 <ITM_SendChar+0x48>)
 8000df8:	f043 0301 	orr.w	r3, r3, #1
 8000dfc:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000dfe:	bf00      	nop
 8000e00:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	f003 0301 	and.w	r3, r3, #1
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d0f8      	beq.n	8000e00 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000e0e:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 8000e12:	79fb      	ldrb	r3, [r7, #7]
 8000e14:	6013      	str	r3, [r2, #0]
}
 8000e16:	bf00      	nop
 8000e18:	370c      	adds	r7, #12
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bc80      	pop	{r7}
 8000e1e:	4770      	bx	lr
 8000e20:	e000edfc 	.word	0xe000edfc
 8000e24:	e0000e00 	.word	0xe0000e00

08000e28 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b086      	sub	sp, #24
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	60f8      	str	r0, [r7, #12]
 8000e30:	60b9      	str	r1, [r7, #8]
 8000e32:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e34:	2300      	movs	r3, #0
 8000e36:	617b      	str	r3, [r7, #20]
 8000e38:	e00a      	b.n	8000e50 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000e3a:	f3af 8000 	nop.w
 8000e3e:	4601      	mov	r1, r0
 8000e40:	68bb      	ldr	r3, [r7, #8]
 8000e42:	1c5a      	adds	r2, r3, #1
 8000e44:	60ba      	str	r2, [r7, #8]
 8000e46:	b2ca      	uxtb	r2, r1
 8000e48:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e4a:	697b      	ldr	r3, [r7, #20]
 8000e4c:	3301      	adds	r3, #1
 8000e4e:	617b      	str	r3, [r7, #20]
 8000e50:	697a      	ldr	r2, [r7, #20]
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	429a      	cmp	r2, r3
 8000e56:	dbf0      	blt.n	8000e3a <_read+0x12>
  }

  return len;
 8000e58:	687b      	ldr	r3, [r7, #4]
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	3718      	adds	r7, #24
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}

08000e62 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e62:	b580      	push	{r7, lr}
 8000e64:	b086      	sub	sp, #24
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	60f8      	str	r0, [r7, #12]
 8000e6a:	60b9      	str	r1, [r7, #8]
 8000e6c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e6e:	2300      	movs	r3, #0
 8000e70:	617b      	str	r3, [r7, #20]
 8000e72:	e009      	b.n	8000e88 <_write+0x26>
  {
   // __io_putchar(*ptr++);
    ITM_SendChar(*ptr++);
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	1c5a      	adds	r2, r3, #1
 8000e78:	60ba      	str	r2, [r7, #8]
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f7ff ffad 	bl	8000ddc <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e82:	697b      	ldr	r3, [r7, #20]
 8000e84:	3301      	adds	r3, #1
 8000e86:	617b      	str	r3, [r7, #20]
 8000e88:	697a      	ldr	r2, [r7, #20]
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	429a      	cmp	r2, r3
 8000e8e:	dbf1      	blt.n	8000e74 <_write+0x12>
  }
  return len;
 8000e90:	687b      	ldr	r3, [r7, #4]
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	3718      	adds	r7, #24
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}

08000e9a <_close>:

int _close(int file)
{
 8000e9a:	b480      	push	{r7}
 8000e9c:	b083      	sub	sp, #12
 8000e9e:	af00      	add	r7, sp, #0
 8000ea0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ea2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	370c      	adds	r7, #12
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bc80      	pop	{r7}
 8000eae:	4770      	bx	lr

08000eb0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b083      	sub	sp, #12
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
 8000eb8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000ec0:	605a      	str	r2, [r3, #4]
  return 0;
 8000ec2:	2300      	movs	r3, #0
}
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	370c      	adds	r7, #12
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bc80      	pop	{r7}
 8000ecc:	4770      	bx	lr

08000ece <_isatty>:

int _isatty(int file)
{
 8000ece:	b480      	push	{r7}
 8000ed0:	b083      	sub	sp, #12
 8000ed2:	af00      	add	r7, sp, #0
 8000ed4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ed6:	2301      	movs	r3, #1
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	370c      	adds	r7, #12
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bc80      	pop	{r7}
 8000ee0:	4770      	bx	lr

08000ee2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ee2:	b480      	push	{r7}
 8000ee4:	b085      	sub	sp, #20
 8000ee6:	af00      	add	r7, sp, #0
 8000ee8:	60f8      	str	r0, [r7, #12]
 8000eea:	60b9      	str	r1, [r7, #8]
 8000eec:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000eee:	2300      	movs	r3, #0
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	3714      	adds	r7, #20
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bc80      	pop	{r7}
 8000ef8:	4770      	bx	lr
	...

08000efc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b086      	sub	sp, #24
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f04:	4a14      	ldr	r2, [pc, #80]	@ (8000f58 <_sbrk+0x5c>)
 8000f06:	4b15      	ldr	r3, [pc, #84]	@ (8000f5c <_sbrk+0x60>)
 8000f08:	1ad3      	subs	r3, r2, r3
 8000f0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f10:	4b13      	ldr	r3, [pc, #76]	@ (8000f60 <_sbrk+0x64>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d102      	bne.n	8000f1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f18:	4b11      	ldr	r3, [pc, #68]	@ (8000f60 <_sbrk+0x64>)
 8000f1a:	4a12      	ldr	r2, [pc, #72]	@ (8000f64 <_sbrk+0x68>)
 8000f1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f1e:	4b10      	ldr	r3, [pc, #64]	@ (8000f60 <_sbrk+0x64>)
 8000f20:	681a      	ldr	r2, [r3, #0]
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	4413      	add	r3, r2
 8000f26:	693a      	ldr	r2, [r7, #16]
 8000f28:	429a      	cmp	r2, r3
 8000f2a:	d207      	bcs.n	8000f3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f2c:	f000 fa8c 	bl	8001448 <__errno>
 8000f30:	4603      	mov	r3, r0
 8000f32:	220c      	movs	r2, #12
 8000f34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f36:	f04f 33ff 	mov.w	r3, #4294967295
 8000f3a:	e009      	b.n	8000f50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f3c:	4b08      	ldr	r3, [pc, #32]	@ (8000f60 <_sbrk+0x64>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f42:	4b07      	ldr	r3, [pc, #28]	@ (8000f60 <_sbrk+0x64>)
 8000f44:	681a      	ldr	r2, [r3, #0]
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	4413      	add	r3, r2
 8000f4a:	4a05      	ldr	r2, [pc, #20]	@ (8000f60 <_sbrk+0x64>)
 8000f4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f4e:	68fb      	ldr	r3, [r7, #12]
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	3718      	adds	r7, #24
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	20020000 	.word	0x20020000
 8000f5c:	00000400 	.word	0x00000400
 8000f60:	20000078 	.word	0x20000078
 8000f64:	200001c8 	.word	0x200001c8

08000f68 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f68:	480d      	ldr	r0, [pc, #52]	@ (8000fa0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f6a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f6c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f70:	480c      	ldr	r0, [pc, #48]	@ (8000fa4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f72:	490d      	ldr	r1, [pc, #52]	@ (8000fa8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f74:	4a0d      	ldr	r2, [pc, #52]	@ (8000fac <LoopForever+0xe>)
  movs r3, #0
 8000f76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f78:	e002      	b.n	8000f80 <LoopCopyDataInit>

08000f7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f7e:	3304      	adds	r3, #4

08000f80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f84:	d3f9      	bcc.n	8000f7a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f86:	4a0a      	ldr	r2, [pc, #40]	@ (8000fb0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f88:	4c0a      	ldr	r4, [pc, #40]	@ (8000fb4 <LoopForever+0x16>)
  movs r3, #0
 8000f8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f8c:	e001      	b.n	8000f92 <LoopFillZerobss>

08000f8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f90:	3204      	adds	r2, #4

08000f92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f94:	d3fb      	bcc.n	8000f8e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000f96:	f000 fa5d 	bl	8001454 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f9a:	f7ff fe1d 	bl	8000bd8 <main>

08000f9e <LoopForever>:

LoopForever:
  b LoopForever
 8000f9e:	e7fe      	b.n	8000f9e <LoopForever>
  ldr   r0, =_estack
 8000fa0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000fa4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fa8:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000fac:	0800198c 	.word	0x0800198c
  ldr r2, =_sbss
 8000fb0:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000fb4:	200001c8 	.word	0x200001c8

08000fb8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000fb8:	e7fe      	b.n	8000fb8 <ADC_IRQHandler>
	...

08000fbc <std>:
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	b510      	push	{r4, lr}
 8000fc0:	4604      	mov	r4, r0
 8000fc2:	e9c0 3300 	strd	r3, r3, [r0]
 8000fc6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000fca:	6083      	str	r3, [r0, #8]
 8000fcc:	8181      	strh	r1, [r0, #12]
 8000fce:	6643      	str	r3, [r0, #100]	@ 0x64
 8000fd0:	81c2      	strh	r2, [r0, #14]
 8000fd2:	6183      	str	r3, [r0, #24]
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	2208      	movs	r2, #8
 8000fd8:	305c      	adds	r0, #92	@ 0x5c
 8000fda:	f000 f9e7 	bl	80013ac <memset>
 8000fde:	4b0d      	ldr	r3, [pc, #52]	@ (8001014 <std+0x58>)
 8000fe0:	6263      	str	r3, [r4, #36]	@ 0x24
 8000fe2:	4b0d      	ldr	r3, [pc, #52]	@ (8001018 <std+0x5c>)
 8000fe4:	62a3      	str	r3, [r4, #40]	@ 0x28
 8000fe6:	4b0d      	ldr	r3, [pc, #52]	@ (800101c <std+0x60>)
 8000fe8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8000fea:	4b0d      	ldr	r3, [pc, #52]	@ (8001020 <std+0x64>)
 8000fec:	6323      	str	r3, [r4, #48]	@ 0x30
 8000fee:	4b0d      	ldr	r3, [pc, #52]	@ (8001024 <std+0x68>)
 8000ff0:	6224      	str	r4, [r4, #32]
 8000ff2:	429c      	cmp	r4, r3
 8000ff4:	d006      	beq.n	8001004 <std+0x48>
 8000ff6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8000ffa:	4294      	cmp	r4, r2
 8000ffc:	d002      	beq.n	8001004 <std+0x48>
 8000ffe:	33d0      	adds	r3, #208	@ 0xd0
 8001000:	429c      	cmp	r4, r3
 8001002:	d105      	bne.n	8001010 <std+0x54>
 8001004:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8001008:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800100c:	f000 ba46 	b.w	800149c <__retarget_lock_init_recursive>
 8001010:	bd10      	pop	{r4, pc}
 8001012:	bf00      	nop
 8001014:	080011fd 	.word	0x080011fd
 8001018:	0800121f 	.word	0x0800121f
 800101c:	08001257 	.word	0x08001257
 8001020:	0800127b 	.word	0x0800127b
 8001024:	2000007c 	.word	0x2000007c

08001028 <stdio_exit_handler>:
 8001028:	4a02      	ldr	r2, [pc, #8]	@ (8001034 <stdio_exit_handler+0xc>)
 800102a:	4903      	ldr	r1, [pc, #12]	@ (8001038 <stdio_exit_handler+0x10>)
 800102c:	4803      	ldr	r0, [pc, #12]	@ (800103c <stdio_exit_handler+0x14>)
 800102e:	f000 b869 	b.w	8001104 <_fwalk_sglue>
 8001032:	bf00      	nop
 8001034:	20000000 	.word	0x20000000
 8001038:	08001795 	.word	0x08001795
 800103c:	20000010 	.word	0x20000010

08001040 <cleanup_stdio>:
 8001040:	6841      	ldr	r1, [r0, #4]
 8001042:	4b0c      	ldr	r3, [pc, #48]	@ (8001074 <cleanup_stdio+0x34>)
 8001044:	4299      	cmp	r1, r3
 8001046:	b510      	push	{r4, lr}
 8001048:	4604      	mov	r4, r0
 800104a:	d001      	beq.n	8001050 <cleanup_stdio+0x10>
 800104c:	f000 fba2 	bl	8001794 <_fflush_r>
 8001050:	68a1      	ldr	r1, [r4, #8]
 8001052:	4b09      	ldr	r3, [pc, #36]	@ (8001078 <cleanup_stdio+0x38>)
 8001054:	4299      	cmp	r1, r3
 8001056:	d002      	beq.n	800105e <cleanup_stdio+0x1e>
 8001058:	4620      	mov	r0, r4
 800105a:	f000 fb9b 	bl	8001794 <_fflush_r>
 800105e:	68e1      	ldr	r1, [r4, #12]
 8001060:	4b06      	ldr	r3, [pc, #24]	@ (800107c <cleanup_stdio+0x3c>)
 8001062:	4299      	cmp	r1, r3
 8001064:	d004      	beq.n	8001070 <cleanup_stdio+0x30>
 8001066:	4620      	mov	r0, r4
 8001068:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800106c:	f000 bb92 	b.w	8001794 <_fflush_r>
 8001070:	bd10      	pop	{r4, pc}
 8001072:	bf00      	nop
 8001074:	2000007c 	.word	0x2000007c
 8001078:	200000e4 	.word	0x200000e4
 800107c:	2000014c 	.word	0x2000014c

08001080 <global_stdio_init.part.0>:
 8001080:	b510      	push	{r4, lr}
 8001082:	4b0b      	ldr	r3, [pc, #44]	@ (80010b0 <global_stdio_init.part.0+0x30>)
 8001084:	4c0b      	ldr	r4, [pc, #44]	@ (80010b4 <global_stdio_init.part.0+0x34>)
 8001086:	4a0c      	ldr	r2, [pc, #48]	@ (80010b8 <global_stdio_init.part.0+0x38>)
 8001088:	601a      	str	r2, [r3, #0]
 800108a:	4620      	mov	r0, r4
 800108c:	2200      	movs	r2, #0
 800108e:	2104      	movs	r1, #4
 8001090:	f7ff ff94 	bl	8000fbc <std>
 8001094:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8001098:	2201      	movs	r2, #1
 800109a:	2109      	movs	r1, #9
 800109c:	f7ff ff8e 	bl	8000fbc <std>
 80010a0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80010a4:	2202      	movs	r2, #2
 80010a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80010aa:	2112      	movs	r1, #18
 80010ac:	f7ff bf86 	b.w	8000fbc <std>
 80010b0:	200001b4 	.word	0x200001b4
 80010b4:	2000007c 	.word	0x2000007c
 80010b8:	08001029 	.word	0x08001029

080010bc <__sfp_lock_acquire>:
 80010bc:	4801      	ldr	r0, [pc, #4]	@ (80010c4 <__sfp_lock_acquire+0x8>)
 80010be:	f000 b9ee 	b.w	800149e <__retarget_lock_acquire_recursive>
 80010c2:	bf00      	nop
 80010c4:	200001bd 	.word	0x200001bd

080010c8 <__sfp_lock_release>:
 80010c8:	4801      	ldr	r0, [pc, #4]	@ (80010d0 <__sfp_lock_release+0x8>)
 80010ca:	f000 b9e9 	b.w	80014a0 <__retarget_lock_release_recursive>
 80010ce:	bf00      	nop
 80010d0:	200001bd 	.word	0x200001bd

080010d4 <__sinit>:
 80010d4:	b510      	push	{r4, lr}
 80010d6:	4604      	mov	r4, r0
 80010d8:	f7ff fff0 	bl	80010bc <__sfp_lock_acquire>
 80010dc:	6a23      	ldr	r3, [r4, #32]
 80010de:	b11b      	cbz	r3, 80010e8 <__sinit+0x14>
 80010e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80010e4:	f7ff bff0 	b.w	80010c8 <__sfp_lock_release>
 80010e8:	4b04      	ldr	r3, [pc, #16]	@ (80010fc <__sinit+0x28>)
 80010ea:	6223      	str	r3, [r4, #32]
 80010ec:	4b04      	ldr	r3, [pc, #16]	@ (8001100 <__sinit+0x2c>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d1f5      	bne.n	80010e0 <__sinit+0xc>
 80010f4:	f7ff ffc4 	bl	8001080 <global_stdio_init.part.0>
 80010f8:	e7f2      	b.n	80010e0 <__sinit+0xc>
 80010fa:	bf00      	nop
 80010fc:	08001041 	.word	0x08001041
 8001100:	200001b4 	.word	0x200001b4

08001104 <_fwalk_sglue>:
 8001104:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001108:	4607      	mov	r7, r0
 800110a:	4688      	mov	r8, r1
 800110c:	4614      	mov	r4, r2
 800110e:	2600      	movs	r6, #0
 8001110:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001114:	f1b9 0901 	subs.w	r9, r9, #1
 8001118:	d505      	bpl.n	8001126 <_fwalk_sglue+0x22>
 800111a:	6824      	ldr	r4, [r4, #0]
 800111c:	2c00      	cmp	r4, #0
 800111e:	d1f7      	bne.n	8001110 <_fwalk_sglue+0xc>
 8001120:	4630      	mov	r0, r6
 8001122:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001126:	89ab      	ldrh	r3, [r5, #12]
 8001128:	2b01      	cmp	r3, #1
 800112a:	d907      	bls.n	800113c <_fwalk_sglue+0x38>
 800112c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001130:	3301      	adds	r3, #1
 8001132:	d003      	beq.n	800113c <_fwalk_sglue+0x38>
 8001134:	4629      	mov	r1, r5
 8001136:	4638      	mov	r0, r7
 8001138:	47c0      	blx	r8
 800113a:	4306      	orrs	r6, r0
 800113c:	3568      	adds	r5, #104	@ 0x68
 800113e:	e7e9      	b.n	8001114 <_fwalk_sglue+0x10>

08001140 <_puts_r>:
 8001140:	6a03      	ldr	r3, [r0, #32]
 8001142:	b570      	push	{r4, r5, r6, lr}
 8001144:	6884      	ldr	r4, [r0, #8]
 8001146:	4605      	mov	r5, r0
 8001148:	460e      	mov	r6, r1
 800114a:	b90b      	cbnz	r3, 8001150 <_puts_r+0x10>
 800114c:	f7ff ffc2 	bl	80010d4 <__sinit>
 8001150:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001152:	07db      	lsls	r3, r3, #31
 8001154:	d405      	bmi.n	8001162 <_puts_r+0x22>
 8001156:	89a3      	ldrh	r3, [r4, #12]
 8001158:	0598      	lsls	r0, r3, #22
 800115a:	d402      	bmi.n	8001162 <_puts_r+0x22>
 800115c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800115e:	f000 f99e 	bl	800149e <__retarget_lock_acquire_recursive>
 8001162:	89a3      	ldrh	r3, [r4, #12]
 8001164:	0719      	lsls	r1, r3, #28
 8001166:	d502      	bpl.n	800116e <_puts_r+0x2e>
 8001168:	6923      	ldr	r3, [r4, #16]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d135      	bne.n	80011da <_puts_r+0x9a>
 800116e:	4621      	mov	r1, r4
 8001170:	4628      	mov	r0, r5
 8001172:	f000 f8c5 	bl	8001300 <__swsetup_r>
 8001176:	b380      	cbz	r0, 80011da <_puts_r+0x9a>
 8001178:	f04f 35ff 	mov.w	r5, #4294967295
 800117c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800117e:	07da      	lsls	r2, r3, #31
 8001180:	d405      	bmi.n	800118e <_puts_r+0x4e>
 8001182:	89a3      	ldrh	r3, [r4, #12]
 8001184:	059b      	lsls	r3, r3, #22
 8001186:	d402      	bmi.n	800118e <_puts_r+0x4e>
 8001188:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800118a:	f000 f989 	bl	80014a0 <__retarget_lock_release_recursive>
 800118e:	4628      	mov	r0, r5
 8001190:	bd70      	pop	{r4, r5, r6, pc}
 8001192:	2b00      	cmp	r3, #0
 8001194:	da04      	bge.n	80011a0 <_puts_r+0x60>
 8001196:	69a2      	ldr	r2, [r4, #24]
 8001198:	429a      	cmp	r2, r3
 800119a:	dc17      	bgt.n	80011cc <_puts_r+0x8c>
 800119c:	290a      	cmp	r1, #10
 800119e:	d015      	beq.n	80011cc <_puts_r+0x8c>
 80011a0:	6823      	ldr	r3, [r4, #0]
 80011a2:	1c5a      	adds	r2, r3, #1
 80011a4:	6022      	str	r2, [r4, #0]
 80011a6:	7019      	strb	r1, [r3, #0]
 80011a8:	68a3      	ldr	r3, [r4, #8]
 80011aa:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80011ae:	3b01      	subs	r3, #1
 80011b0:	60a3      	str	r3, [r4, #8]
 80011b2:	2900      	cmp	r1, #0
 80011b4:	d1ed      	bne.n	8001192 <_puts_r+0x52>
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	da11      	bge.n	80011de <_puts_r+0x9e>
 80011ba:	4622      	mov	r2, r4
 80011bc:	210a      	movs	r1, #10
 80011be:	4628      	mov	r0, r5
 80011c0:	f000 f85f 	bl	8001282 <__swbuf_r>
 80011c4:	3001      	adds	r0, #1
 80011c6:	d0d7      	beq.n	8001178 <_puts_r+0x38>
 80011c8:	250a      	movs	r5, #10
 80011ca:	e7d7      	b.n	800117c <_puts_r+0x3c>
 80011cc:	4622      	mov	r2, r4
 80011ce:	4628      	mov	r0, r5
 80011d0:	f000 f857 	bl	8001282 <__swbuf_r>
 80011d4:	3001      	adds	r0, #1
 80011d6:	d1e7      	bne.n	80011a8 <_puts_r+0x68>
 80011d8:	e7ce      	b.n	8001178 <_puts_r+0x38>
 80011da:	3e01      	subs	r6, #1
 80011dc:	e7e4      	b.n	80011a8 <_puts_r+0x68>
 80011de:	6823      	ldr	r3, [r4, #0]
 80011e0:	1c5a      	adds	r2, r3, #1
 80011e2:	6022      	str	r2, [r4, #0]
 80011e4:	220a      	movs	r2, #10
 80011e6:	701a      	strb	r2, [r3, #0]
 80011e8:	e7ee      	b.n	80011c8 <_puts_r+0x88>
	...

080011ec <puts>:
 80011ec:	4b02      	ldr	r3, [pc, #8]	@ (80011f8 <puts+0xc>)
 80011ee:	4601      	mov	r1, r0
 80011f0:	6818      	ldr	r0, [r3, #0]
 80011f2:	f7ff bfa5 	b.w	8001140 <_puts_r>
 80011f6:	bf00      	nop
 80011f8:	2000000c 	.word	0x2000000c

080011fc <__sread>:
 80011fc:	b510      	push	{r4, lr}
 80011fe:	460c      	mov	r4, r1
 8001200:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001204:	f000 f8fc 	bl	8001400 <_read_r>
 8001208:	2800      	cmp	r0, #0
 800120a:	bfab      	itete	ge
 800120c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800120e:	89a3      	ldrhlt	r3, [r4, #12]
 8001210:	181b      	addge	r3, r3, r0
 8001212:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8001216:	bfac      	ite	ge
 8001218:	6563      	strge	r3, [r4, #84]	@ 0x54
 800121a:	81a3      	strhlt	r3, [r4, #12]
 800121c:	bd10      	pop	{r4, pc}

0800121e <__swrite>:
 800121e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001222:	461f      	mov	r7, r3
 8001224:	898b      	ldrh	r3, [r1, #12]
 8001226:	05db      	lsls	r3, r3, #23
 8001228:	4605      	mov	r5, r0
 800122a:	460c      	mov	r4, r1
 800122c:	4616      	mov	r6, r2
 800122e:	d505      	bpl.n	800123c <__swrite+0x1e>
 8001230:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001234:	2302      	movs	r3, #2
 8001236:	2200      	movs	r2, #0
 8001238:	f000 f8d0 	bl	80013dc <_lseek_r>
 800123c:	89a3      	ldrh	r3, [r4, #12]
 800123e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001242:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001246:	81a3      	strh	r3, [r4, #12]
 8001248:	4632      	mov	r2, r6
 800124a:	463b      	mov	r3, r7
 800124c:	4628      	mov	r0, r5
 800124e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001252:	f000 b8e7 	b.w	8001424 <_write_r>

08001256 <__sseek>:
 8001256:	b510      	push	{r4, lr}
 8001258:	460c      	mov	r4, r1
 800125a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800125e:	f000 f8bd 	bl	80013dc <_lseek_r>
 8001262:	1c43      	adds	r3, r0, #1
 8001264:	89a3      	ldrh	r3, [r4, #12]
 8001266:	bf15      	itete	ne
 8001268:	6560      	strne	r0, [r4, #84]	@ 0x54
 800126a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800126e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8001272:	81a3      	strheq	r3, [r4, #12]
 8001274:	bf18      	it	ne
 8001276:	81a3      	strhne	r3, [r4, #12]
 8001278:	bd10      	pop	{r4, pc}

0800127a <__sclose>:
 800127a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800127e:	f000 b89d 	b.w	80013bc <_close_r>

08001282 <__swbuf_r>:
 8001282:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001284:	460e      	mov	r6, r1
 8001286:	4614      	mov	r4, r2
 8001288:	4605      	mov	r5, r0
 800128a:	b118      	cbz	r0, 8001294 <__swbuf_r+0x12>
 800128c:	6a03      	ldr	r3, [r0, #32]
 800128e:	b90b      	cbnz	r3, 8001294 <__swbuf_r+0x12>
 8001290:	f7ff ff20 	bl	80010d4 <__sinit>
 8001294:	69a3      	ldr	r3, [r4, #24]
 8001296:	60a3      	str	r3, [r4, #8]
 8001298:	89a3      	ldrh	r3, [r4, #12]
 800129a:	071a      	lsls	r2, r3, #28
 800129c:	d501      	bpl.n	80012a2 <__swbuf_r+0x20>
 800129e:	6923      	ldr	r3, [r4, #16]
 80012a0:	b943      	cbnz	r3, 80012b4 <__swbuf_r+0x32>
 80012a2:	4621      	mov	r1, r4
 80012a4:	4628      	mov	r0, r5
 80012a6:	f000 f82b 	bl	8001300 <__swsetup_r>
 80012aa:	b118      	cbz	r0, 80012b4 <__swbuf_r+0x32>
 80012ac:	f04f 37ff 	mov.w	r7, #4294967295
 80012b0:	4638      	mov	r0, r7
 80012b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80012b4:	6823      	ldr	r3, [r4, #0]
 80012b6:	6922      	ldr	r2, [r4, #16]
 80012b8:	1a98      	subs	r0, r3, r2
 80012ba:	6963      	ldr	r3, [r4, #20]
 80012bc:	b2f6      	uxtb	r6, r6
 80012be:	4283      	cmp	r3, r0
 80012c0:	4637      	mov	r7, r6
 80012c2:	dc05      	bgt.n	80012d0 <__swbuf_r+0x4e>
 80012c4:	4621      	mov	r1, r4
 80012c6:	4628      	mov	r0, r5
 80012c8:	f000 fa64 	bl	8001794 <_fflush_r>
 80012cc:	2800      	cmp	r0, #0
 80012ce:	d1ed      	bne.n	80012ac <__swbuf_r+0x2a>
 80012d0:	68a3      	ldr	r3, [r4, #8]
 80012d2:	3b01      	subs	r3, #1
 80012d4:	60a3      	str	r3, [r4, #8]
 80012d6:	6823      	ldr	r3, [r4, #0]
 80012d8:	1c5a      	adds	r2, r3, #1
 80012da:	6022      	str	r2, [r4, #0]
 80012dc:	701e      	strb	r6, [r3, #0]
 80012de:	6962      	ldr	r2, [r4, #20]
 80012e0:	1c43      	adds	r3, r0, #1
 80012e2:	429a      	cmp	r2, r3
 80012e4:	d004      	beq.n	80012f0 <__swbuf_r+0x6e>
 80012e6:	89a3      	ldrh	r3, [r4, #12]
 80012e8:	07db      	lsls	r3, r3, #31
 80012ea:	d5e1      	bpl.n	80012b0 <__swbuf_r+0x2e>
 80012ec:	2e0a      	cmp	r6, #10
 80012ee:	d1df      	bne.n	80012b0 <__swbuf_r+0x2e>
 80012f0:	4621      	mov	r1, r4
 80012f2:	4628      	mov	r0, r5
 80012f4:	f000 fa4e 	bl	8001794 <_fflush_r>
 80012f8:	2800      	cmp	r0, #0
 80012fa:	d0d9      	beq.n	80012b0 <__swbuf_r+0x2e>
 80012fc:	e7d6      	b.n	80012ac <__swbuf_r+0x2a>
	...

08001300 <__swsetup_r>:
 8001300:	b538      	push	{r3, r4, r5, lr}
 8001302:	4b29      	ldr	r3, [pc, #164]	@ (80013a8 <__swsetup_r+0xa8>)
 8001304:	4605      	mov	r5, r0
 8001306:	6818      	ldr	r0, [r3, #0]
 8001308:	460c      	mov	r4, r1
 800130a:	b118      	cbz	r0, 8001314 <__swsetup_r+0x14>
 800130c:	6a03      	ldr	r3, [r0, #32]
 800130e:	b90b      	cbnz	r3, 8001314 <__swsetup_r+0x14>
 8001310:	f7ff fee0 	bl	80010d4 <__sinit>
 8001314:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001318:	0719      	lsls	r1, r3, #28
 800131a:	d422      	bmi.n	8001362 <__swsetup_r+0x62>
 800131c:	06da      	lsls	r2, r3, #27
 800131e:	d407      	bmi.n	8001330 <__swsetup_r+0x30>
 8001320:	2209      	movs	r2, #9
 8001322:	602a      	str	r2, [r5, #0]
 8001324:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001328:	81a3      	strh	r3, [r4, #12]
 800132a:	f04f 30ff 	mov.w	r0, #4294967295
 800132e:	e033      	b.n	8001398 <__swsetup_r+0x98>
 8001330:	0758      	lsls	r0, r3, #29
 8001332:	d512      	bpl.n	800135a <__swsetup_r+0x5a>
 8001334:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001336:	b141      	cbz	r1, 800134a <__swsetup_r+0x4a>
 8001338:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800133c:	4299      	cmp	r1, r3
 800133e:	d002      	beq.n	8001346 <__swsetup_r+0x46>
 8001340:	4628      	mov	r0, r5
 8001342:	f000 f8af 	bl	80014a4 <_free_r>
 8001346:	2300      	movs	r3, #0
 8001348:	6363      	str	r3, [r4, #52]	@ 0x34
 800134a:	89a3      	ldrh	r3, [r4, #12]
 800134c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8001350:	81a3      	strh	r3, [r4, #12]
 8001352:	2300      	movs	r3, #0
 8001354:	6063      	str	r3, [r4, #4]
 8001356:	6923      	ldr	r3, [r4, #16]
 8001358:	6023      	str	r3, [r4, #0]
 800135a:	89a3      	ldrh	r3, [r4, #12]
 800135c:	f043 0308 	orr.w	r3, r3, #8
 8001360:	81a3      	strh	r3, [r4, #12]
 8001362:	6923      	ldr	r3, [r4, #16]
 8001364:	b94b      	cbnz	r3, 800137a <__swsetup_r+0x7a>
 8001366:	89a3      	ldrh	r3, [r4, #12]
 8001368:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800136c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001370:	d003      	beq.n	800137a <__swsetup_r+0x7a>
 8001372:	4621      	mov	r1, r4
 8001374:	4628      	mov	r0, r5
 8001376:	f000 fa5b 	bl	8001830 <__smakebuf_r>
 800137a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800137e:	f013 0201 	ands.w	r2, r3, #1
 8001382:	d00a      	beq.n	800139a <__swsetup_r+0x9a>
 8001384:	2200      	movs	r2, #0
 8001386:	60a2      	str	r2, [r4, #8]
 8001388:	6962      	ldr	r2, [r4, #20]
 800138a:	4252      	negs	r2, r2
 800138c:	61a2      	str	r2, [r4, #24]
 800138e:	6922      	ldr	r2, [r4, #16]
 8001390:	b942      	cbnz	r2, 80013a4 <__swsetup_r+0xa4>
 8001392:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8001396:	d1c5      	bne.n	8001324 <__swsetup_r+0x24>
 8001398:	bd38      	pop	{r3, r4, r5, pc}
 800139a:	0799      	lsls	r1, r3, #30
 800139c:	bf58      	it	pl
 800139e:	6962      	ldrpl	r2, [r4, #20]
 80013a0:	60a2      	str	r2, [r4, #8]
 80013a2:	e7f4      	b.n	800138e <__swsetup_r+0x8e>
 80013a4:	2000      	movs	r0, #0
 80013a6:	e7f7      	b.n	8001398 <__swsetup_r+0x98>
 80013a8:	2000000c 	.word	0x2000000c

080013ac <memset>:
 80013ac:	4402      	add	r2, r0
 80013ae:	4603      	mov	r3, r0
 80013b0:	4293      	cmp	r3, r2
 80013b2:	d100      	bne.n	80013b6 <memset+0xa>
 80013b4:	4770      	bx	lr
 80013b6:	f803 1b01 	strb.w	r1, [r3], #1
 80013ba:	e7f9      	b.n	80013b0 <memset+0x4>

080013bc <_close_r>:
 80013bc:	b538      	push	{r3, r4, r5, lr}
 80013be:	4d06      	ldr	r5, [pc, #24]	@ (80013d8 <_close_r+0x1c>)
 80013c0:	2300      	movs	r3, #0
 80013c2:	4604      	mov	r4, r0
 80013c4:	4608      	mov	r0, r1
 80013c6:	602b      	str	r3, [r5, #0]
 80013c8:	f7ff fd67 	bl	8000e9a <_close>
 80013cc:	1c43      	adds	r3, r0, #1
 80013ce:	d102      	bne.n	80013d6 <_close_r+0x1a>
 80013d0:	682b      	ldr	r3, [r5, #0]
 80013d2:	b103      	cbz	r3, 80013d6 <_close_r+0x1a>
 80013d4:	6023      	str	r3, [r4, #0]
 80013d6:	bd38      	pop	{r3, r4, r5, pc}
 80013d8:	200001b8 	.word	0x200001b8

080013dc <_lseek_r>:
 80013dc:	b538      	push	{r3, r4, r5, lr}
 80013de:	4d07      	ldr	r5, [pc, #28]	@ (80013fc <_lseek_r+0x20>)
 80013e0:	4604      	mov	r4, r0
 80013e2:	4608      	mov	r0, r1
 80013e4:	4611      	mov	r1, r2
 80013e6:	2200      	movs	r2, #0
 80013e8:	602a      	str	r2, [r5, #0]
 80013ea:	461a      	mov	r2, r3
 80013ec:	f7ff fd79 	bl	8000ee2 <_lseek>
 80013f0:	1c43      	adds	r3, r0, #1
 80013f2:	d102      	bne.n	80013fa <_lseek_r+0x1e>
 80013f4:	682b      	ldr	r3, [r5, #0]
 80013f6:	b103      	cbz	r3, 80013fa <_lseek_r+0x1e>
 80013f8:	6023      	str	r3, [r4, #0]
 80013fa:	bd38      	pop	{r3, r4, r5, pc}
 80013fc:	200001b8 	.word	0x200001b8

08001400 <_read_r>:
 8001400:	b538      	push	{r3, r4, r5, lr}
 8001402:	4d07      	ldr	r5, [pc, #28]	@ (8001420 <_read_r+0x20>)
 8001404:	4604      	mov	r4, r0
 8001406:	4608      	mov	r0, r1
 8001408:	4611      	mov	r1, r2
 800140a:	2200      	movs	r2, #0
 800140c:	602a      	str	r2, [r5, #0]
 800140e:	461a      	mov	r2, r3
 8001410:	f7ff fd0a 	bl	8000e28 <_read>
 8001414:	1c43      	adds	r3, r0, #1
 8001416:	d102      	bne.n	800141e <_read_r+0x1e>
 8001418:	682b      	ldr	r3, [r5, #0]
 800141a:	b103      	cbz	r3, 800141e <_read_r+0x1e>
 800141c:	6023      	str	r3, [r4, #0]
 800141e:	bd38      	pop	{r3, r4, r5, pc}
 8001420:	200001b8 	.word	0x200001b8

08001424 <_write_r>:
 8001424:	b538      	push	{r3, r4, r5, lr}
 8001426:	4d07      	ldr	r5, [pc, #28]	@ (8001444 <_write_r+0x20>)
 8001428:	4604      	mov	r4, r0
 800142a:	4608      	mov	r0, r1
 800142c:	4611      	mov	r1, r2
 800142e:	2200      	movs	r2, #0
 8001430:	602a      	str	r2, [r5, #0]
 8001432:	461a      	mov	r2, r3
 8001434:	f7ff fd15 	bl	8000e62 <_write>
 8001438:	1c43      	adds	r3, r0, #1
 800143a:	d102      	bne.n	8001442 <_write_r+0x1e>
 800143c:	682b      	ldr	r3, [r5, #0]
 800143e:	b103      	cbz	r3, 8001442 <_write_r+0x1e>
 8001440:	6023      	str	r3, [r4, #0]
 8001442:	bd38      	pop	{r3, r4, r5, pc}
 8001444:	200001b8 	.word	0x200001b8

08001448 <__errno>:
 8001448:	4b01      	ldr	r3, [pc, #4]	@ (8001450 <__errno+0x8>)
 800144a:	6818      	ldr	r0, [r3, #0]
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop
 8001450:	2000000c 	.word	0x2000000c

08001454 <__libc_init_array>:
 8001454:	b570      	push	{r4, r5, r6, lr}
 8001456:	4d0d      	ldr	r5, [pc, #52]	@ (800148c <__libc_init_array+0x38>)
 8001458:	4c0d      	ldr	r4, [pc, #52]	@ (8001490 <__libc_init_array+0x3c>)
 800145a:	1b64      	subs	r4, r4, r5
 800145c:	10a4      	asrs	r4, r4, #2
 800145e:	2600      	movs	r6, #0
 8001460:	42a6      	cmp	r6, r4
 8001462:	d109      	bne.n	8001478 <__libc_init_array+0x24>
 8001464:	4d0b      	ldr	r5, [pc, #44]	@ (8001494 <__libc_init_array+0x40>)
 8001466:	4c0c      	ldr	r4, [pc, #48]	@ (8001498 <__libc_init_array+0x44>)
 8001468:	f000 fa50 	bl	800190c <_init>
 800146c:	1b64      	subs	r4, r4, r5
 800146e:	10a4      	asrs	r4, r4, #2
 8001470:	2600      	movs	r6, #0
 8001472:	42a6      	cmp	r6, r4
 8001474:	d105      	bne.n	8001482 <__libc_init_array+0x2e>
 8001476:	bd70      	pop	{r4, r5, r6, pc}
 8001478:	f855 3b04 	ldr.w	r3, [r5], #4
 800147c:	4798      	blx	r3
 800147e:	3601      	adds	r6, #1
 8001480:	e7ee      	b.n	8001460 <__libc_init_array+0xc>
 8001482:	f855 3b04 	ldr.w	r3, [r5], #4
 8001486:	4798      	blx	r3
 8001488:	3601      	adds	r6, #1
 800148a:	e7f2      	b.n	8001472 <__libc_init_array+0x1e>
 800148c:	08001984 	.word	0x08001984
 8001490:	08001984 	.word	0x08001984
 8001494:	08001984 	.word	0x08001984
 8001498:	08001988 	.word	0x08001988

0800149c <__retarget_lock_init_recursive>:
 800149c:	4770      	bx	lr

0800149e <__retarget_lock_acquire_recursive>:
 800149e:	4770      	bx	lr

080014a0 <__retarget_lock_release_recursive>:
 80014a0:	4770      	bx	lr
	...

080014a4 <_free_r>:
 80014a4:	b538      	push	{r3, r4, r5, lr}
 80014a6:	4605      	mov	r5, r0
 80014a8:	2900      	cmp	r1, #0
 80014aa:	d041      	beq.n	8001530 <_free_r+0x8c>
 80014ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80014b0:	1f0c      	subs	r4, r1, #4
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	bfb8      	it	lt
 80014b6:	18e4      	addlt	r4, r4, r3
 80014b8:	f000 f8e0 	bl	800167c <__malloc_lock>
 80014bc:	4a1d      	ldr	r2, [pc, #116]	@ (8001534 <_free_r+0x90>)
 80014be:	6813      	ldr	r3, [r2, #0]
 80014c0:	b933      	cbnz	r3, 80014d0 <_free_r+0x2c>
 80014c2:	6063      	str	r3, [r4, #4]
 80014c4:	6014      	str	r4, [r2, #0]
 80014c6:	4628      	mov	r0, r5
 80014c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80014cc:	f000 b8dc 	b.w	8001688 <__malloc_unlock>
 80014d0:	42a3      	cmp	r3, r4
 80014d2:	d908      	bls.n	80014e6 <_free_r+0x42>
 80014d4:	6820      	ldr	r0, [r4, #0]
 80014d6:	1821      	adds	r1, r4, r0
 80014d8:	428b      	cmp	r3, r1
 80014da:	bf01      	itttt	eq
 80014dc:	6819      	ldreq	r1, [r3, #0]
 80014de:	685b      	ldreq	r3, [r3, #4]
 80014e0:	1809      	addeq	r1, r1, r0
 80014e2:	6021      	streq	r1, [r4, #0]
 80014e4:	e7ed      	b.n	80014c2 <_free_r+0x1e>
 80014e6:	461a      	mov	r2, r3
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	b10b      	cbz	r3, 80014f0 <_free_r+0x4c>
 80014ec:	42a3      	cmp	r3, r4
 80014ee:	d9fa      	bls.n	80014e6 <_free_r+0x42>
 80014f0:	6811      	ldr	r1, [r2, #0]
 80014f2:	1850      	adds	r0, r2, r1
 80014f4:	42a0      	cmp	r0, r4
 80014f6:	d10b      	bne.n	8001510 <_free_r+0x6c>
 80014f8:	6820      	ldr	r0, [r4, #0]
 80014fa:	4401      	add	r1, r0
 80014fc:	1850      	adds	r0, r2, r1
 80014fe:	4283      	cmp	r3, r0
 8001500:	6011      	str	r1, [r2, #0]
 8001502:	d1e0      	bne.n	80014c6 <_free_r+0x22>
 8001504:	6818      	ldr	r0, [r3, #0]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	6053      	str	r3, [r2, #4]
 800150a:	4408      	add	r0, r1
 800150c:	6010      	str	r0, [r2, #0]
 800150e:	e7da      	b.n	80014c6 <_free_r+0x22>
 8001510:	d902      	bls.n	8001518 <_free_r+0x74>
 8001512:	230c      	movs	r3, #12
 8001514:	602b      	str	r3, [r5, #0]
 8001516:	e7d6      	b.n	80014c6 <_free_r+0x22>
 8001518:	6820      	ldr	r0, [r4, #0]
 800151a:	1821      	adds	r1, r4, r0
 800151c:	428b      	cmp	r3, r1
 800151e:	bf04      	itt	eq
 8001520:	6819      	ldreq	r1, [r3, #0]
 8001522:	685b      	ldreq	r3, [r3, #4]
 8001524:	6063      	str	r3, [r4, #4]
 8001526:	bf04      	itt	eq
 8001528:	1809      	addeq	r1, r1, r0
 800152a:	6021      	streq	r1, [r4, #0]
 800152c:	6054      	str	r4, [r2, #4]
 800152e:	e7ca      	b.n	80014c6 <_free_r+0x22>
 8001530:	bd38      	pop	{r3, r4, r5, pc}
 8001532:	bf00      	nop
 8001534:	200001c4 	.word	0x200001c4

08001538 <sbrk_aligned>:
 8001538:	b570      	push	{r4, r5, r6, lr}
 800153a:	4e0f      	ldr	r6, [pc, #60]	@ (8001578 <sbrk_aligned+0x40>)
 800153c:	460c      	mov	r4, r1
 800153e:	6831      	ldr	r1, [r6, #0]
 8001540:	4605      	mov	r5, r0
 8001542:	b911      	cbnz	r1, 800154a <sbrk_aligned+0x12>
 8001544:	f000 f9d2 	bl	80018ec <_sbrk_r>
 8001548:	6030      	str	r0, [r6, #0]
 800154a:	4621      	mov	r1, r4
 800154c:	4628      	mov	r0, r5
 800154e:	f000 f9cd 	bl	80018ec <_sbrk_r>
 8001552:	1c43      	adds	r3, r0, #1
 8001554:	d103      	bne.n	800155e <sbrk_aligned+0x26>
 8001556:	f04f 34ff 	mov.w	r4, #4294967295
 800155a:	4620      	mov	r0, r4
 800155c:	bd70      	pop	{r4, r5, r6, pc}
 800155e:	1cc4      	adds	r4, r0, #3
 8001560:	f024 0403 	bic.w	r4, r4, #3
 8001564:	42a0      	cmp	r0, r4
 8001566:	d0f8      	beq.n	800155a <sbrk_aligned+0x22>
 8001568:	1a21      	subs	r1, r4, r0
 800156a:	4628      	mov	r0, r5
 800156c:	f000 f9be 	bl	80018ec <_sbrk_r>
 8001570:	3001      	adds	r0, #1
 8001572:	d1f2      	bne.n	800155a <sbrk_aligned+0x22>
 8001574:	e7ef      	b.n	8001556 <sbrk_aligned+0x1e>
 8001576:	bf00      	nop
 8001578:	200001c0 	.word	0x200001c0

0800157c <_malloc_r>:
 800157c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001580:	1ccd      	adds	r5, r1, #3
 8001582:	f025 0503 	bic.w	r5, r5, #3
 8001586:	3508      	adds	r5, #8
 8001588:	2d0c      	cmp	r5, #12
 800158a:	bf38      	it	cc
 800158c:	250c      	movcc	r5, #12
 800158e:	2d00      	cmp	r5, #0
 8001590:	4606      	mov	r6, r0
 8001592:	db01      	blt.n	8001598 <_malloc_r+0x1c>
 8001594:	42a9      	cmp	r1, r5
 8001596:	d904      	bls.n	80015a2 <_malloc_r+0x26>
 8001598:	230c      	movs	r3, #12
 800159a:	6033      	str	r3, [r6, #0]
 800159c:	2000      	movs	r0, #0
 800159e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80015a2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001678 <_malloc_r+0xfc>
 80015a6:	f000 f869 	bl	800167c <__malloc_lock>
 80015aa:	f8d8 3000 	ldr.w	r3, [r8]
 80015ae:	461c      	mov	r4, r3
 80015b0:	bb44      	cbnz	r4, 8001604 <_malloc_r+0x88>
 80015b2:	4629      	mov	r1, r5
 80015b4:	4630      	mov	r0, r6
 80015b6:	f7ff ffbf 	bl	8001538 <sbrk_aligned>
 80015ba:	1c43      	adds	r3, r0, #1
 80015bc:	4604      	mov	r4, r0
 80015be:	d158      	bne.n	8001672 <_malloc_r+0xf6>
 80015c0:	f8d8 4000 	ldr.w	r4, [r8]
 80015c4:	4627      	mov	r7, r4
 80015c6:	2f00      	cmp	r7, #0
 80015c8:	d143      	bne.n	8001652 <_malloc_r+0xd6>
 80015ca:	2c00      	cmp	r4, #0
 80015cc:	d04b      	beq.n	8001666 <_malloc_r+0xea>
 80015ce:	6823      	ldr	r3, [r4, #0]
 80015d0:	4639      	mov	r1, r7
 80015d2:	4630      	mov	r0, r6
 80015d4:	eb04 0903 	add.w	r9, r4, r3
 80015d8:	f000 f988 	bl	80018ec <_sbrk_r>
 80015dc:	4581      	cmp	r9, r0
 80015de:	d142      	bne.n	8001666 <_malloc_r+0xea>
 80015e0:	6821      	ldr	r1, [r4, #0]
 80015e2:	1a6d      	subs	r5, r5, r1
 80015e4:	4629      	mov	r1, r5
 80015e6:	4630      	mov	r0, r6
 80015e8:	f7ff ffa6 	bl	8001538 <sbrk_aligned>
 80015ec:	3001      	adds	r0, #1
 80015ee:	d03a      	beq.n	8001666 <_malloc_r+0xea>
 80015f0:	6823      	ldr	r3, [r4, #0]
 80015f2:	442b      	add	r3, r5
 80015f4:	6023      	str	r3, [r4, #0]
 80015f6:	f8d8 3000 	ldr.w	r3, [r8]
 80015fa:	685a      	ldr	r2, [r3, #4]
 80015fc:	bb62      	cbnz	r2, 8001658 <_malloc_r+0xdc>
 80015fe:	f8c8 7000 	str.w	r7, [r8]
 8001602:	e00f      	b.n	8001624 <_malloc_r+0xa8>
 8001604:	6822      	ldr	r2, [r4, #0]
 8001606:	1b52      	subs	r2, r2, r5
 8001608:	d420      	bmi.n	800164c <_malloc_r+0xd0>
 800160a:	2a0b      	cmp	r2, #11
 800160c:	d917      	bls.n	800163e <_malloc_r+0xc2>
 800160e:	1961      	adds	r1, r4, r5
 8001610:	42a3      	cmp	r3, r4
 8001612:	6025      	str	r5, [r4, #0]
 8001614:	bf18      	it	ne
 8001616:	6059      	strne	r1, [r3, #4]
 8001618:	6863      	ldr	r3, [r4, #4]
 800161a:	bf08      	it	eq
 800161c:	f8c8 1000 	streq.w	r1, [r8]
 8001620:	5162      	str	r2, [r4, r5]
 8001622:	604b      	str	r3, [r1, #4]
 8001624:	4630      	mov	r0, r6
 8001626:	f000 f82f 	bl	8001688 <__malloc_unlock>
 800162a:	f104 000b 	add.w	r0, r4, #11
 800162e:	1d23      	adds	r3, r4, #4
 8001630:	f020 0007 	bic.w	r0, r0, #7
 8001634:	1ac2      	subs	r2, r0, r3
 8001636:	bf1c      	itt	ne
 8001638:	1a1b      	subne	r3, r3, r0
 800163a:	50a3      	strne	r3, [r4, r2]
 800163c:	e7af      	b.n	800159e <_malloc_r+0x22>
 800163e:	6862      	ldr	r2, [r4, #4]
 8001640:	42a3      	cmp	r3, r4
 8001642:	bf0c      	ite	eq
 8001644:	f8c8 2000 	streq.w	r2, [r8]
 8001648:	605a      	strne	r2, [r3, #4]
 800164a:	e7eb      	b.n	8001624 <_malloc_r+0xa8>
 800164c:	4623      	mov	r3, r4
 800164e:	6864      	ldr	r4, [r4, #4]
 8001650:	e7ae      	b.n	80015b0 <_malloc_r+0x34>
 8001652:	463c      	mov	r4, r7
 8001654:	687f      	ldr	r7, [r7, #4]
 8001656:	e7b6      	b.n	80015c6 <_malloc_r+0x4a>
 8001658:	461a      	mov	r2, r3
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	42a3      	cmp	r3, r4
 800165e:	d1fb      	bne.n	8001658 <_malloc_r+0xdc>
 8001660:	2300      	movs	r3, #0
 8001662:	6053      	str	r3, [r2, #4]
 8001664:	e7de      	b.n	8001624 <_malloc_r+0xa8>
 8001666:	230c      	movs	r3, #12
 8001668:	6033      	str	r3, [r6, #0]
 800166a:	4630      	mov	r0, r6
 800166c:	f000 f80c 	bl	8001688 <__malloc_unlock>
 8001670:	e794      	b.n	800159c <_malloc_r+0x20>
 8001672:	6005      	str	r5, [r0, #0]
 8001674:	e7d6      	b.n	8001624 <_malloc_r+0xa8>
 8001676:	bf00      	nop
 8001678:	200001c4 	.word	0x200001c4

0800167c <__malloc_lock>:
 800167c:	4801      	ldr	r0, [pc, #4]	@ (8001684 <__malloc_lock+0x8>)
 800167e:	f7ff bf0e 	b.w	800149e <__retarget_lock_acquire_recursive>
 8001682:	bf00      	nop
 8001684:	200001bc 	.word	0x200001bc

08001688 <__malloc_unlock>:
 8001688:	4801      	ldr	r0, [pc, #4]	@ (8001690 <__malloc_unlock+0x8>)
 800168a:	f7ff bf09 	b.w	80014a0 <__retarget_lock_release_recursive>
 800168e:	bf00      	nop
 8001690:	200001bc 	.word	0x200001bc

08001694 <__sflush_r>:
 8001694:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800169a:	0716      	lsls	r6, r2, #28
 800169c:	4605      	mov	r5, r0
 800169e:	460c      	mov	r4, r1
 80016a0:	d454      	bmi.n	800174c <__sflush_r+0xb8>
 80016a2:	684b      	ldr	r3, [r1, #4]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	dc02      	bgt.n	80016ae <__sflush_r+0x1a>
 80016a8:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	dd48      	ble.n	8001740 <__sflush_r+0xac>
 80016ae:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80016b0:	2e00      	cmp	r6, #0
 80016b2:	d045      	beq.n	8001740 <__sflush_r+0xac>
 80016b4:	2300      	movs	r3, #0
 80016b6:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80016ba:	682f      	ldr	r7, [r5, #0]
 80016bc:	6a21      	ldr	r1, [r4, #32]
 80016be:	602b      	str	r3, [r5, #0]
 80016c0:	d030      	beq.n	8001724 <__sflush_r+0x90>
 80016c2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80016c4:	89a3      	ldrh	r3, [r4, #12]
 80016c6:	0759      	lsls	r1, r3, #29
 80016c8:	d505      	bpl.n	80016d6 <__sflush_r+0x42>
 80016ca:	6863      	ldr	r3, [r4, #4]
 80016cc:	1ad2      	subs	r2, r2, r3
 80016ce:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80016d0:	b10b      	cbz	r3, 80016d6 <__sflush_r+0x42>
 80016d2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80016d4:	1ad2      	subs	r2, r2, r3
 80016d6:	2300      	movs	r3, #0
 80016d8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80016da:	6a21      	ldr	r1, [r4, #32]
 80016dc:	4628      	mov	r0, r5
 80016de:	47b0      	blx	r6
 80016e0:	1c43      	adds	r3, r0, #1
 80016e2:	89a3      	ldrh	r3, [r4, #12]
 80016e4:	d106      	bne.n	80016f4 <__sflush_r+0x60>
 80016e6:	6829      	ldr	r1, [r5, #0]
 80016e8:	291d      	cmp	r1, #29
 80016ea:	d82b      	bhi.n	8001744 <__sflush_r+0xb0>
 80016ec:	4a28      	ldr	r2, [pc, #160]	@ (8001790 <__sflush_r+0xfc>)
 80016ee:	40ca      	lsrs	r2, r1
 80016f0:	07d6      	lsls	r6, r2, #31
 80016f2:	d527      	bpl.n	8001744 <__sflush_r+0xb0>
 80016f4:	2200      	movs	r2, #0
 80016f6:	6062      	str	r2, [r4, #4]
 80016f8:	04d9      	lsls	r1, r3, #19
 80016fa:	6922      	ldr	r2, [r4, #16]
 80016fc:	6022      	str	r2, [r4, #0]
 80016fe:	d504      	bpl.n	800170a <__sflush_r+0x76>
 8001700:	1c42      	adds	r2, r0, #1
 8001702:	d101      	bne.n	8001708 <__sflush_r+0x74>
 8001704:	682b      	ldr	r3, [r5, #0]
 8001706:	b903      	cbnz	r3, 800170a <__sflush_r+0x76>
 8001708:	6560      	str	r0, [r4, #84]	@ 0x54
 800170a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800170c:	602f      	str	r7, [r5, #0]
 800170e:	b1b9      	cbz	r1, 8001740 <__sflush_r+0xac>
 8001710:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001714:	4299      	cmp	r1, r3
 8001716:	d002      	beq.n	800171e <__sflush_r+0x8a>
 8001718:	4628      	mov	r0, r5
 800171a:	f7ff fec3 	bl	80014a4 <_free_r>
 800171e:	2300      	movs	r3, #0
 8001720:	6363      	str	r3, [r4, #52]	@ 0x34
 8001722:	e00d      	b.n	8001740 <__sflush_r+0xac>
 8001724:	2301      	movs	r3, #1
 8001726:	4628      	mov	r0, r5
 8001728:	47b0      	blx	r6
 800172a:	4602      	mov	r2, r0
 800172c:	1c50      	adds	r0, r2, #1
 800172e:	d1c9      	bne.n	80016c4 <__sflush_r+0x30>
 8001730:	682b      	ldr	r3, [r5, #0]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d0c6      	beq.n	80016c4 <__sflush_r+0x30>
 8001736:	2b1d      	cmp	r3, #29
 8001738:	d001      	beq.n	800173e <__sflush_r+0xaa>
 800173a:	2b16      	cmp	r3, #22
 800173c:	d11d      	bne.n	800177a <__sflush_r+0xe6>
 800173e:	602f      	str	r7, [r5, #0]
 8001740:	2000      	movs	r0, #0
 8001742:	e021      	b.n	8001788 <__sflush_r+0xf4>
 8001744:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001748:	b21b      	sxth	r3, r3
 800174a:	e01a      	b.n	8001782 <__sflush_r+0xee>
 800174c:	690f      	ldr	r7, [r1, #16]
 800174e:	2f00      	cmp	r7, #0
 8001750:	d0f6      	beq.n	8001740 <__sflush_r+0xac>
 8001752:	0793      	lsls	r3, r2, #30
 8001754:	680e      	ldr	r6, [r1, #0]
 8001756:	bf08      	it	eq
 8001758:	694b      	ldreq	r3, [r1, #20]
 800175a:	600f      	str	r7, [r1, #0]
 800175c:	bf18      	it	ne
 800175e:	2300      	movne	r3, #0
 8001760:	1bf6      	subs	r6, r6, r7
 8001762:	608b      	str	r3, [r1, #8]
 8001764:	2e00      	cmp	r6, #0
 8001766:	ddeb      	ble.n	8001740 <__sflush_r+0xac>
 8001768:	6a21      	ldr	r1, [r4, #32]
 800176a:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800176e:	4633      	mov	r3, r6
 8001770:	463a      	mov	r2, r7
 8001772:	4628      	mov	r0, r5
 8001774:	47e0      	blx	ip
 8001776:	2800      	cmp	r0, #0
 8001778:	dc07      	bgt.n	800178a <__sflush_r+0xf6>
 800177a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800177e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001782:	81a3      	strh	r3, [r4, #12]
 8001784:	f04f 30ff 	mov.w	r0, #4294967295
 8001788:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800178a:	4407      	add	r7, r0
 800178c:	1a36      	subs	r6, r6, r0
 800178e:	e7e9      	b.n	8001764 <__sflush_r+0xd0>
 8001790:	20400001 	.word	0x20400001

08001794 <_fflush_r>:
 8001794:	b538      	push	{r3, r4, r5, lr}
 8001796:	690b      	ldr	r3, [r1, #16]
 8001798:	4605      	mov	r5, r0
 800179a:	460c      	mov	r4, r1
 800179c:	b913      	cbnz	r3, 80017a4 <_fflush_r+0x10>
 800179e:	2500      	movs	r5, #0
 80017a0:	4628      	mov	r0, r5
 80017a2:	bd38      	pop	{r3, r4, r5, pc}
 80017a4:	b118      	cbz	r0, 80017ae <_fflush_r+0x1a>
 80017a6:	6a03      	ldr	r3, [r0, #32]
 80017a8:	b90b      	cbnz	r3, 80017ae <_fflush_r+0x1a>
 80017aa:	f7ff fc93 	bl	80010d4 <__sinit>
 80017ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d0f3      	beq.n	800179e <_fflush_r+0xa>
 80017b6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80017b8:	07d0      	lsls	r0, r2, #31
 80017ba:	d404      	bmi.n	80017c6 <_fflush_r+0x32>
 80017bc:	0599      	lsls	r1, r3, #22
 80017be:	d402      	bmi.n	80017c6 <_fflush_r+0x32>
 80017c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80017c2:	f7ff fe6c 	bl	800149e <__retarget_lock_acquire_recursive>
 80017c6:	4628      	mov	r0, r5
 80017c8:	4621      	mov	r1, r4
 80017ca:	f7ff ff63 	bl	8001694 <__sflush_r>
 80017ce:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80017d0:	07da      	lsls	r2, r3, #31
 80017d2:	4605      	mov	r5, r0
 80017d4:	d4e4      	bmi.n	80017a0 <_fflush_r+0xc>
 80017d6:	89a3      	ldrh	r3, [r4, #12]
 80017d8:	059b      	lsls	r3, r3, #22
 80017da:	d4e1      	bmi.n	80017a0 <_fflush_r+0xc>
 80017dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80017de:	f7ff fe5f 	bl	80014a0 <__retarget_lock_release_recursive>
 80017e2:	e7dd      	b.n	80017a0 <_fflush_r+0xc>

080017e4 <__swhatbuf_r>:
 80017e4:	b570      	push	{r4, r5, r6, lr}
 80017e6:	460c      	mov	r4, r1
 80017e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80017ec:	2900      	cmp	r1, #0
 80017ee:	b096      	sub	sp, #88	@ 0x58
 80017f0:	4615      	mov	r5, r2
 80017f2:	461e      	mov	r6, r3
 80017f4:	da0d      	bge.n	8001812 <__swhatbuf_r+0x2e>
 80017f6:	89a3      	ldrh	r3, [r4, #12]
 80017f8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80017fc:	f04f 0100 	mov.w	r1, #0
 8001800:	bf14      	ite	ne
 8001802:	2340      	movne	r3, #64	@ 0x40
 8001804:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8001808:	2000      	movs	r0, #0
 800180a:	6031      	str	r1, [r6, #0]
 800180c:	602b      	str	r3, [r5, #0]
 800180e:	b016      	add	sp, #88	@ 0x58
 8001810:	bd70      	pop	{r4, r5, r6, pc}
 8001812:	466a      	mov	r2, sp
 8001814:	f000 f848 	bl	80018a8 <_fstat_r>
 8001818:	2800      	cmp	r0, #0
 800181a:	dbec      	blt.n	80017f6 <__swhatbuf_r+0x12>
 800181c:	9901      	ldr	r1, [sp, #4]
 800181e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8001822:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8001826:	4259      	negs	r1, r3
 8001828:	4159      	adcs	r1, r3
 800182a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800182e:	e7eb      	b.n	8001808 <__swhatbuf_r+0x24>

08001830 <__smakebuf_r>:
 8001830:	898b      	ldrh	r3, [r1, #12]
 8001832:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001834:	079d      	lsls	r5, r3, #30
 8001836:	4606      	mov	r6, r0
 8001838:	460c      	mov	r4, r1
 800183a:	d507      	bpl.n	800184c <__smakebuf_r+0x1c>
 800183c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8001840:	6023      	str	r3, [r4, #0]
 8001842:	6123      	str	r3, [r4, #16]
 8001844:	2301      	movs	r3, #1
 8001846:	6163      	str	r3, [r4, #20]
 8001848:	b003      	add	sp, #12
 800184a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800184c:	ab01      	add	r3, sp, #4
 800184e:	466a      	mov	r2, sp
 8001850:	f7ff ffc8 	bl	80017e4 <__swhatbuf_r>
 8001854:	9f00      	ldr	r7, [sp, #0]
 8001856:	4605      	mov	r5, r0
 8001858:	4639      	mov	r1, r7
 800185a:	4630      	mov	r0, r6
 800185c:	f7ff fe8e 	bl	800157c <_malloc_r>
 8001860:	b948      	cbnz	r0, 8001876 <__smakebuf_r+0x46>
 8001862:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001866:	059a      	lsls	r2, r3, #22
 8001868:	d4ee      	bmi.n	8001848 <__smakebuf_r+0x18>
 800186a:	f023 0303 	bic.w	r3, r3, #3
 800186e:	f043 0302 	orr.w	r3, r3, #2
 8001872:	81a3      	strh	r3, [r4, #12]
 8001874:	e7e2      	b.n	800183c <__smakebuf_r+0xc>
 8001876:	89a3      	ldrh	r3, [r4, #12]
 8001878:	6020      	str	r0, [r4, #0]
 800187a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800187e:	81a3      	strh	r3, [r4, #12]
 8001880:	9b01      	ldr	r3, [sp, #4]
 8001882:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8001886:	b15b      	cbz	r3, 80018a0 <__smakebuf_r+0x70>
 8001888:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800188c:	4630      	mov	r0, r6
 800188e:	f000 f81d 	bl	80018cc <_isatty_r>
 8001892:	b128      	cbz	r0, 80018a0 <__smakebuf_r+0x70>
 8001894:	89a3      	ldrh	r3, [r4, #12]
 8001896:	f023 0303 	bic.w	r3, r3, #3
 800189a:	f043 0301 	orr.w	r3, r3, #1
 800189e:	81a3      	strh	r3, [r4, #12]
 80018a0:	89a3      	ldrh	r3, [r4, #12]
 80018a2:	431d      	orrs	r5, r3
 80018a4:	81a5      	strh	r5, [r4, #12]
 80018a6:	e7cf      	b.n	8001848 <__smakebuf_r+0x18>

080018a8 <_fstat_r>:
 80018a8:	b538      	push	{r3, r4, r5, lr}
 80018aa:	4d07      	ldr	r5, [pc, #28]	@ (80018c8 <_fstat_r+0x20>)
 80018ac:	2300      	movs	r3, #0
 80018ae:	4604      	mov	r4, r0
 80018b0:	4608      	mov	r0, r1
 80018b2:	4611      	mov	r1, r2
 80018b4:	602b      	str	r3, [r5, #0]
 80018b6:	f7ff fafb 	bl	8000eb0 <_fstat>
 80018ba:	1c43      	adds	r3, r0, #1
 80018bc:	d102      	bne.n	80018c4 <_fstat_r+0x1c>
 80018be:	682b      	ldr	r3, [r5, #0]
 80018c0:	b103      	cbz	r3, 80018c4 <_fstat_r+0x1c>
 80018c2:	6023      	str	r3, [r4, #0]
 80018c4:	bd38      	pop	{r3, r4, r5, pc}
 80018c6:	bf00      	nop
 80018c8:	200001b8 	.word	0x200001b8

080018cc <_isatty_r>:
 80018cc:	b538      	push	{r3, r4, r5, lr}
 80018ce:	4d06      	ldr	r5, [pc, #24]	@ (80018e8 <_isatty_r+0x1c>)
 80018d0:	2300      	movs	r3, #0
 80018d2:	4604      	mov	r4, r0
 80018d4:	4608      	mov	r0, r1
 80018d6:	602b      	str	r3, [r5, #0]
 80018d8:	f7ff faf9 	bl	8000ece <_isatty>
 80018dc:	1c43      	adds	r3, r0, #1
 80018de:	d102      	bne.n	80018e6 <_isatty_r+0x1a>
 80018e0:	682b      	ldr	r3, [r5, #0]
 80018e2:	b103      	cbz	r3, 80018e6 <_isatty_r+0x1a>
 80018e4:	6023      	str	r3, [r4, #0]
 80018e6:	bd38      	pop	{r3, r4, r5, pc}
 80018e8:	200001b8 	.word	0x200001b8

080018ec <_sbrk_r>:
 80018ec:	b538      	push	{r3, r4, r5, lr}
 80018ee:	4d06      	ldr	r5, [pc, #24]	@ (8001908 <_sbrk_r+0x1c>)
 80018f0:	2300      	movs	r3, #0
 80018f2:	4604      	mov	r4, r0
 80018f4:	4608      	mov	r0, r1
 80018f6:	602b      	str	r3, [r5, #0]
 80018f8:	f7ff fb00 	bl	8000efc <_sbrk>
 80018fc:	1c43      	adds	r3, r0, #1
 80018fe:	d102      	bne.n	8001906 <_sbrk_r+0x1a>
 8001900:	682b      	ldr	r3, [r5, #0]
 8001902:	b103      	cbz	r3, 8001906 <_sbrk_r+0x1a>
 8001904:	6023      	str	r3, [r4, #0]
 8001906:	bd38      	pop	{r3, r4, r5, pc}
 8001908:	200001b8 	.word	0x200001b8

0800190c <_init>:
 800190c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800190e:	bf00      	nop
 8001910:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001912:	bc08      	pop	{r3}
 8001914:	469e      	mov	lr, r3
 8001916:	4770      	bx	lr

08001918 <_fini>:
 8001918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800191a:	bf00      	nop
 800191c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800191e:	bc08      	pop	{r3}
 8001920:	469e      	mov	lr, r3
 8001922:	4770      	bx	lr
