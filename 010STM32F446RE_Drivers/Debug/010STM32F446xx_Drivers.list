
010STM32F446xx_Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002930  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  08002b00  08002b00  00003b00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b44  08002b44  00004060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08002b44  08002b44  00003b44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002b4c  08002b4c  00004060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b4c  08002b4c  00003b4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002b50  08002b50  00003b50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08002b54  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000019c  20000060  08002bb4  00004060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001fc  08002bb4  000041fc  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00004060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002197  00000000  00000000  0000408a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000087a  00000000  00000000  00006221  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000280  00000000  00000000  00006aa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000001d3  00000000  00000000  00006d20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000379f  00000000  00000000  00006ef3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002fce  00000000  00000000  0000a692  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000ca6b  00000000  00000000  0000d660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0001a0cb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001270  00000000  00000000  0001a110  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  0001b380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000060 	.word	0x20000060
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08002ae8 	.word	0x08002ae8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000064 	.word	0x20000064
 800020c:	08002ae8 	.word	0x08002ae8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_dmul>:
 80002b0:	b570      	push	{r4, r5, r6, lr}
 80002b2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80002b6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80002ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002be:	bf1d      	ittte	ne
 80002c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002c4:	ea94 0f0c 	teqne	r4, ip
 80002c8:	ea95 0f0c 	teqne	r5, ip
 80002cc:	f000 f8de 	bleq	800048c <__aeabi_dmul+0x1dc>
 80002d0:	442c      	add	r4, r5
 80002d2:	ea81 0603 	eor.w	r6, r1, r3
 80002d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002e2:	bf18      	it	ne
 80002e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002ec:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80002f0:	d038      	beq.n	8000364 <__aeabi_dmul+0xb4>
 80002f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002f6:	f04f 0500 	mov.w	r5, #0
 80002fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002fe:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000302:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000306:	f04f 0600 	mov.w	r6, #0
 800030a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800030e:	f09c 0f00 	teq	ip, #0
 8000312:	bf18      	it	ne
 8000314:	f04e 0e01 	orrne.w	lr, lr, #1
 8000318:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800031c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000320:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000324:	d204      	bcs.n	8000330 <__aeabi_dmul+0x80>
 8000326:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800032a:	416d      	adcs	r5, r5
 800032c:	eb46 0606 	adc.w	r6, r6, r6
 8000330:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000334:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000338:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800033c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000340:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000344:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000348:	bf88      	it	hi
 800034a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800034e:	d81e      	bhi.n	800038e <__aeabi_dmul+0xde>
 8000350:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000368:	ea46 0101 	orr.w	r1, r6, r1
 800036c:	ea40 0002 	orr.w	r0, r0, r2
 8000370:	ea81 0103 	eor.w	r1, r1, r3
 8000374:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000378:	bfc2      	ittt	gt
 800037a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800037e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000382:	bd70      	popgt	{r4, r5, r6, pc}
 8000384:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000388:	f04f 0e00 	mov.w	lr, #0
 800038c:	3c01      	subs	r4, #1
 800038e:	f300 80ab 	bgt.w	80004e8 <__aeabi_dmul+0x238>
 8000392:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000396:	bfde      	ittt	le
 8000398:	2000      	movle	r0, #0
 800039a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800039e:	bd70      	pople	{r4, r5, r6, pc}
 80003a0:	f1c4 0400 	rsb	r4, r4, #0
 80003a4:	3c20      	subs	r4, #32
 80003a6:	da35      	bge.n	8000414 <__aeabi_dmul+0x164>
 80003a8:	340c      	adds	r4, #12
 80003aa:	dc1b      	bgt.n	80003e4 <__aeabi_dmul+0x134>
 80003ac:	f104 0414 	add.w	r4, r4, #20
 80003b0:	f1c4 0520 	rsb	r5, r4, #32
 80003b4:	fa00 f305 	lsl.w	r3, r0, r5
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f205 	lsl.w	r2, r1, r5
 80003c0:	ea40 0002 	orr.w	r0, r0, r2
 80003c4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80003c8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80003cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d0:	fa21 f604 	lsr.w	r6, r1, r4
 80003d4:	eb42 0106 	adc.w	r1, r2, r6
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 040c 	rsb	r4, r4, #12
 80003e8:	f1c4 0520 	rsb	r5, r4, #32
 80003ec:	fa00 f304 	lsl.w	r3, r0, r4
 80003f0:	fa20 f005 	lsr.w	r0, r0, r5
 80003f4:	fa01 f204 	lsl.w	r2, r1, r4
 80003f8:	ea40 0002 	orr.w	r0, r0, r2
 80003fc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000400:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000404:	f141 0100 	adc.w	r1, r1, #0
 8000408:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800040c:	bf08      	it	eq
 800040e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000412:	bd70      	pop	{r4, r5, r6, pc}
 8000414:	f1c4 0520 	rsb	r5, r4, #32
 8000418:	fa00 f205 	lsl.w	r2, r0, r5
 800041c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000420:	fa20 f304 	lsr.w	r3, r0, r4
 8000424:	fa01 f205 	lsl.w	r2, r1, r5
 8000428:	ea43 0302 	orr.w	r3, r3, r2
 800042c:	fa21 f004 	lsr.w	r0, r1, r4
 8000430:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000434:	fa21 f204 	lsr.w	r2, r1, r4
 8000438:	ea20 0002 	bic.w	r0, r0, r2
 800043c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000440:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000444:	bf08      	it	eq
 8000446:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800044a:	bd70      	pop	{r4, r5, r6, pc}
 800044c:	f094 0f00 	teq	r4, #0
 8000450:	d10f      	bne.n	8000472 <__aeabi_dmul+0x1c2>
 8000452:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000456:	0040      	lsls	r0, r0, #1
 8000458:	eb41 0101 	adc.w	r1, r1, r1
 800045c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000460:	bf08      	it	eq
 8000462:	3c01      	subeq	r4, #1
 8000464:	d0f7      	beq.n	8000456 <__aeabi_dmul+0x1a6>
 8000466:	ea41 0106 	orr.w	r1, r1, r6
 800046a:	f095 0f00 	teq	r5, #0
 800046e:	bf18      	it	ne
 8000470:	4770      	bxne	lr
 8000472:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000476:	0052      	lsls	r2, r2, #1
 8000478:	eb43 0303 	adc.w	r3, r3, r3
 800047c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000480:	bf08      	it	eq
 8000482:	3d01      	subeq	r5, #1
 8000484:	d0f7      	beq.n	8000476 <__aeabi_dmul+0x1c6>
 8000486:	ea43 0306 	orr.w	r3, r3, r6
 800048a:	4770      	bx	lr
 800048c:	ea94 0f0c 	teq	r4, ip
 8000490:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000494:	bf18      	it	ne
 8000496:	ea95 0f0c 	teqne	r5, ip
 800049a:	d00c      	beq.n	80004b6 <__aeabi_dmul+0x206>
 800049c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004a0:	bf18      	it	ne
 80004a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004a6:	d1d1      	bne.n	800044c <__aeabi_dmul+0x19c>
 80004a8:	ea81 0103 	eor.w	r1, r1, r3
 80004ac:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004b0:	f04f 0000 	mov.w	r0, #0
 80004b4:	bd70      	pop	{r4, r5, r6, pc}
 80004b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004ba:	bf06      	itte	eq
 80004bc:	4610      	moveq	r0, r2
 80004be:	4619      	moveq	r1, r3
 80004c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004c4:	d019      	beq.n	80004fa <__aeabi_dmul+0x24a>
 80004c6:	ea94 0f0c 	teq	r4, ip
 80004ca:	d102      	bne.n	80004d2 <__aeabi_dmul+0x222>
 80004cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004d0:	d113      	bne.n	80004fa <__aeabi_dmul+0x24a>
 80004d2:	ea95 0f0c 	teq	r5, ip
 80004d6:	d105      	bne.n	80004e4 <__aeabi_dmul+0x234>
 80004d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004dc:	bf1c      	itt	ne
 80004de:	4610      	movne	r0, r2
 80004e0:	4619      	movne	r1, r3
 80004e2:	d10a      	bne.n	80004fa <__aeabi_dmul+0x24a>
 80004e4:	ea81 0103 	eor.w	r1, r1, r3
 80004e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004ec:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd70      	pop	{r4, r5, r6, pc}
 80004fa:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004fe:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000502:	bd70      	pop	{r4, r5, r6, pc}

08000504 <__aeabi_drsub>:
 8000504:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000508:	e002      	b.n	8000510 <__adddf3>
 800050a:	bf00      	nop

0800050c <__aeabi_dsub>:
 800050c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000510 <__adddf3>:
 8000510:	b530      	push	{r4, r5, lr}
 8000512:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000516:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800051a:	ea94 0f05 	teq	r4, r5
 800051e:	bf08      	it	eq
 8000520:	ea90 0f02 	teqeq	r0, r2
 8000524:	bf1f      	itttt	ne
 8000526:	ea54 0c00 	orrsne.w	ip, r4, r0
 800052a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800052e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000532:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000536:	f000 80e2 	beq.w	80006fe <__adddf3+0x1ee>
 800053a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800053e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000542:	bfb8      	it	lt
 8000544:	426d      	neglt	r5, r5
 8000546:	dd0c      	ble.n	8000562 <__adddf3+0x52>
 8000548:	442c      	add	r4, r5
 800054a:	ea80 0202 	eor.w	r2, r0, r2
 800054e:	ea81 0303 	eor.w	r3, r1, r3
 8000552:	ea82 0000 	eor.w	r0, r2, r0
 8000556:	ea83 0101 	eor.w	r1, r3, r1
 800055a:	ea80 0202 	eor.w	r2, r0, r2
 800055e:	ea81 0303 	eor.w	r3, r1, r3
 8000562:	2d36      	cmp	r5, #54	@ 0x36
 8000564:	bf88      	it	hi
 8000566:	bd30      	pophi	{r4, r5, pc}
 8000568:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800056c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000570:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000574:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000578:	d002      	beq.n	8000580 <__adddf3+0x70>
 800057a:	4240      	negs	r0, r0
 800057c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000580:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000584:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000588:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800058c:	d002      	beq.n	8000594 <__adddf3+0x84>
 800058e:	4252      	negs	r2, r2
 8000590:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000594:	ea94 0f05 	teq	r4, r5
 8000598:	f000 80a7 	beq.w	80006ea <__adddf3+0x1da>
 800059c:	f1a4 0401 	sub.w	r4, r4, #1
 80005a0:	f1d5 0e20 	rsbs	lr, r5, #32
 80005a4:	db0d      	blt.n	80005c2 <__adddf3+0xb2>
 80005a6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005aa:	fa22 f205 	lsr.w	r2, r2, r5
 80005ae:	1880      	adds	r0, r0, r2
 80005b0:	f141 0100 	adc.w	r1, r1, #0
 80005b4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005b8:	1880      	adds	r0, r0, r2
 80005ba:	fa43 f305 	asr.w	r3, r3, r5
 80005be:	4159      	adcs	r1, r3
 80005c0:	e00e      	b.n	80005e0 <__adddf3+0xd0>
 80005c2:	f1a5 0520 	sub.w	r5, r5, #32
 80005c6:	f10e 0e20 	add.w	lr, lr, #32
 80005ca:	2a01      	cmp	r2, #1
 80005cc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005d0:	bf28      	it	cs
 80005d2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005d6:	fa43 f305 	asr.w	r3, r3, r5
 80005da:	18c0      	adds	r0, r0, r3
 80005dc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005e4:	d507      	bpl.n	80005f6 <__adddf3+0xe6>
 80005e6:	f04f 0e00 	mov.w	lr, #0
 80005ea:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ee:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005f2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005f6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80005fa:	d31b      	bcc.n	8000634 <__adddf3+0x124>
 80005fc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000600:	d30c      	bcc.n	800061c <__adddf3+0x10c>
 8000602:	0849      	lsrs	r1, r1, #1
 8000604:	ea5f 0030 	movs.w	r0, r0, rrx
 8000608:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800060c:	f104 0401 	add.w	r4, r4, #1
 8000610:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000614:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000618:	f080 809a 	bcs.w	8000750 <__adddf3+0x240>
 800061c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000620:	bf08      	it	eq
 8000622:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000626:	f150 0000 	adcs.w	r0, r0, #0
 800062a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800062e:	ea41 0105 	orr.w	r1, r1, r5
 8000632:	bd30      	pop	{r4, r5, pc}
 8000634:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000638:	4140      	adcs	r0, r0
 800063a:	eb41 0101 	adc.w	r1, r1, r1
 800063e:	3c01      	subs	r4, #1
 8000640:	bf28      	it	cs
 8000642:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000646:	d2e9      	bcs.n	800061c <__adddf3+0x10c>
 8000648:	f091 0f00 	teq	r1, #0
 800064c:	bf04      	itt	eq
 800064e:	4601      	moveq	r1, r0
 8000650:	2000      	moveq	r0, #0
 8000652:	fab1 f381 	clz	r3, r1
 8000656:	bf08      	it	eq
 8000658:	3320      	addeq	r3, #32
 800065a:	f1a3 030b 	sub.w	r3, r3, #11
 800065e:	f1b3 0220 	subs.w	r2, r3, #32
 8000662:	da0c      	bge.n	800067e <__adddf3+0x16e>
 8000664:	320c      	adds	r2, #12
 8000666:	dd08      	ble.n	800067a <__adddf3+0x16a>
 8000668:	f102 0c14 	add.w	ip, r2, #20
 800066c:	f1c2 020c 	rsb	r2, r2, #12
 8000670:	fa01 f00c 	lsl.w	r0, r1, ip
 8000674:	fa21 f102 	lsr.w	r1, r1, r2
 8000678:	e00c      	b.n	8000694 <__adddf3+0x184>
 800067a:	f102 0214 	add.w	r2, r2, #20
 800067e:	bfd8      	it	le
 8000680:	f1c2 0c20 	rsble	ip, r2, #32
 8000684:	fa01 f102 	lsl.w	r1, r1, r2
 8000688:	fa20 fc0c 	lsr.w	ip, r0, ip
 800068c:	bfdc      	itt	le
 800068e:	ea41 010c 	orrle.w	r1, r1, ip
 8000692:	4090      	lslle	r0, r2
 8000694:	1ae4      	subs	r4, r4, r3
 8000696:	bfa2      	ittt	ge
 8000698:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800069c:	4329      	orrge	r1, r5
 800069e:	bd30      	popge	{r4, r5, pc}
 80006a0:	ea6f 0404 	mvn.w	r4, r4
 80006a4:	3c1f      	subs	r4, #31
 80006a6:	da1c      	bge.n	80006e2 <__adddf3+0x1d2>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc0e      	bgt.n	80006ca <__adddf3+0x1ba>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0220 	rsb	r2, r4, #32
 80006b4:	fa20 f004 	lsr.w	r0, r0, r4
 80006b8:	fa01 f302 	lsl.w	r3, r1, r2
 80006bc:	ea40 0003 	orr.w	r0, r0, r3
 80006c0:	fa21 f304 	lsr.w	r3, r1, r4
 80006c4:	ea45 0103 	orr.w	r1, r5, r3
 80006c8:	bd30      	pop	{r4, r5, pc}
 80006ca:	f1c4 040c 	rsb	r4, r4, #12
 80006ce:	f1c4 0220 	rsb	r2, r4, #32
 80006d2:	fa20 f002 	lsr.w	r0, r0, r2
 80006d6:	fa01 f304 	lsl.w	r3, r1, r4
 80006da:	ea40 0003 	orr.w	r0, r0, r3
 80006de:	4629      	mov	r1, r5
 80006e0:	bd30      	pop	{r4, r5, pc}
 80006e2:	fa21 f004 	lsr.w	r0, r1, r4
 80006e6:	4629      	mov	r1, r5
 80006e8:	bd30      	pop	{r4, r5, pc}
 80006ea:	f094 0f00 	teq	r4, #0
 80006ee:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80006f2:	bf06      	itte	eq
 80006f4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80006f8:	3401      	addeq	r4, #1
 80006fa:	3d01      	subne	r5, #1
 80006fc:	e74e      	b.n	800059c <__adddf3+0x8c>
 80006fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000702:	bf18      	it	ne
 8000704:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000708:	d029      	beq.n	800075e <__adddf3+0x24e>
 800070a:	ea94 0f05 	teq	r4, r5
 800070e:	bf08      	it	eq
 8000710:	ea90 0f02 	teqeq	r0, r2
 8000714:	d005      	beq.n	8000722 <__adddf3+0x212>
 8000716:	ea54 0c00 	orrs.w	ip, r4, r0
 800071a:	bf04      	itt	eq
 800071c:	4619      	moveq	r1, r3
 800071e:	4610      	moveq	r0, r2
 8000720:	bd30      	pop	{r4, r5, pc}
 8000722:	ea91 0f03 	teq	r1, r3
 8000726:	bf1e      	ittt	ne
 8000728:	2100      	movne	r1, #0
 800072a:	2000      	movne	r0, #0
 800072c:	bd30      	popne	{r4, r5, pc}
 800072e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000732:	d105      	bne.n	8000740 <__adddf3+0x230>
 8000734:	0040      	lsls	r0, r0, #1
 8000736:	4149      	adcs	r1, r1
 8000738:	bf28      	it	cs
 800073a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800073e:	bd30      	pop	{r4, r5, pc}
 8000740:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000744:	bf3c      	itt	cc
 8000746:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800074a:	bd30      	popcc	{r4, r5, pc}
 800074c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000750:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000754:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd30      	pop	{r4, r5, pc}
 800075e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000762:	bf1a      	itte	ne
 8000764:	4619      	movne	r1, r3
 8000766:	4610      	movne	r0, r2
 8000768:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800076c:	bf1c      	itt	ne
 800076e:	460b      	movne	r3, r1
 8000770:	4602      	movne	r2, r0
 8000772:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000776:	bf06      	itte	eq
 8000778:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800077c:	ea91 0f03 	teqeq	r1, r3
 8000780:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000784:	bd30      	pop	{r4, r5, pc}
 8000786:	bf00      	nop

08000788 <__aeabi_ui2d>:
 8000788:	f090 0f00 	teq	r0, #0
 800078c:	bf04      	itt	eq
 800078e:	2100      	moveq	r1, #0
 8000790:	4770      	bxeq	lr
 8000792:	b530      	push	{r4, r5, lr}
 8000794:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000798:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800079c:	f04f 0500 	mov.w	r5, #0
 80007a0:	f04f 0100 	mov.w	r1, #0
 80007a4:	e750      	b.n	8000648 <__adddf3+0x138>
 80007a6:	bf00      	nop

080007a8 <__aeabi_i2d>:
 80007a8:	f090 0f00 	teq	r0, #0
 80007ac:	bf04      	itt	eq
 80007ae:	2100      	moveq	r1, #0
 80007b0:	4770      	bxeq	lr
 80007b2:	b530      	push	{r4, r5, lr}
 80007b4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007b8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007bc:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80007c0:	bf48      	it	mi
 80007c2:	4240      	negmi	r0, r0
 80007c4:	f04f 0100 	mov.w	r1, #0
 80007c8:	e73e      	b.n	8000648 <__adddf3+0x138>
 80007ca:	bf00      	nop

080007cc <__aeabi_f2d>:
 80007cc:	0042      	lsls	r2, r0, #1
 80007ce:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007d2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007d6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007da:	bf1f      	itttt	ne
 80007dc:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007e0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007e4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007e8:	4770      	bxne	lr
 80007ea:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007ee:	bf08      	it	eq
 80007f0:	4770      	bxeq	lr
 80007f2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80007f6:	bf04      	itt	eq
 80007f8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80007fc:	4770      	bxeq	lr
 80007fe:	b530      	push	{r4, r5, lr}
 8000800:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000804:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000808:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800080c:	e71c      	b.n	8000648 <__adddf3+0x138>
 800080e:	bf00      	nop

08000810 <__aeabi_ul2d>:
 8000810:	ea50 0201 	orrs.w	r2, r0, r1
 8000814:	bf08      	it	eq
 8000816:	4770      	bxeq	lr
 8000818:	b530      	push	{r4, r5, lr}
 800081a:	f04f 0500 	mov.w	r5, #0
 800081e:	e00a      	b.n	8000836 <__aeabi_l2d+0x16>

08000820 <__aeabi_l2d>:
 8000820:	ea50 0201 	orrs.w	r2, r0, r1
 8000824:	bf08      	it	eq
 8000826:	4770      	bxeq	lr
 8000828:	b530      	push	{r4, r5, lr}
 800082a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800082e:	d502      	bpl.n	8000836 <__aeabi_l2d+0x16>
 8000830:	4240      	negs	r0, r0
 8000832:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000836:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800083a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800083e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000842:	f43f aed8 	beq.w	80005f6 <__adddf3+0xe6>
 8000846:	f04f 0203 	mov.w	r2, #3
 800084a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800084e:	bf18      	it	ne
 8000850:	3203      	addne	r2, #3
 8000852:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000856:	bf18      	it	ne
 8000858:	3203      	addne	r2, #3
 800085a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800085e:	f1c2 0320 	rsb	r3, r2, #32
 8000862:	fa00 fc03 	lsl.w	ip, r0, r3
 8000866:	fa20 f002 	lsr.w	r0, r0, r2
 800086a:	fa01 fe03 	lsl.w	lr, r1, r3
 800086e:	ea40 000e 	orr.w	r0, r0, lr
 8000872:	fa21 f102 	lsr.w	r1, r1, r2
 8000876:	4414      	add	r4, r2
 8000878:	e6bd      	b.n	80005f6 <__adddf3+0xe6>
 800087a:	bf00      	nop

0800087c <__aeabi_d2uiz>:
 800087c:	004a      	lsls	r2, r1, #1
 800087e:	d211      	bcs.n	80008a4 <__aeabi_d2uiz+0x28>
 8000880:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000884:	d211      	bcs.n	80008aa <__aeabi_d2uiz+0x2e>
 8000886:	d50d      	bpl.n	80008a4 <__aeabi_d2uiz+0x28>
 8000888:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800088c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000890:	d40e      	bmi.n	80008b0 <__aeabi_d2uiz+0x34>
 8000892:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000896:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800089a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800089e:	fa23 f002 	lsr.w	r0, r3, r2
 80008a2:	4770      	bx	lr
 80008a4:	f04f 0000 	mov.w	r0, #0
 80008a8:	4770      	bx	lr
 80008aa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80008ae:	d102      	bne.n	80008b6 <__aeabi_d2uiz+0x3a>
 80008b0:	f04f 30ff 	mov.w	r0, #4294967295
 80008b4:	4770      	bx	lr
 80008b6:	f04f 0000 	mov.w	r0, #0
 80008ba:	4770      	bx	lr

080008bc <GPIO_PeripheralClkCtrl>:
 * @return		- none
 *
 * @Note 		-
 */
void GPIO_PeripheralClkCtrl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 80008bc:	b480      	push	{r7}
 80008be:	b085      	sub	sp, #20
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
 80008c4:	460b      	mov	r3, r1
 80008c6:	70fb      	strb	r3, [r7, #3]
	 * translates the GPIO port base addresses into primitive integer data for
	 * ease of use in switch case statement or other applications that require
	 * a more primitive type of data.
	 * note: GPIO port base addresses which are pointers are not primitive data types
	 */
	uint8_t temp1 = GPIO_BASEADDR_TO_CODE(pGPIOx);
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	4a6c      	ldr	r2, [pc, #432]	@ (8000a7c <GPIO_PeripheralClkCtrl+0x1c0>)
 80008cc:	4293      	cmp	r3, r2
 80008ce:	d02b      	beq.n	8000928 <GPIO_PeripheralClkCtrl+0x6c>
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	4a6b      	ldr	r2, [pc, #428]	@ (8000a80 <GPIO_PeripheralClkCtrl+0x1c4>)
 80008d4:	4293      	cmp	r3, r2
 80008d6:	d025      	beq.n	8000924 <GPIO_PeripheralClkCtrl+0x68>
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	4a6a      	ldr	r2, [pc, #424]	@ (8000a84 <GPIO_PeripheralClkCtrl+0x1c8>)
 80008dc:	4293      	cmp	r3, r2
 80008de:	d01f      	beq.n	8000920 <GPIO_PeripheralClkCtrl+0x64>
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	4a69      	ldr	r2, [pc, #420]	@ (8000a88 <GPIO_PeripheralClkCtrl+0x1cc>)
 80008e4:	4293      	cmp	r3, r2
 80008e6:	d019      	beq.n	800091c <GPIO_PeripheralClkCtrl+0x60>
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	4a68      	ldr	r2, [pc, #416]	@ (8000a8c <GPIO_PeripheralClkCtrl+0x1d0>)
 80008ec:	4293      	cmp	r3, r2
 80008ee:	d013      	beq.n	8000918 <GPIO_PeripheralClkCtrl+0x5c>
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	4a67      	ldr	r2, [pc, #412]	@ (8000a90 <GPIO_PeripheralClkCtrl+0x1d4>)
 80008f4:	4293      	cmp	r3, r2
 80008f6:	d00d      	beq.n	8000914 <GPIO_PeripheralClkCtrl+0x58>
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	4a66      	ldr	r2, [pc, #408]	@ (8000a94 <GPIO_PeripheralClkCtrl+0x1d8>)
 80008fc:	4293      	cmp	r3, r2
 80008fe:	d007      	beq.n	8000910 <GPIO_PeripheralClkCtrl+0x54>
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	4a65      	ldr	r2, [pc, #404]	@ (8000a98 <GPIO_PeripheralClkCtrl+0x1dc>)
 8000904:	4293      	cmp	r3, r2
 8000906:	d101      	bne.n	800090c <GPIO_PeripheralClkCtrl+0x50>
 8000908:	2307      	movs	r3, #7
 800090a:	e00e      	b.n	800092a <GPIO_PeripheralClkCtrl+0x6e>
 800090c:	2300      	movs	r3, #0
 800090e:	e00c      	b.n	800092a <GPIO_PeripheralClkCtrl+0x6e>
 8000910:	2306      	movs	r3, #6
 8000912:	e00a      	b.n	800092a <GPIO_PeripheralClkCtrl+0x6e>
 8000914:	2305      	movs	r3, #5
 8000916:	e008      	b.n	800092a <GPIO_PeripheralClkCtrl+0x6e>
 8000918:	2304      	movs	r3, #4
 800091a:	e006      	b.n	800092a <GPIO_PeripheralClkCtrl+0x6e>
 800091c:	2303      	movs	r3, #3
 800091e:	e004      	b.n	800092a <GPIO_PeripheralClkCtrl+0x6e>
 8000920:	2302      	movs	r3, #2
 8000922:	e002      	b.n	800092a <GPIO_PeripheralClkCtrl+0x6e>
 8000924:	2301      	movs	r3, #1
 8000926:	e000      	b.n	800092a <GPIO_PeripheralClkCtrl+0x6e>
 8000928:	2300      	movs	r3, #0
 800092a:	73fb      	strb	r3, [r7, #15]

	if(EnorDi == ENABLE){
 800092c:	78fb      	ldrb	r3, [r7, #3]
 800092e:	2b01      	cmp	r3, #1
 8000930:	d14e      	bne.n	80009d0 <GPIO_PeripheralClkCtrl+0x114>
		/*
		 * I've used switch case statements for better readability compared to previous
		 * version of else if statements.
		 */
		switch(temp1){
 8000932:	7bfb      	ldrb	r3, [r7, #15]
 8000934:	2b07      	cmp	r3, #7
 8000936:	f200 8099 	bhi.w	8000a6c <GPIO_PeripheralClkCtrl+0x1b0>
 800093a:	a201      	add	r2, pc, #4	@ (adr r2, 8000940 <GPIO_PeripheralClkCtrl+0x84>)
 800093c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000940:	08000961 	.word	0x08000961
 8000944:	0800096f 	.word	0x0800096f
 8000948:	0800097d 	.word	0x0800097d
 800094c:	0800098b 	.word	0x0800098b
 8000950:	08000999 	.word	0x08000999
 8000954:	080009a7 	.word	0x080009a7
 8000958:	080009b5 	.word	0x080009b5
 800095c:	080009c3 	.word	0x080009c3
		case 0:
			GPIOA_PCLK_EN();
 8000960:	4b4e      	ldr	r3, [pc, #312]	@ (8000a9c <GPIO_PeripheralClkCtrl+0x1e0>)
 8000962:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000964:	4a4d      	ldr	r2, [pc, #308]	@ (8000a9c <GPIO_PeripheralClkCtrl+0x1e0>)
 8000966:	f043 0301 	orr.w	r3, r3, #1
 800096a:	6313      	str	r3, [r2, #48]	@ 0x30
			break;
 800096c:	e081      	b.n	8000a72 <GPIO_PeripheralClkCtrl+0x1b6>
		case 1:
			GPIOB_PCLK_EN();
 800096e:	4b4b      	ldr	r3, [pc, #300]	@ (8000a9c <GPIO_PeripheralClkCtrl+0x1e0>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000972:	4a4a      	ldr	r2, [pc, #296]	@ (8000a9c <GPIO_PeripheralClkCtrl+0x1e0>)
 8000974:	f043 0302 	orr.w	r3, r3, #2
 8000978:	6313      	str	r3, [r2, #48]	@ 0x30
			break;
 800097a:	e07a      	b.n	8000a72 <GPIO_PeripheralClkCtrl+0x1b6>
		case 2:
			GPIOC_PCLK_EN();
 800097c:	4b47      	ldr	r3, [pc, #284]	@ (8000a9c <GPIO_PeripheralClkCtrl+0x1e0>)
 800097e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000980:	4a46      	ldr	r2, [pc, #280]	@ (8000a9c <GPIO_PeripheralClkCtrl+0x1e0>)
 8000982:	f043 0304 	orr.w	r3, r3, #4
 8000986:	6313      	str	r3, [r2, #48]	@ 0x30
			break;
 8000988:	e073      	b.n	8000a72 <GPIO_PeripheralClkCtrl+0x1b6>
		case 3:
			GPIOD_PCLK_EN();
 800098a:	4b44      	ldr	r3, [pc, #272]	@ (8000a9c <GPIO_PeripheralClkCtrl+0x1e0>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800098e:	4a43      	ldr	r2, [pc, #268]	@ (8000a9c <GPIO_PeripheralClkCtrl+0x1e0>)
 8000990:	f043 0308 	orr.w	r3, r3, #8
 8000994:	6313      	str	r3, [r2, #48]	@ 0x30
			break;
 8000996:	e06c      	b.n	8000a72 <GPIO_PeripheralClkCtrl+0x1b6>
		case 4:
			GPIOE_PCLK_EN();
 8000998:	4b40      	ldr	r3, [pc, #256]	@ (8000a9c <GPIO_PeripheralClkCtrl+0x1e0>)
 800099a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800099c:	4a3f      	ldr	r2, [pc, #252]	@ (8000a9c <GPIO_PeripheralClkCtrl+0x1e0>)
 800099e:	f043 0310 	orr.w	r3, r3, #16
 80009a2:	6313      	str	r3, [r2, #48]	@ 0x30
			break;
 80009a4:	e065      	b.n	8000a72 <GPIO_PeripheralClkCtrl+0x1b6>
		case 5:
			GPIOF_PCLK_EN();
 80009a6:	4b3d      	ldr	r3, [pc, #244]	@ (8000a9c <GPIO_PeripheralClkCtrl+0x1e0>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009aa:	4a3c      	ldr	r2, [pc, #240]	@ (8000a9c <GPIO_PeripheralClkCtrl+0x1e0>)
 80009ac:	f043 0320 	orr.w	r3, r3, #32
 80009b0:	6313      	str	r3, [r2, #48]	@ 0x30
			break;
 80009b2:	e05e      	b.n	8000a72 <GPIO_PeripheralClkCtrl+0x1b6>
		case 6:
			GPIOG_PCLK_EN();
 80009b4:	4b39      	ldr	r3, [pc, #228]	@ (8000a9c <GPIO_PeripheralClkCtrl+0x1e0>)
 80009b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009b8:	4a38      	ldr	r2, [pc, #224]	@ (8000a9c <GPIO_PeripheralClkCtrl+0x1e0>)
 80009ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80009be:	6313      	str	r3, [r2, #48]	@ 0x30
			break;
 80009c0:	e057      	b.n	8000a72 <GPIO_PeripheralClkCtrl+0x1b6>
		case 7:
			GPIOH_PCLK_EN();
 80009c2:	4b36      	ldr	r3, [pc, #216]	@ (8000a9c <GPIO_PeripheralClkCtrl+0x1e0>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009c6:	4a35      	ldr	r2, [pc, #212]	@ (8000a9c <GPIO_PeripheralClkCtrl+0x1e0>)
 80009c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80009cc:	6313      	str	r3, [r2, #48]	@ 0x30
			break;
 80009ce:	e050      	b.n	8000a72 <GPIO_PeripheralClkCtrl+0x1b6>
			break;
		}

	}
	else{
		switch(temp1){
 80009d0:	7bfb      	ldrb	r3, [r7, #15]
 80009d2:	2b07      	cmp	r3, #7
 80009d4:	d84c      	bhi.n	8000a70 <GPIO_PeripheralClkCtrl+0x1b4>
 80009d6:	a201      	add	r2, pc, #4	@ (adr r2, 80009dc <GPIO_PeripheralClkCtrl+0x120>)
 80009d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009dc:	080009fd 	.word	0x080009fd
 80009e0:	08000a0b 	.word	0x08000a0b
 80009e4:	08000a19 	.word	0x08000a19
 80009e8:	08000a27 	.word	0x08000a27
 80009ec:	08000a35 	.word	0x08000a35
 80009f0:	08000a43 	.word	0x08000a43
 80009f4:	08000a51 	.word	0x08000a51
 80009f8:	08000a5f 	.word	0x08000a5f
		case 0:
			GPIOA_PCLK_DI();
 80009fc:	4b27      	ldr	r3, [pc, #156]	@ (8000a9c <GPIO_PeripheralClkCtrl+0x1e0>)
 80009fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a00:	4a26      	ldr	r2, [pc, #152]	@ (8000a9c <GPIO_PeripheralClkCtrl+0x1e0>)
 8000a02:	f023 0301 	bic.w	r3, r3, #1
 8000a06:	6313      	str	r3, [r2, #48]	@ 0x30
			break;
 8000a08:	e033      	b.n	8000a72 <GPIO_PeripheralClkCtrl+0x1b6>
		case 1:
			GPIOB_PCLK_DI();
 8000a0a:	4b24      	ldr	r3, [pc, #144]	@ (8000a9c <GPIO_PeripheralClkCtrl+0x1e0>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a0e:	4a23      	ldr	r2, [pc, #140]	@ (8000a9c <GPIO_PeripheralClkCtrl+0x1e0>)
 8000a10:	f023 0302 	bic.w	r3, r3, #2
 8000a14:	6313      	str	r3, [r2, #48]	@ 0x30
			break;
 8000a16:	e02c      	b.n	8000a72 <GPIO_PeripheralClkCtrl+0x1b6>
		case 2:
			GPIOC_PCLK_DI();
 8000a18:	4b20      	ldr	r3, [pc, #128]	@ (8000a9c <GPIO_PeripheralClkCtrl+0x1e0>)
 8000a1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a1c:	4a1f      	ldr	r2, [pc, #124]	@ (8000a9c <GPIO_PeripheralClkCtrl+0x1e0>)
 8000a1e:	f023 0304 	bic.w	r3, r3, #4
 8000a22:	6313      	str	r3, [r2, #48]	@ 0x30
			break;
 8000a24:	e025      	b.n	8000a72 <GPIO_PeripheralClkCtrl+0x1b6>
		case 3:
			GPIOD_PCLK_DI();
 8000a26:	4b1d      	ldr	r3, [pc, #116]	@ (8000a9c <GPIO_PeripheralClkCtrl+0x1e0>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a2a:	4a1c      	ldr	r2, [pc, #112]	@ (8000a9c <GPIO_PeripheralClkCtrl+0x1e0>)
 8000a2c:	f023 0308 	bic.w	r3, r3, #8
 8000a30:	6313      	str	r3, [r2, #48]	@ 0x30
			break;
 8000a32:	e01e      	b.n	8000a72 <GPIO_PeripheralClkCtrl+0x1b6>
		case 4:
			GPIOE_PCLK_DI();
 8000a34:	4b19      	ldr	r3, [pc, #100]	@ (8000a9c <GPIO_PeripheralClkCtrl+0x1e0>)
 8000a36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a38:	4a18      	ldr	r2, [pc, #96]	@ (8000a9c <GPIO_PeripheralClkCtrl+0x1e0>)
 8000a3a:	f023 0310 	bic.w	r3, r3, #16
 8000a3e:	6313      	str	r3, [r2, #48]	@ 0x30
			break;
 8000a40:	e017      	b.n	8000a72 <GPIO_PeripheralClkCtrl+0x1b6>
		case 5:
			GPIOF_PCLK_DI();
 8000a42:	4b16      	ldr	r3, [pc, #88]	@ (8000a9c <GPIO_PeripheralClkCtrl+0x1e0>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a46:	4a15      	ldr	r2, [pc, #84]	@ (8000a9c <GPIO_PeripheralClkCtrl+0x1e0>)
 8000a48:	f023 0320 	bic.w	r3, r3, #32
 8000a4c:	6313      	str	r3, [r2, #48]	@ 0x30
			break;
 8000a4e:	e010      	b.n	8000a72 <GPIO_PeripheralClkCtrl+0x1b6>
		case 6:
			GPIOG_PCLK_DI();
 8000a50:	4b12      	ldr	r3, [pc, #72]	@ (8000a9c <GPIO_PeripheralClkCtrl+0x1e0>)
 8000a52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a54:	4a11      	ldr	r2, [pc, #68]	@ (8000a9c <GPIO_PeripheralClkCtrl+0x1e0>)
 8000a56:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000a5a:	6313      	str	r3, [r2, #48]	@ 0x30
			break;
 8000a5c:	e009      	b.n	8000a72 <GPIO_PeripheralClkCtrl+0x1b6>
		case 7:
			GPIOH_PCLK_DI();
 8000a5e:	4b0f      	ldr	r3, [pc, #60]	@ (8000a9c <GPIO_PeripheralClkCtrl+0x1e0>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a62:	4a0e      	ldr	r2, [pc, #56]	@ (8000a9c <GPIO_PeripheralClkCtrl+0x1e0>)
 8000a64:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000a68:	6313      	str	r3, [r2, #48]	@ 0x30
			break;
 8000a6a:	e002      	b.n	8000a72 <GPIO_PeripheralClkCtrl+0x1b6>
			break;
 8000a6c:	bf00      	nop
 8000a6e:	e000      	b.n	8000a72 <GPIO_PeripheralClkCtrl+0x1b6>
		default:
			break;
 8000a70:	bf00      	nop
		}

	}

}
 8000a72:	bf00      	nop
 8000a74:	3714      	adds	r7, #20
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bc80      	pop	{r7}
 8000a7a:	4770      	bx	lr
 8000a7c:	40020000 	.word	0x40020000
 8000a80:	40020400 	.word	0x40020400
 8000a84:	40020800 	.word	0x40020800
 8000a88:	40020c00 	.word	0x40020c00
 8000a8c:	40021000 	.word	0x40021000
 8000a90:	40021400 	.word	0x40021400
 8000a94:	40021800 	.word	0x40021800
 8000a98:	40021c00 	.word	0x40021c00
 8000a9c:	40023800 	.word	0x40023800

08000aa0 <GPIO_Init>:
 *
 * @Note 		-
 */

void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b086      	sub	sp, #24
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
	GPIO_PeripheralClkCtrl(pGPIOHandle->pGPIOx, ENABLE);
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	2101      	movs	r1, #1
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f7ff ff04 	bl	80008bc <GPIO_PeripheralClkCtrl>

	uint32_t temp=0;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	617b      	str	r3, [r7, #20]

	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <=GPIO_MODE_ANALOG ){
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	795b      	ldrb	r3, [r3, #5]
 8000abc:	2b03      	cmp	r3, #3
 8000abe:	d822      	bhi.n	8000b06 <GPIO_Init+0x66>

		//1. Configure mode of GPIO pin
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)) );
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	795b      	ldrb	r3, [r3, #5]
 8000ac4:	461a      	mov	r2, r3
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	791b      	ldrb	r3, [r3, #4]
 8000aca:	005b      	lsls	r3, r3, #1
 8000acc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad0:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(3 << (2 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)) ); //clears the bit fields first before setting
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	681a      	ldr	r2, [r3, #0]
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	791b      	ldrb	r3, [r3, #4]
 8000adc:	005b      	lsls	r3, r3, #1
 8000ade:	2103      	movs	r1, #3
 8000ae0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ae4:	43db      	mvns	r3, r3
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	400a      	ands	r2, r1
 8000aee:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; //sets the bit fields in the register
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	6819      	ldr	r1, [r3, #0]
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	697a      	ldr	r2, [r7, #20]
 8000afc:	430a      	orrs	r2, r1
 8000afe:	601a      	str	r2, [r3, #0]
		temp = 0;
 8000b00:	2300      	movs	r3, #0
 8000b02:	617b      	str	r3, [r7, #20]
 8000b04:	e0ea      	b.n	8000cdc <GPIO_Init+0x23c>
		//1. pin must be in input configuration
		//2. configure the edge trigger (RT,FT,RFT)
		//3. ENABLE INTERRUPT DELIVERY FROM PERIPHERAL TO THE PROCEssor (on peripheral side)

		//clears bits at the same time setting to input mode since input mode is "00".
		pGPIOHandle->pGPIOx->MODER &= ~(3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	681a      	ldr	r2, [r3, #0]
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	791b      	ldrb	r3, [r3, #4]
 8000b10:	005b      	lsls	r3, r3, #1
 8000b12:	2103      	movs	r1, #3
 8000b14:	fa01 f303 	lsl.w	r3, r1, r3
 8000b18:	43db      	mvns	r3, r3
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	400a      	ands	r2, r1
 8000b22:	601a      	str	r2, [r3, #0]

		switch(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode){
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	795b      	ldrb	r3, [r3, #5]
 8000b28:	2b06      	cmp	r3, #6
 8000b2a:	d036      	beq.n	8000b9a <GPIO_Init+0xfa>
 8000b2c:	2b06      	cmp	r3, #6
 8000b2e:	dc4b      	bgt.n	8000bc8 <GPIO_Init+0x128>
 8000b30:	2b04      	cmp	r3, #4
 8000b32:	d002      	beq.n	8000b3a <GPIO_Init+0x9a>
 8000b34:	2b05      	cmp	r3, #5
 8000b36:	d018      	beq.n	8000b6a <GPIO_Init+0xca>
			//1. configure both FTSR & RTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
			break;
		default:
			break;
 8000b38:	e046      	b.n	8000bc8 <GPIO_Init+0x128>
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000b3a:	4b44      	ldr	r3, [pc, #272]	@ (8000c4c <GPIO_Init+0x1ac>)
 8000b3c:	68db      	ldr	r3, [r3, #12]
 8000b3e:	687a      	ldr	r2, [r7, #4]
 8000b40:	7912      	ldrb	r2, [r2, #4]
 8000b42:	4611      	mov	r1, r2
 8000b44:	2201      	movs	r2, #1
 8000b46:	408a      	lsls	r2, r1
 8000b48:	4611      	mov	r1, r2
 8000b4a:	4a40      	ldr	r2, [pc, #256]	@ (8000c4c <GPIO_Init+0x1ac>)
 8000b4c:	430b      	orrs	r3, r1
 8000b4e:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000b50:	4b3e      	ldr	r3, [pc, #248]	@ (8000c4c <GPIO_Init+0x1ac>)
 8000b52:	689b      	ldr	r3, [r3, #8]
 8000b54:	687a      	ldr	r2, [r7, #4]
 8000b56:	7912      	ldrb	r2, [r2, #4]
 8000b58:	4611      	mov	r1, r2
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	408a      	lsls	r2, r1
 8000b5e:	43d2      	mvns	r2, r2
 8000b60:	4611      	mov	r1, r2
 8000b62:	4a3a      	ldr	r2, [pc, #232]	@ (8000c4c <GPIO_Init+0x1ac>)
 8000b64:	400b      	ands	r3, r1
 8000b66:	6093      	str	r3, [r2, #8]
			break;
 8000b68:	e02f      	b.n	8000bca <GPIO_Init+0x12a>
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000b6a:	4b38      	ldr	r3, [pc, #224]	@ (8000c4c <GPIO_Init+0x1ac>)
 8000b6c:	689b      	ldr	r3, [r3, #8]
 8000b6e:	687a      	ldr	r2, [r7, #4]
 8000b70:	7912      	ldrb	r2, [r2, #4]
 8000b72:	4611      	mov	r1, r2
 8000b74:	2201      	movs	r2, #1
 8000b76:	408a      	lsls	r2, r1
 8000b78:	4611      	mov	r1, r2
 8000b7a:	4a34      	ldr	r2, [pc, #208]	@ (8000c4c <GPIO_Init+0x1ac>)
 8000b7c:	430b      	orrs	r3, r1
 8000b7e:	6093      	str	r3, [r2, #8]
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000b80:	4b32      	ldr	r3, [pc, #200]	@ (8000c4c <GPIO_Init+0x1ac>)
 8000b82:	68db      	ldr	r3, [r3, #12]
 8000b84:	687a      	ldr	r2, [r7, #4]
 8000b86:	7912      	ldrb	r2, [r2, #4]
 8000b88:	4611      	mov	r1, r2
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	408a      	lsls	r2, r1
 8000b8e:	43d2      	mvns	r2, r2
 8000b90:	4611      	mov	r1, r2
 8000b92:	4a2e      	ldr	r2, [pc, #184]	@ (8000c4c <GPIO_Init+0x1ac>)
 8000b94:	400b      	ands	r3, r1
 8000b96:	60d3      	str	r3, [r2, #12]
			break;
 8000b98:	e017      	b.n	8000bca <GPIO_Init+0x12a>
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000b9a:	4b2c      	ldr	r3, [pc, #176]	@ (8000c4c <GPIO_Init+0x1ac>)
 8000b9c:	68db      	ldr	r3, [r3, #12]
 8000b9e:	687a      	ldr	r2, [r7, #4]
 8000ba0:	7912      	ldrb	r2, [r2, #4]
 8000ba2:	4611      	mov	r1, r2
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	408a      	lsls	r2, r1
 8000ba8:	4611      	mov	r1, r2
 8000baa:	4a28      	ldr	r2, [pc, #160]	@ (8000c4c <GPIO_Init+0x1ac>)
 8000bac:	430b      	orrs	r3, r1
 8000bae:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000bb0:	4b26      	ldr	r3, [pc, #152]	@ (8000c4c <GPIO_Init+0x1ac>)
 8000bb2:	689b      	ldr	r3, [r3, #8]
 8000bb4:	687a      	ldr	r2, [r7, #4]
 8000bb6:	7912      	ldrb	r2, [r2, #4]
 8000bb8:	4611      	mov	r1, r2
 8000bba:	2201      	movs	r2, #1
 8000bbc:	408a      	lsls	r2, r1
 8000bbe:	4611      	mov	r1, r2
 8000bc0:	4a22      	ldr	r2, [pc, #136]	@ (8000c4c <GPIO_Init+0x1ac>)
 8000bc2:	430b      	orrs	r3, r1
 8000bc4:	6093      	str	r3, [r2, #8]
			break;
 8000bc6:	e000      	b.n	8000bca <GPIO_Init+0x12a>
			break;
 8000bc8:	bf00      	nop
		 * This part is where it chooses the specific EXTI line to program.
		 * temp1 chooses the specific EXTICR peripheral register (out of 4) to program
		 * With the given pin number, we then calculate how much left shift the bits need to program the specific
		 * EXTI which the GPIO number is associated with and stored into Lshift_val. EXTI0 = PIN 0's ----> EXTI15 = PIN 15's.
		 */
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	791b      	ldrb	r3, [r3, #4]
 8000bce:	089b      	lsrs	r3, r3, #2
 8000bd0:	74fb      	strb	r3, [r7, #19]
		uint8_t Lshift_val = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	791b      	ldrb	r3, [r3, #4]
 8000bd6:	f003 0303 	and.w	r3, r3, #3
 8000bda:	74bb      	strb	r3, [r7, #18]

		/*translates the given GPIO port address into a specific GPIO port code for programming
		 * the SYSCFG EXTICR peripheral register.*/
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4a1b      	ldr	r2, [pc, #108]	@ (8000c50 <GPIO_Init+0x1b0>)
 8000be2:	4293      	cmp	r3, r2
 8000be4:	d044      	beq.n	8000c70 <GPIO_Init+0x1d0>
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	4a1a      	ldr	r2, [pc, #104]	@ (8000c54 <GPIO_Init+0x1b4>)
 8000bec:	4293      	cmp	r3, r2
 8000bee:	d02b      	beq.n	8000c48 <GPIO_Init+0x1a8>
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a18      	ldr	r2, [pc, #96]	@ (8000c58 <GPIO_Init+0x1b8>)
 8000bf6:	4293      	cmp	r3, r2
 8000bf8:	d024      	beq.n	8000c44 <GPIO_Init+0x1a4>
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	4a17      	ldr	r2, [pc, #92]	@ (8000c5c <GPIO_Init+0x1bc>)
 8000c00:	4293      	cmp	r3, r2
 8000c02:	d01d      	beq.n	8000c40 <GPIO_Init+0x1a0>
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4a15      	ldr	r2, [pc, #84]	@ (8000c60 <GPIO_Init+0x1c0>)
 8000c0a:	4293      	cmp	r3, r2
 8000c0c:	d016      	beq.n	8000c3c <GPIO_Init+0x19c>
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	4a14      	ldr	r2, [pc, #80]	@ (8000c64 <GPIO_Init+0x1c4>)
 8000c14:	4293      	cmp	r3, r2
 8000c16:	d00f      	beq.n	8000c38 <GPIO_Init+0x198>
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4a12      	ldr	r2, [pc, #72]	@ (8000c68 <GPIO_Init+0x1c8>)
 8000c1e:	4293      	cmp	r3, r2
 8000c20:	d008      	beq.n	8000c34 <GPIO_Init+0x194>
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	4a11      	ldr	r2, [pc, #68]	@ (8000c6c <GPIO_Init+0x1cc>)
 8000c28:	4293      	cmp	r3, r2
 8000c2a:	d101      	bne.n	8000c30 <GPIO_Init+0x190>
 8000c2c:	2307      	movs	r3, #7
 8000c2e:	e020      	b.n	8000c72 <GPIO_Init+0x1d2>
 8000c30:	2300      	movs	r3, #0
 8000c32:	e01e      	b.n	8000c72 <GPIO_Init+0x1d2>
 8000c34:	2306      	movs	r3, #6
 8000c36:	e01c      	b.n	8000c72 <GPIO_Init+0x1d2>
 8000c38:	2305      	movs	r3, #5
 8000c3a:	e01a      	b.n	8000c72 <GPIO_Init+0x1d2>
 8000c3c:	2304      	movs	r3, #4
 8000c3e:	e018      	b.n	8000c72 <GPIO_Init+0x1d2>
 8000c40:	2303      	movs	r3, #3
 8000c42:	e016      	b.n	8000c72 <GPIO_Init+0x1d2>
 8000c44:	2302      	movs	r3, #2
 8000c46:	e014      	b.n	8000c72 <GPIO_Init+0x1d2>
 8000c48:	2301      	movs	r3, #1
 8000c4a:	e012      	b.n	8000c72 <GPIO_Init+0x1d2>
 8000c4c:	40013c00 	.word	0x40013c00
 8000c50:	40020000 	.word	0x40020000
 8000c54:	40020400 	.word	0x40020400
 8000c58:	40020800 	.word	0x40020800
 8000c5c:	40020c00 	.word	0x40020c00
 8000c60:	40021000 	.word	0x40021000
 8000c64:	40021400 	.word	0x40021400
 8000c68:	40021800 	.word	0x40021800
 8000c6c:	40021c00 	.word	0x40021c00
 8000c70:	2300      	movs	r3, #0
 8000c72:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 8000c74:	4b6a      	ldr	r3, [pc, #424]	@ (8000e20 <GPIO_Init+0x380>)
 8000c76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c78:	4a69      	ldr	r2, [pc, #420]	@ (8000e20 <GPIO_Init+0x380>)
 8000c7a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c7e:	6453      	str	r3, [r2, #68]	@ 0x44
		SYSCFG->EXTICR[temp1] &= ~(15 << (4*Lshift_val) ); //clears peripheral register bitfield
 8000c80:	4a68      	ldr	r2, [pc, #416]	@ (8000e24 <GPIO_Init+0x384>)
 8000c82:	7cfb      	ldrb	r3, [r7, #19]
 8000c84:	3302      	adds	r3, #2
 8000c86:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000c8a:	7cbb      	ldrb	r3, [r7, #18]
 8000c8c:	009b      	lsls	r3, r3, #2
 8000c8e:	210f      	movs	r1, #15
 8000c90:	fa01 f303 	lsl.w	r3, r1, r3
 8000c94:	43db      	mvns	r3, r3
 8000c96:	4618      	mov	r0, r3
 8000c98:	4962      	ldr	r1, [pc, #392]	@ (8000e24 <GPIO_Init+0x384>)
 8000c9a:	7cfb      	ldrb	r3, [r7, #19]
 8000c9c:	4002      	ands	r2, r0
 8000c9e:	3302      	adds	r3, #2
 8000ca0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		SYSCFG->EXTICR[temp1] |= ( portcode << (4*Lshift_val) ); //clears peripheral register bitfield
 8000ca4:	4a5f      	ldr	r2, [pc, #380]	@ (8000e24 <GPIO_Init+0x384>)
 8000ca6:	7cfb      	ldrb	r3, [r7, #19]
 8000ca8:	3302      	adds	r3, #2
 8000caa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000cae:	7c79      	ldrb	r1, [r7, #17]
 8000cb0:	7cbb      	ldrb	r3, [r7, #18]
 8000cb2:	009b      	lsls	r3, r3, #2
 8000cb4:	fa01 f303 	lsl.w	r3, r1, r3
 8000cb8:	4618      	mov	r0, r3
 8000cba:	495a      	ldr	r1, [pc, #360]	@ (8000e24 <GPIO_Init+0x384>)
 8000cbc:	7cfb      	ldrb	r3, [r7, #19]
 8000cbe:	4302      	orrs	r2, r0
 8000cc0:	3302      	adds	r3, #2
 8000cc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		/*
		 * /3. enable the EXTI interrupt delivery using IMR.
		 *     Basically unmasks the interrupt that will run through the specific EXTI line
		 */
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000cc6:	4b58      	ldr	r3, [pc, #352]	@ (8000e28 <GPIO_Init+0x388>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	687a      	ldr	r2, [r7, #4]
 8000ccc:	7912      	ldrb	r2, [r2, #4]
 8000cce:	4611      	mov	r1, r2
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	408a      	lsls	r2, r1
 8000cd4:	4611      	mov	r1, r2
 8000cd6:	4a54      	ldr	r2, [pc, #336]	@ (8000e28 <GPIO_Init+0x388>)
 8000cd8:	430b      	orrs	r3, r1
 8000cda:	6013      	str	r3, [r2, #0]
	}

	//2. Configure pup pud settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdCtrl << (2 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)) );
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	79db      	ldrb	r3, [r3, #7]
 8000ce0:	461a      	mov	r2, r3
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	791b      	ldrb	r3, [r3, #4]
 8000ce6:	005b      	lsls	r3, r3, #1
 8000ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cec:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(3 << (2 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)) ); //clears the bit fields first before setting
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	68da      	ldr	r2, [r3, #12]
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	791b      	ldrb	r3, [r3, #4]
 8000cf8:	005b      	lsls	r3, r3, #1
 8000cfa:	2103      	movs	r1, #3
 8000cfc:	fa01 f303 	lsl.w	r3, r1, r3
 8000d00:	43db      	mvns	r3, r3
 8000d02:	4619      	mov	r1, r3
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	400a      	ands	r2, r1
 8000d0a:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp; //sets the bit fields
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	68d9      	ldr	r1, [r3, #12]
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	697a      	ldr	r2, [r7, #20]
 8000d18:	430a      	orrs	r2, r1
 8000d1a:	60da      	str	r2, [r3, #12]
	temp = 0;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	617b      	str	r3, [r7, #20]

	//3. Configure output type & output speed

	//Only executes if user wants to set GPIO as output mode because no pushpull or open drain config for GPIO input mode
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOType << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	7a1b      	ldrb	r3, [r3, #8]
 8000d24:	461a      	mov	r2, r3
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	791b      	ldrb	r3, [r3, #4]
 8000d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2e:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~(1 << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) ); //clears the bit fields
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	685a      	ldr	r2, [r3, #4]
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	791b      	ldrb	r3, [r3, #4]
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	408b      	lsls	r3, r1
 8000d40:	43db      	mvns	r3, r3
 8000d42:	4619      	mov	r1, r3
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	400a      	ands	r2, r1
 8000d4a:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp; //sets the bit fields
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	6859      	ldr	r1, [r3, #4]
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	697a      	ldr	r2, [r7, #20]
 8000d58:	430a      	orrs	r2, r1
 8000d5a:	605a      	str	r2, [r3, #4]
	temp = 0;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	617b      	str	r3, [r7, #20]

	//sets GPIO output speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)) );
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	799b      	ldrb	r3, [r3, #6]
 8000d64:	461a      	mov	r2, r3
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	791b      	ldrb	r3, [r3, #4]
 8000d6a:	005b      	lsls	r3, r3, #1
 8000d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d70:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDER &= ~(3 << (2 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)) ); //clears the bit fields
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	689a      	ldr	r2, [r3, #8]
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	791b      	ldrb	r3, [r3, #4]
 8000d7c:	005b      	lsls	r3, r3, #1
 8000d7e:	2103      	movs	r1, #3
 8000d80:	fa01 f303 	lsl.w	r3, r1, r3
 8000d84:	43db      	mvns	r3, r3
 8000d86:	4619      	mov	r1, r3
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	400a      	ands	r2, r1
 8000d8e:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDER |= temp; //sets the bit fields
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	6899      	ldr	r1, [r3, #8]
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	697a      	ldr	r2, [r7, #20]
 8000d9c:	430a      	orrs	r2, r1
 8000d9e:	609a      	str	r2, [r3, #8]
	temp = 0;
 8000da0:	2300      	movs	r3, #0
 8000da2:	617b      	str	r3, [r7, #20]


	//4. Configure alternate function setting (if GPIO is set at alternate function mode)
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN){
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	795b      	ldrb	r3, [r3, #5]
 8000da8:	2b02      	cmp	r3, #2
 8000daa:	d134      	bne.n	8000e16 <GPIO_Init+0x376>
		 * The resulting quotient selects whether AFRL = 0 or AFRH = 1 to be used as index in the AFR array
		 * Logic behind: any number that is less than 8 divided by 8 will result in a quotient of 0 since only the integer part is stored
		 * in the variable hence it will  use the 0 index which the AFRL address is at.
		 * If the number (pin number) is greater than 8, the resulting quotient is 1 hence will use the index 1 which the AFRH address is at
		 */
		uint8_t temp1 = ((pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) / 8);
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	791b      	ldrb	r3, [r3, #4]
 8000db0:	08db      	lsrs	r3, r3, #3
 8000db2:	743b      	strb	r3, [r7, #16]

		/*
		 * the resulting modulo determines the left shift needed for setting the peripheral register
		 */
		uint8_t Lshift_val = ((pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) % 8);
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	791b      	ldrb	r3, [r3, #4]
 8000db8:	f003 0307 	and.w	r3, r3, #7
 8000dbc:	73fb      	strb	r3, [r7, #15]

		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinAFMode << (4 * Lshift_val) );
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	7a5b      	ldrb	r3, [r3, #9]
 8000dc2:	461a      	mov	r2, r3
 8000dc4:	7bfb      	ldrb	r3, [r7, #15]
 8000dc6:	009b      	lsls	r3, r3, #2
 8000dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dcc:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(15 << (4 * Lshift_val) ); //clears the bit fields in the register before setting
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	7c3a      	ldrb	r2, [r7, #16]
 8000dd4:	3208      	adds	r2, #8
 8000dd6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000dda:	7bfb      	ldrb	r3, [r7, #15]
 8000ddc:	009b      	lsls	r3, r3, #2
 8000dde:	220f      	movs	r2, #15
 8000de0:	fa02 f303 	lsl.w	r3, r2, r3
 8000de4:	43db      	mvns	r3, r3
 8000de6:	4618      	mov	r0, r3
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	7c3a      	ldrb	r2, [r7, #16]
 8000dee:	4001      	ands	r1, r0
 8000df0:	3208      	adds	r2, #8
 8000df2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= temp;  //Sets the bit fields in the register
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	7c3a      	ldrb	r2, [r7, #16]
 8000dfc:	3208      	adds	r2, #8
 8000dfe:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	7c3a      	ldrb	r2, [r7, #16]
 8000e08:	6979      	ldr	r1, [r7, #20]
 8000e0a:	4301      	orrs	r1, r0
 8000e0c:	3208      	adds	r2, #8
 8000e0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		temp = 0;
 8000e12:	2300      	movs	r3, #0
 8000e14:	617b      	str	r3, [r7, #20]
	}

}
 8000e16:	bf00      	nop
 8000e18:	3718      	adds	r7, #24
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	40023800 	.word	0x40023800
 8000e24:	40013800 	.word	0x40013800
 8000e28:	40013c00 	.word	0x40013c00

08000e2c <GPIO_IRQInterruptConfig>:
//4. identify the IRQ number on which the processor accepts the interrupt from that pin
//5. Configure the IRQ priority for the identified IRQ number (Processor side)
//6. enable interrupt reception on that IRQ number (processor side)
//7. implement the IRQ handler
void GPIO_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b085      	sub	sp, #20
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	4603      	mov	r3, r0
 8000e34:	460a      	mov	r2, r1
 8000e36:	71fb      	strb	r3, [r7, #7]
 8000e38:	4613      	mov	r3, r2
 8000e3a:	71bb      	strb	r3, [r7, #6]
	 * EX. IRQNumber = 76, Lshift_val = 76 % 32 = 12, so the needed left shift to program the bitfield
	 * for IRQNumber 76 is 12.
	 *
	 *
	 */
	uint8_t iNVIC = IRQNumber / 32;
 8000e3c:	79fb      	ldrb	r3, [r7, #7]
 8000e3e:	095b      	lsrs	r3, r3, #5
 8000e40:	73fb      	strb	r3, [r7, #15]
	uint8_t Lshift_val = IRQNumber % 32;
 8000e42:	79fb      	ldrb	r3, [r7, #7]
 8000e44:	f003 031f 	and.w	r3, r3, #31
 8000e48:	73bb      	strb	r3, [r7, #14]

	if(EnorDi == ENABLE){
 8000e4a:	79bb      	ldrb	r3, [r7, #6]
 8000e4c:	2b01      	cmp	r3, #1
 8000e4e:	d114      	bne.n	8000e7a <GPIO_IRQInterruptConfig+0x4e>
		*(NVIC_ISER_BASE_ADDR + iNVIC) |= (1 << Lshift_val);
 8000e50:	7bfb      	ldrb	r3, [r7, #15]
 8000e52:	009b      	lsls	r3, r3, #2
 8000e54:	f103 4360 	add.w	r3, r3, #3758096384	@ 0xe0000000
 8000e58:	f503 4361 	add.w	r3, r3, #57600	@ 0xe100
 8000e5c:	681a      	ldr	r2, [r3, #0]
 8000e5e:	7bbb      	ldrb	r3, [r7, #14]
 8000e60:	2101      	movs	r1, #1
 8000e62:	fa01 f303 	lsl.w	r3, r1, r3
 8000e66:	4619      	mov	r1, r3
 8000e68:	7bfb      	ldrb	r3, [r7, #15]
 8000e6a:	009b      	lsls	r3, r3, #2
 8000e6c:	f103 4360 	add.w	r3, r3, #3758096384	@ 0xe0000000
 8000e70:	f503 4361 	add.w	r3, r3, #57600	@ 0xe100
 8000e74:	430a      	orrs	r2, r1
 8000e76:	601a      	str	r2, [r3, #0]
	}
	else{
		*(NVIC_ICER_BASE_ADDR + iNVIC) |= (1 << Lshift_val);
	}

}
 8000e78:	e00f      	b.n	8000e9a <GPIO_IRQInterruptConfig+0x6e>
		*(NVIC_ICER_BASE_ADDR + iNVIC) |= (1 << Lshift_val);
 8000e7a:	7bfb      	ldrb	r3, [r7, #15]
 8000e7c:	009a      	lsls	r2, r3, #2
 8000e7e:	4b09      	ldr	r3, [pc, #36]	@ (8000ea4 <GPIO_IRQInterruptConfig+0x78>)
 8000e80:	4413      	add	r3, r2
 8000e82:	681a      	ldr	r2, [r3, #0]
 8000e84:	7bbb      	ldrb	r3, [r7, #14]
 8000e86:	2101      	movs	r1, #1
 8000e88:	fa01 f303 	lsl.w	r3, r1, r3
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	7bfb      	ldrb	r3, [r7, #15]
 8000e90:	0099      	lsls	r1, r3, #2
 8000e92:	4b04      	ldr	r3, [pc, #16]	@ (8000ea4 <GPIO_IRQInterruptConfig+0x78>)
 8000e94:	440b      	add	r3, r1
 8000e96:	4302      	orrs	r2, r0
 8000e98:	601a      	str	r2, [r3, #0]
}
 8000e9a:	bf00      	nop
 8000e9c:	3714      	adds	r7, #20
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bc80      	pop	{r7}
 8000ea2:	4770      	bx	lr
 8000ea4:	e000e180 	.word	0xe000e180

08000ea8 <GPIO_IRQPriorityConfig>:
 * @return		- none
 *
 * @Note 		-
 */
void GPIO_IRQPriorityConfig(uint8_t IRQNumber, uint8_t IRQPriority)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b085      	sub	sp, #20
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	4603      	mov	r3, r0
 8000eb0:	460a      	mov	r2, r1
 8000eb2:	71fb      	strb	r3, [r7, #7]
 8000eb4:	4613      	mov	r3, r2
 8000eb6:	71bb      	strb	r3, [r7, #6]
	uint8_t iprx = IRQNumber / 4; //gets the IPR register index for setting
 8000eb8:	79fb      	ldrb	r3, [r7, #7]
 8000eba:	089b      	lsrs	r3, r3, #2
 8000ebc:	73fb      	strb	r3, [r7, #15]
	uint8_t iprx_section = IRQNumber % 4; //determines which section of the IPR register to set.
 8000ebe:	79fb      	ldrb	r3, [r7, #7]
 8000ec0:	f003 0303 	and.w	r3, r3, #3
 8000ec4:	73bb      	strb	r3, [r7, #14]
	uint8_t Lshift_val = (8 - NUM_PRIO_BITS_IMPLEMENTED) + (8 * iprx_section);
 8000ec6:	7bbb      	ldrb	r3, [r7, #14]
 8000ec8:	00db      	lsls	r3, r3, #3
 8000eca:	b2db      	uxtb	r3, r3
 8000ecc:	3304      	adds	r3, #4
 8000ece:	737b      	strb	r3, [r7, #13]

	*(NVIC_IPR_BASE_ADDR + iprx) |= (IRQPriority << Lshift_val);
 8000ed0:	7bfb      	ldrb	r3, [r7, #15]
 8000ed2:	009b      	lsls	r3, r3, #2
 8000ed4:	f103 4360 	add.w	r3, r3, #3758096384	@ 0xe0000000
 8000ed8:	f503 4364 	add.w	r3, r3, #58368	@ 0xe400
 8000edc:	681a      	ldr	r2, [r3, #0]
 8000ede:	79b9      	ldrb	r1, [r7, #6]
 8000ee0:	7b7b      	ldrb	r3, [r7, #13]
 8000ee2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	7bfb      	ldrb	r3, [r7, #15]
 8000eea:	009b      	lsls	r3, r3, #2
 8000eec:	f103 4360 	add.w	r3, r3, #3758096384	@ 0xe0000000
 8000ef0:	f503 4364 	add.w	r3, r3, #58368	@ 0xe400
 8000ef4:	430a      	orrs	r2, r1
 8000ef6:	601a      	str	r2, [r3, #0]


}
 8000ef8:	bf00      	nop
 8000efa:	3714      	adds	r7, #20
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bc80      	pop	{r7}
 8000f00:	4770      	bx	lr
	...

08000f04 <GPIO_IRQHandling>:

void GPIO_IRQHandling(uint8_t PinNumber)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b083      	sub	sp, #12
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	71fb      	strb	r3, [r7, #7]
	//clears the EXTI PR register with the corresponding pin number
	if(EXTI->PR & (1<<PinNumber)){
 8000f0e:	4b0c      	ldr	r3, [pc, #48]	@ (8000f40 <GPIO_IRQHandling+0x3c>)
 8000f10:	695b      	ldr	r3, [r3, #20]
 8000f12:	79fa      	ldrb	r2, [r7, #7]
 8000f14:	2101      	movs	r1, #1
 8000f16:	fa01 f202 	lsl.w	r2, r1, r2
 8000f1a:	4013      	ands	r3, r2
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d009      	beq.n	8000f34 <GPIO_IRQHandling+0x30>
		//clear
		EXTI->PR |= (1 << PinNumber);
 8000f20:	4b07      	ldr	r3, [pc, #28]	@ (8000f40 <GPIO_IRQHandling+0x3c>)
 8000f22:	695b      	ldr	r3, [r3, #20]
 8000f24:	79fa      	ldrb	r2, [r7, #7]
 8000f26:	2101      	movs	r1, #1
 8000f28:	fa01 f202 	lsl.w	r2, r1, r2
 8000f2c:	4611      	mov	r1, r2
 8000f2e:	4a04      	ldr	r2, [pc, #16]	@ (8000f40 <GPIO_IRQHandling+0x3c>)
 8000f30:	430b      	orrs	r3, r1
 8000f32:	6153      	str	r3, [r2, #20]
	}

}
 8000f34:	bf00      	nop
 8000f36:	370c      	adds	r7, #12
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bc80      	pop	{r7}
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	40013c00 	.word	0x40013c00

08000f44 <I2C_PeripheralClkCtrl>:
 * @return		- none
 *
 * @Note 		-
 */
void I2C_PeripheralClkCtrl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b085      	sub	sp, #20
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	460b      	mov	r3, r1
 8000f4e:	70fb      	strb	r3, [r7, #3]
	uint8_t temp1 = I2C_BASEADDR_TO_CODE(pI2Cx);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	4a2e      	ldr	r2, [pc, #184]	@ (800100c <I2C_PeripheralClkCtrl+0xc8>)
 8000f54:	4293      	cmp	r3, r2
 8000f56:	d00d      	beq.n	8000f74 <I2C_PeripheralClkCtrl+0x30>
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	4a2d      	ldr	r2, [pc, #180]	@ (8001010 <I2C_PeripheralClkCtrl+0xcc>)
 8000f5c:	4293      	cmp	r3, r2
 8000f5e:	d007      	beq.n	8000f70 <I2C_PeripheralClkCtrl+0x2c>
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	4a2c      	ldr	r2, [pc, #176]	@ (8001014 <I2C_PeripheralClkCtrl+0xd0>)
 8000f64:	4293      	cmp	r3, r2
 8000f66:	d101      	bne.n	8000f6c <I2C_PeripheralClkCtrl+0x28>
 8000f68:	2302      	movs	r3, #2
 8000f6a:	e004      	b.n	8000f76 <I2C_PeripheralClkCtrl+0x32>
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	e002      	b.n	8000f76 <I2C_PeripheralClkCtrl+0x32>
 8000f70:	2301      	movs	r3, #1
 8000f72:	e000      	b.n	8000f76 <I2C_PeripheralClkCtrl+0x32>
 8000f74:	2300      	movs	r3, #0
 8000f76:	73fb      	strb	r3, [r7, #15]

	if(EnorDi == ENABLE){
 8000f78:	78fb      	ldrb	r3, [r7, #3]
 8000f7a:	2b01      	cmp	r3, #1
 8000f7c:	d11e      	bne.n	8000fbc <I2C_PeripheralClkCtrl+0x78>
		switch(temp1){
 8000f7e:	7bfb      	ldrb	r3, [r7, #15]
 8000f80:	2b02      	cmp	r3, #2
 8000f82:	d014      	beq.n	8000fae <I2C_PeripheralClkCtrl+0x6a>
 8000f84:	2b02      	cmp	r3, #2
 8000f86:	dc38      	bgt.n	8000ffa <I2C_PeripheralClkCtrl+0xb6>
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d002      	beq.n	8000f92 <I2C_PeripheralClkCtrl+0x4e>
 8000f8c:	2b01      	cmp	r3, #1
 8000f8e:	d007      	beq.n	8000fa0 <I2C_PeripheralClkCtrl+0x5c>
			break;
		case 2:
			I2C3_PCLK_EN();
			break;
		default:
			break;
 8000f90:	e033      	b.n	8000ffa <I2C_PeripheralClkCtrl+0xb6>
			I2C1_PCLK_EN();
 8000f92:	4b21      	ldr	r3, [pc, #132]	@ (8001018 <I2C_PeripheralClkCtrl+0xd4>)
 8000f94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f96:	4a20      	ldr	r2, [pc, #128]	@ (8001018 <I2C_PeripheralClkCtrl+0xd4>)
 8000f98:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000f9c:	6413      	str	r3, [r2, #64]	@ 0x40
			break;
 8000f9e:	e02f      	b.n	8001000 <I2C_PeripheralClkCtrl+0xbc>
			I2C2_PCLK_EN();
 8000fa0:	4b1d      	ldr	r3, [pc, #116]	@ (8001018 <I2C_PeripheralClkCtrl+0xd4>)
 8000fa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fa4:	4a1c      	ldr	r2, [pc, #112]	@ (8001018 <I2C_PeripheralClkCtrl+0xd4>)
 8000fa6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000faa:	6413      	str	r3, [r2, #64]	@ 0x40
			break;
 8000fac:	e028      	b.n	8001000 <I2C_PeripheralClkCtrl+0xbc>
			I2C3_PCLK_EN();
 8000fae:	4b1a      	ldr	r3, [pc, #104]	@ (8001018 <I2C_PeripheralClkCtrl+0xd4>)
 8000fb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fb2:	4a19      	ldr	r2, [pc, #100]	@ (8001018 <I2C_PeripheralClkCtrl+0xd4>)
 8000fb4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000fb8:	6413      	str	r3, [r2, #64]	@ 0x40
			break;
 8000fba:	e021      	b.n	8001000 <I2C_PeripheralClkCtrl+0xbc>
		}

	}
	else{
		switch(temp1){
 8000fbc:	7bfb      	ldrb	r3, [r7, #15]
 8000fbe:	2b02      	cmp	r3, #2
 8000fc0:	d014      	beq.n	8000fec <I2C_PeripheralClkCtrl+0xa8>
 8000fc2:	2b02      	cmp	r3, #2
 8000fc4:	dc1b      	bgt.n	8000ffe <I2C_PeripheralClkCtrl+0xba>
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d002      	beq.n	8000fd0 <I2C_PeripheralClkCtrl+0x8c>
 8000fca:	2b01      	cmp	r3, #1
 8000fcc:	d007      	beq.n	8000fde <I2C_PeripheralClkCtrl+0x9a>
			break;
		case 2:
			I2C3_PCLK_DI();
			break;
		default:
			break;
 8000fce:	e016      	b.n	8000ffe <I2C_PeripheralClkCtrl+0xba>
			I2C1_PCLK_DI();
 8000fd0:	4b11      	ldr	r3, [pc, #68]	@ (8001018 <I2C_PeripheralClkCtrl+0xd4>)
 8000fd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fd4:	4a10      	ldr	r2, [pc, #64]	@ (8001018 <I2C_PeripheralClkCtrl+0xd4>)
 8000fd6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8000fda:	6413      	str	r3, [r2, #64]	@ 0x40
			break;
 8000fdc:	e010      	b.n	8001000 <I2C_PeripheralClkCtrl+0xbc>
			I2C2_PCLK_DI();
 8000fde:	4b0e      	ldr	r3, [pc, #56]	@ (8001018 <I2C_PeripheralClkCtrl+0xd4>)
 8000fe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fe2:	4a0d      	ldr	r2, [pc, #52]	@ (8001018 <I2C_PeripheralClkCtrl+0xd4>)
 8000fe4:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8000fe8:	6413      	str	r3, [r2, #64]	@ 0x40
			break;
 8000fea:	e009      	b.n	8001000 <I2C_PeripheralClkCtrl+0xbc>
			I2C3_PCLK_DI();
 8000fec:	4b0a      	ldr	r3, [pc, #40]	@ (8001018 <I2C_PeripheralClkCtrl+0xd4>)
 8000fee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ff0:	4a09      	ldr	r2, [pc, #36]	@ (8001018 <I2C_PeripheralClkCtrl+0xd4>)
 8000ff2:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8000ff6:	6413      	str	r3, [r2, #64]	@ 0x40
			break;
 8000ff8:	e002      	b.n	8001000 <I2C_PeripheralClkCtrl+0xbc>
			break;
 8000ffa:	bf00      	nop
 8000ffc:	e000      	b.n	8001000 <I2C_PeripheralClkCtrl+0xbc>
			break;
 8000ffe:	bf00      	nop
		}

	}
}
 8001000:	bf00      	nop
 8001002:	3714      	adds	r7, #20
 8001004:	46bd      	mov	sp, r7
 8001006:	bc80      	pop	{r7}
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	40005400 	.word	0x40005400
 8001010:	40005800 	.word	0x40005800
 8001014:	40005c00 	.word	0x40005c00
 8001018:	40023800 	.word	0x40023800

0800101c <I2C_PeripheralControl>:
 * @return		- none
 *
 * @Note 		-
 */
void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 800101c:	b480      	push	{r7}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
 8001024:	460b      	mov	r3, r1
 8001026:	70fb      	strb	r3, [r7, #3]
	if (EnorDi == ENABLE) {
 8001028:	78fb      	ldrb	r3, [r7, #3]
 800102a:	2b01      	cmp	r3, #1
 800102c:	d10c      	bne.n	8001048 <I2C_PeripheralControl+0x2c>
		pI2Cx->CR1 |= (1 << I2C_CR1_PE); //Enable the peripheral
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f043 0201 	orr.w	r2, r3, #1
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	601a      	str	r2, [r3, #0]

		//enables ACKing, can only be enabled when PE = 1
		pI2Cx->CR1 |= 1 << I2C_CR1_ACK;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	601a      	str	r2, [r3, #0]

	} else {
		pI2Cx->CR1 &= ~(1 << I2C_CR1_PE); //Disable the peripheral
	}
}
 8001046:	e005      	b.n	8001054 <I2C_PeripheralControl+0x38>
		pI2Cx->CR1 &= ~(1 << I2C_CR1_PE); //Disable the peripheral
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f023 0201 	bic.w	r2, r3, #1
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	601a      	str	r2, [r3, #0]
}
 8001054:	bf00      	nop
 8001056:	370c      	adds	r7, #12
 8001058:	46bd      	mov	sp, r7
 800105a:	bc80      	pop	{r7}
 800105c:	4770      	bx	lr
	...

08001060 <I2C_Init>:
 * @return		- none
 *
 * @Note 		-
 */
void I2C_Init(I2C_Handle_t *pI2CHandle)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b086      	sub	sp, #24
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
	I2C_PeripheralClkCtrl(pI2CHandle->pI2Cx, ENABLE);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	2101      	movs	r1, #1
 800106e:	4618      	mov	r0, r3
 8001070:	f7ff ff68 	bl	8000f44 <I2C_PeripheralClkCtrl>

	uint32_t SCLSpeed = pI2CHandle->I2C_Config.I2C_SCLSpeed;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	617b      	str	r3, [r7, #20]
	uint16_t CCRVal;
	uint8_t temp = 0;
 800107a:	2300      	movs	r3, #0
 800107c:	74fb      	strb	r3, [r7, #19]

	//fetches the current APB1 clock value
	uint32_t APB1Clock = RCC_GetPCLK1Value();
 800107e:	f000 f90f 	bl	80012a0 <RCC_GetPCLK1Value>
 8001082:	60f8      	str	r0, [r7, #12]

	//clears the I2C_CR2:FREQ5:0 bitfield just to be sure thats its clean before setting
	pI2CHandle->pI2Cx->CR2 &= ~(63 << I2C_CR2_FREQ5_0);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	685a      	ldr	r2, [r3, #4]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8001092:	605a      	str	r2, [r3, #4]

	//program the current APB1 clock freq into I2C_CR2:FREQ5_0
	//divided the APB1Clock value with 1 million, only need the ten millions and millions digit
	pI2CHandle->pI2Cx->CR2 |= (APB1Clock/1000000) << I2C_CR2_FREQ5_0;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	6859      	ldr	r1, [r3, #4]
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	4a33      	ldr	r2, [pc, #204]	@ (800116c <I2C_Init+0x10c>)
 800109e:	fba2 2303 	umull	r2, r3, r2, r3
 80010a2:	0c9a      	lsrs	r2, r3, #18
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	430a      	orrs	r2, r1
 80010aa:	605a      	str	r2, [r3, #4]

	//programs the user defined slave address to I2C_OAR1:ADD7_1 register
	pI2CHandle->pI2Cx->OAR1 |= pI2CHandle->I2C_Config.I2C_DeviceAddress << I2C_OAR1_ADD7_1;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	6899      	ldr	r1, [r3, #8]
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	7a1b      	ldrb	r3, [r3, #8]
 80010b6:	005a      	lsls	r2, r3, #1
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	430a      	orrs	r2, r1
 80010be:	609a      	str	r2, [r3, #8]

	//set the 14th bit in OAR1 register to 1 as instructed by reference manual.
	pI2CHandle->pI2Cx->OAR1 |= 1 << I2C_OAR1_BIT14;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	689a      	ldr	r2, [r3, #8]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80010ce:	609a      	str	r2, [r3, #8]

	//for standard mode at 100Kbps
	if(SCLSpeed <= I2C_SCL_SPEED_STANDARD)
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	4a27      	ldr	r2, [pc, #156]	@ (8001170 <I2C_Init+0x110>)
 80010d4:	4293      	cmp	r3, r2
 80010d6:	d80f      	bhi.n	80010f8 <I2C_Init+0x98>
		//set the MCU into master standard mode
		temp &= ~(1 << I2C_CCR_FS);

		//calculate the needed CCR , for some reason it will skip this calculation and go to
		//infinite loop, idk why probably kay float ni sya?
		CCRVal = APB1Clock / (2 * SCLSpeed);
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	005b      	lsls	r3, r3, #1
 80010dc:	68fa      	ldr	r2, [r7, #12]
 80010de:	fbb2 f3f3 	udiv	r3, r2, r3
 80010e2:	817b      	strh	r3, [r7, #10]

		//set the CCR value
		temp |= CCRVal << I2C_CCR_CCR11_0;
 80010e4:	897b      	ldrh	r3, [r7, #10]
 80010e6:	b2da      	uxtb	r2, r3
 80010e8:	7cfb      	ldrb	r3, [r7, #19]
 80010ea:	4313      	orrs	r3, r2
 80010ec:	74fb      	strb	r3, [r7, #19]

		//programs the temp value into the CCR register
		pI2CHandle->pI2Cx->CCR = temp;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	7cfa      	ldrb	r2, [r7, #19]
 80010f4:	61da      	str	r2, [r3, #28]
 80010f6:	e029      	b.n	800114c <I2C_Init+0xec>
		temp |= 1 << I2C_CCR_FS;

		//set the Fast Mode duty cycle
		temp |= pI2CHandle->I2C_Config.I2C_FMDutyCycle << I2C_CCR_DUTY;

		switch(SCLSpeed){
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	4a1e      	ldr	r2, [pc, #120]	@ (8001174 <I2C_Init+0x114>)
 80010fc:	4293      	cmp	r3, r2
 80010fe:	d004      	beq.n	800110a <I2C_Init+0xaa>
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	4a1d      	ldr	r2, [pc, #116]	@ (8001178 <I2C_Init+0x118>)
 8001104:	4293      	cmp	r3, r2
 8001106:	d012      	beq.n	800112e <I2C_Init+0xce>
			//programs the temp value into the CCR register
			pI2CHandle->pI2Cx->CCR = temp;
			break;

		default:
			break;
 8001108:	e020      	b.n	800114c <I2C_Init+0xec>
			CCRVal = APB1Clock / (3 * SCLSpeed);
 800110a:	697a      	ldr	r2, [r7, #20]
 800110c:	4613      	mov	r3, r2
 800110e:	005b      	lsls	r3, r3, #1
 8001110:	4413      	add	r3, r2
 8001112:	68fa      	ldr	r2, [r7, #12]
 8001114:	fbb2 f3f3 	udiv	r3, r2, r3
 8001118:	817b      	strh	r3, [r7, #10]
			temp |= CCRVal << I2C_CCR_CCR11_0;
 800111a:	897b      	ldrh	r3, [r7, #10]
 800111c:	b2da      	uxtb	r2, r3
 800111e:	7cfb      	ldrb	r3, [r7, #19]
 8001120:	4313      	orrs	r3, r2
 8001122:	74fb      	strb	r3, [r7, #19]
			pI2CHandle->pI2Cx->CCR = temp;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	7cfa      	ldrb	r2, [r7, #19]
 800112a:	61da      	str	r2, [r3, #28]
			break;
 800112c:	e00e      	b.n	800114c <I2C_Init+0xec>
			CCRVal = APB1Clock / (25 * SCLSpeed);
 800112e:	697a      	ldr	r2, [r7, #20]
 8001130:	4613      	mov	r3, r2
 8001132:	009b      	lsls	r3, r3, #2
 8001134:	4413      	add	r3, r2
 8001136:	009a      	lsls	r2, r3, #2
 8001138:	4413      	add	r3, r2
 800113a:	68fa      	ldr	r2, [r7, #12]
 800113c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001140:	817b      	strh	r3, [r7, #10]
			pI2CHandle->pI2Cx->CCR = temp;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	7cfa      	ldrb	r2, [r7, #19]
 8001148:	61da      	str	r2, [r3, #28]
			break;
 800114a:	bf00      	nop
		}
	}

	//TRISE configuration
	uint8_t trise_val;
	trise_val = Get_TriseValue(pI2CHandle);
 800114c:	6878      	ldr	r0, [r7, #4]
 800114e:	f000 f8f7 	bl	8001340 <Get_TriseValue>
 8001152:	4603      	mov	r3, r0
 8001154:	727b      	strb	r3, [r7, #9]

	//programs the calculated trise value into the Trise register
	//masked the first 6 bits only since TRISE register is only 6 bits long.
	pI2CHandle->pI2Cx->TRISE = (trise_val & 0x3f);
 8001156:	7a7a      	ldrb	r2, [r7, #9]
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8001160:	621a      	str	r2, [r3, #32]
}
 8001162:	bf00      	nop
 8001164:	3718      	adds	r7, #24
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	431bde83 	.word	0x431bde83
 8001170:	000186a0 	.word	0x000186a0
 8001174:	00030d40 	.word	0x00030d40
 8001178:	00061a80 	.word	0x00061a80

0800117c <I2C_MasterSendDataIT>:
 * @return		- none
 *
 * @Note 		-
 */
uint8_t I2C_MasterSendDataIT(I2C_Handle_t *pI2CHandle, uint8_t *pTxBuffer, uint32_t Len, uint8_t SlaveAddr, uint8_t Repeated_Start_EN)
{
 800117c:	b480      	push	{r7}
 800117e:	b087      	sub	sp, #28
 8001180:	af00      	add	r7, sp, #0
 8001182:	60f8      	str	r0, [r7, #12]
 8001184:	60b9      	str	r1, [r7, #8]
 8001186:	607a      	str	r2, [r7, #4]
 8001188:	70fb      	strb	r3, [r7, #3]
	uint8_t busystate = pI2CHandle->TxRxState;
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	7f1b      	ldrb	r3, [r3, #28]
 800118e:	75fb      	strb	r3, [r7, #23]

	if( (busystate != I2C_BUSY_IN_TX) && (busystate != I2C_BUSY_IN_RX))
 8001190:	7dfb      	ldrb	r3, [r7, #23]
 8001192:	2b02      	cmp	r3, #2
 8001194:	d033      	beq.n	80011fe <I2C_MasterSendDataIT+0x82>
 8001196:	7dfb      	ldrb	r3, [r7, #23]
 8001198:	2b01      	cmp	r3, #1
 800119a:	d030      	beq.n	80011fe <I2C_MasterSendDataIT+0x82>
	{
		pI2CHandle->pTxBuffer = pTxBuffer;
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	68ba      	ldr	r2, [r7, #8]
 80011a0:	60da      	str	r2, [r3, #12]
		pI2CHandle->TxLen = Len;
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	687a      	ldr	r2, [r7, #4]
 80011a6:	615a      	str	r2, [r3, #20]
		pI2CHandle->TxRxState = I2C_BUSY_IN_TX;
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	2202      	movs	r2, #2
 80011ac:	771a      	strb	r2, [r3, #28]
		pI2CHandle->DeviceAddr = SlaveAddr;
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	78fa      	ldrb	r2, [r7, #3]
 80011b2:	775a      	strb	r2, [r3, #29]
		pI2CHandle->Sr = Repeated_Start_EN;
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	f897 2020 	ldrb.w	r2, [r7, #32]
 80011ba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

		//Generate START Condition
		pI2CHandle->pI2Cx->CR1 |= 1 << I2C_CR1_START;
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	681a      	ldr	r2, [r3, #0]
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80011cc:	601a      	str	r2, [r3, #0]

		//Implement the code to enable ITBUFEN Control Bit, this enables interrupt for when TXE = 1
		pI2CHandle->pI2Cx->CR2 |= 1 << I2C_CR2_ITBUFEN;
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	685a      	ldr	r2, [r3, #4]
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80011dc:	605a      	str	r2, [r3, #4]

		//Implement the code to enable ITEVTEN Control Bit, this enables interrupt coming from event triggers like TXE = 1
		pI2CHandle->pI2Cx->CR2 |= 1 << I2C_CR2_ITEVTEN;
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	685a      	ldr	r2, [r3, #4]
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80011ec:	605a      	str	r2, [r3, #4]

		//Implement the code to enable ITERREN Control Bit. this enables interrupt coming from errors during transmission
		pI2CHandle->pI2Cx->CR2 |= 1 << I2C_CR2_ITERREN;
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	685a      	ldr	r2, [r3, #4]
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80011fc:	605a      	str	r2, [r3, #4]
	}

	return busystate;
 80011fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8001200:	4618      	mov	r0, r3
 8001202:	371c      	adds	r7, #28
 8001204:	46bd      	mov	sp, r7
 8001206:	bc80      	pop	{r7}
 8001208:	4770      	bx	lr

0800120a <I2C_MasterReceiveDataIT>:
 * @return		- none
 *
 * @Note 		-
 */
uint8_t I2C_MasterReceiveDataIT(I2C_Handle_t *pI2CHandle, uint8_t *pRxBuffer, uint32_t Len, uint8_t SlaveAddr, uint8_t Repeated_Start_EN)
{
 800120a:	b480      	push	{r7}
 800120c:	b087      	sub	sp, #28
 800120e:	af00      	add	r7, sp, #0
 8001210:	60f8      	str	r0, [r7, #12]
 8001212:	60b9      	str	r1, [r7, #8]
 8001214:	607a      	str	r2, [r7, #4]
 8001216:	70fb      	strb	r3, [r7, #3]
	uint8_t busystate = pI2CHandle->TxRxState;
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	7f1b      	ldrb	r3, [r3, #28]
 800121c:	75fb      	strb	r3, [r7, #23]

	if( (busystate != I2C_BUSY_IN_TX) && (busystate != I2C_BUSY_IN_RX))
 800121e:	7dfb      	ldrb	r3, [r7, #23]
 8001220:	2b02      	cmp	r3, #2
 8001222:	d036      	beq.n	8001292 <I2C_MasterReceiveDataIT+0x88>
 8001224:	7dfb      	ldrb	r3, [r7, #23]
 8001226:	2b01      	cmp	r3, #1
 8001228:	d033      	beq.n	8001292 <I2C_MasterReceiveDataIT+0x88>
	{
		pI2CHandle->pRxBuffer = pRxBuffer;
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	68ba      	ldr	r2, [r7, #8]
 800122e:	611a      	str	r2, [r3, #16]
		pI2CHandle->RxLen = Len;
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	687a      	ldr	r2, [r7, #4]
 8001234:	619a      	str	r2, [r3, #24]
		pI2CHandle->TxRxState = I2C_BUSY_IN_RX;
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	2201      	movs	r2, #1
 800123a:	771a      	strb	r2, [r3, #28]
		pI2CHandle->RxSize = Len; //Rxsize is used in the ISR code to manage the data reception
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	687a      	ldr	r2, [r7, #4]
 8001240:	621a      	str	r2, [r3, #32]
		pI2CHandle->DeviceAddr = SlaveAddr;
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	78fa      	ldrb	r2, [r7, #3]
 8001246:	775a      	strb	r2, [r3, #29]
		pI2CHandle->Sr = Repeated_Start_EN;
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800124e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

		//Generate START Condition
		pI2CHandle->pI2Cx->CR1 |= 1 << I2C_CR1_START;
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	681a      	ldr	r2, [r3, #0]
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001260:	601a      	str	r2, [r3, #0]

		//Implement the code to enable ITBUFEN Control Bit, this enables interrupt for when RxNE = 1
		pI2CHandle->pI2Cx->CR2 |= 1 << I2C_CR2_ITBUFEN;
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	685a      	ldr	r2, [r3, #4]
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001270:	605a      	str	r2, [r3, #4]

		//Implement the code to enable ITEVTEN Control Bit, this enables interrupt coming from event triggers like RxNE = 1
		pI2CHandle->pI2Cx->CR2 |= 1 << I2C_CR2_ITEVTEN;
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	685a      	ldr	r2, [r3, #4]
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001280:	605a      	str	r2, [r3, #4]

		//Implement the code to enable ITERREN Control Bit. this enables interrupt coming from errors during reception
		pI2CHandle->pI2Cx->CR2 |= 1 << I2C_CR2_ITERREN;
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	685a      	ldr	r2, [r3, #4]
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001290:	605a      	str	r2, [r3, #4]

	}

	return busystate;
 8001292:	7dfb      	ldrb	r3, [r7, #23]
}
 8001294:	4618      	mov	r0, r3
 8001296:	371c      	adds	r7, #28
 8001298:	46bd      	mov	sp, r7
 800129a:	bc80      	pop	{r7}
 800129c:	4770      	bx	lr
	...

080012a0 <RCC_GetPCLK1Value>:
 *
 * @return		- none
 *
 * @Note 		-
 */
uint32_t RCC_GetPCLK1Value(void) {
 80012a0:	b480      	push	{r7}
 80012a2:	b085      	sub	sp, #20
 80012a4:	af00      	add	r7, sp, #0
	uint32_t pclk1, system_clk;
	uint8_t clk_src, ahb_prescaler, apb1_prescaler;

	// Get the system clock source
	clk_src = (RCC->CFGR >> 2) & 0x3;
 80012a6:	4b23      	ldr	r3, [pc, #140]	@ (8001334 <RCC_GetPCLK1Value+0x94>)
 80012a8:	689b      	ldr	r3, [r3, #8]
 80012aa:	089b      	lsrs	r3, r3, #2
 80012ac:	b2db      	uxtb	r3, r3
 80012ae:	f003 0303 	and.w	r3, r3, #3
 80012b2:	727b      	strb	r3, [r7, #9]

	if (clk_src == 0) {
 80012b4:	7a7b      	ldrb	r3, [r7, #9]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d102      	bne.n	80012c0 <RCC_GetPCLK1Value+0x20>
		// HSI oscillator used as system clock
		system_clk = 16e+6; // HSI frequency is 16 MHz
 80012ba:	4b1f      	ldr	r3, [pc, #124]	@ (8001338 <RCC_GetPCLK1Value+0x98>)
 80012bc:	60fb      	str	r3, [r7, #12]
 80012be:	e004      	b.n	80012ca <RCC_GetPCLK1Value+0x2a>
	} else if (clk_src == 1) {
 80012c0:	7a7b      	ldrb	r3, [r7, #9]
 80012c2:	2b01      	cmp	r3, #1
 80012c4:	d101      	bne.n	80012ca <RCC_GetPCLK1Value+0x2a>
		// HSE oscillator used as system clock
		system_clk = 8e+6; // Assume HSE frequency is 8 MHz
 80012c6:	4b1d      	ldr	r3, [pc, #116]	@ (800133c <RCC_GetPCLK1Value+0x9c>)
 80012c8:	60fb      	str	r3, [r7, #12]
		// Calculate PLL output frequency (not shown here for brevity)
		//too complex, will add soon once I know how to use PLL as clock src.
	}

	// Get AHB prescaler
	ahb_prescaler = (RCC->CFGR >> 4) & 0xF;
 80012ca:	4b1a      	ldr	r3, [pc, #104]	@ (8001334 <RCC_GetPCLK1Value+0x94>)
 80012cc:	689b      	ldr	r3, [r3, #8]
 80012ce:	091b      	lsrs	r3, r3, #4
 80012d0:	b2db      	uxtb	r3, r3
 80012d2:	f003 030f 	and.w	r3, r3, #15
 80012d6:	72fb      	strb	r3, [r7, #11]
	if (ahb_prescaler < 8) {
 80012d8:	7afb      	ldrb	r3, [r7, #11]
 80012da:	2b07      	cmp	r3, #7
 80012dc:	d802      	bhi.n	80012e4 <RCC_GetPCLK1Value+0x44>
		ahb_prescaler = 1; // No division
 80012de:	2301      	movs	r3, #1
 80012e0:	72fb      	strb	r3, [r7, #11]
 80012e2:	e005      	b.n	80012f0 <RCC_GetPCLK1Value+0x50>
	} else {
		//this line is neat, this converts the binary value of the prescaler into its equivalent decimal value
		ahb_prescaler = 1 << (ahb_prescaler - 7); // 2, 4, 8, ..., 512
 80012e4:	7afb      	ldrb	r3, [r7, #11]
 80012e6:	3b07      	subs	r3, #7
 80012e8:	2201      	movs	r2, #1
 80012ea:	fa02 f303 	lsl.w	r3, r2, r3
 80012ee:	72fb      	strb	r3, [r7, #11]
	}

	// Get APB1 prescaler
	apb1_prescaler = (RCC->CFGR >> 10) & 0x7;
 80012f0:	4b10      	ldr	r3, [pc, #64]	@ (8001334 <RCC_GetPCLK1Value+0x94>)
 80012f2:	689b      	ldr	r3, [r3, #8]
 80012f4:	0a9b      	lsrs	r3, r3, #10
 80012f6:	b2db      	uxtb	r3, r3
 80012f8:	f003 0307 	and.w	r3, r3, #7
 80012fc:	72bb      	strb	r3, [r7, #10]
	if (apb1_prescaler < 4) {
 80012fe:	7abb      	ldrb	r3, [r7, #10]
 8001300:	2b03      	cmp	r3, #3
 8001302:	d802      	bhi.n	800130a <RCC_GetPCLK1Value+0x6a>
		apb1_prescaler = 1; // No division
 8001304:	2301      	movs	r3, #1
 8001306:	72bb      	strb	r3, [r7, #10]
 8001308:	e005      	b.n	8001316 <RCC_GetPCLK1Value+0x76>
	} else {
		apb1_prescaler = 1 << (apb1_prescaler - 3); // 2, 4, 8, 16
 800130a:	7abb      	ldrb	r3, [r7, #10]
 800130c:	3b03      	subs	r3, #3
 800130e:	2201      	movs	r2, #1
 8001310:	fa02 f303 	lsl.w	r3, r2, r3
 8001314:	72bb      	strb	r3, [r7, #10]
	}

	// Calculate PCLK1
	pclk1 = (system_clk / ahb_prescaler) / apb1_prescaler;
 8001316:	7afb      	ldrb	r3, [r7, #11]
 8001318:	68fa      	ldr	r2, [r7, #12]
 800131a:	fbb2 f2f3 	udiv	r2, r2, r3
 800131e:	7abb      	ldrb	r3, [r7, #10]
 8001320:	fbb2 f3f3 	udiv	r3, r2, r3
 8001324:	607b      	str	r3, [r7, #4]

	return pclk1;
 8001326:	687b      	ldr	r3, [r7, #4]
}
 8001328:	4618      	mov	r0, r3
 800132a:	3714      	adds	r7, #20
 800132c:	46bd      	mov	sp, r7
 800132e:	bc80      	pop	{r7}
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop
 8001334:	40023800 	.word	0x40023800
 8001338:	00f42400 	.word	0x00f42400
 800133c:	007a1200 	.word	0x007a1200

08001340 <Get_TriseValue>:
 *
 * @return		- uint8_t, returns the calculated trise value.
 *
 * @Note 		-
 */
uint8_t Get_TriseValue(I2C_Handle_t *pI2CHandle){
 8001340:	b580      	push	{r7, lr}
 8001342:	b086      	sub	sp, #24
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]

	uint8_t trise_val;
	uint32_t pclk1;

	uint32_t SCLSpeed = pI2CHandle->I2C_Config.I2C_SCLSpeed;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	613b      	str	r3, [r7, #16]

	pclk1 = RCC_GetPCLK1Value();
 800134e:	f7ff ffa7 	bl	80012a0 <RCC_GetPCLK1Value>
 8001352:	60f8      	str	r0, [r7, #12]


	if(SCLSpeed == I2C_SCL_SPEED_STANDARD){
 8001354:	693b      	ldr	r3, [r7, #16]
 8001356:	4a22      	ldr	r2, [pc, #136]	@ (80013e0 <Get_TriseValue+0xa0>)
 8001358:	4293      	cmp	r3, r2
 800135a:	d119      	bne.n	8001390 <Get_TriseValue+0x50>
		//if SCLSpeed is standard mode use 1000ns as numerator as per i2c spec
		trise_val = ( 1000e-9 * pclk1 ) + 1;
 800135c:	68f8      	ldr	r0, [r7, #12]
 800135e:	f7ff fa13 	bl	8000788 <__aeabi_ui2d>
 8001362:	a31b      	add	r3, pc, #108	@ (adr r3, 80013d0 <Get_TriseValue+0x90>)
 8001364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001368:	f7fe ffa2 	bl	80002b0 <__aeabi_dmul>
 800136c:	4602      	mov	r2, r0
 800136e:	460b      	mov	r3, r1
 8001370:	4610      	mov	r0, r2
 8001372:	4619      	mov	r1, r3
 8001374:	f04f 0200 	mov.w	r2, #0
 8001378:	4b1a      	ldr	r3, [pc, #104]	@ (80013e4 <Get_TriseValue+0xa4>)
 800137a:	f7ff f8c9 	bl	8000510 <__adddf3>
 800137e:	4602      	mov	r2, r0
 8001380:	460b      	mov	r3, r1
 8001382:	4610      	mov	r0, r2
 8001384:	4619      	mov	r1, r3
 8001386:	f7ff fa79 	bl	800087c <__aeabi_d2uiz>
 800138a:	4603      	mov	r3, r0
 800138c:	75fb      	strb	r3, [r7, #23]
 800138e:	e018      	b.n	80013c2 <Get_TriseValue+0x82>
	}else{
		//If SCLSpeed is fast mode use 300ns as numerator as per i2c spec
		trise_val = ( 300e-9 * pclk1 ) + 1;
 8001390:	68f8      	ldr	r0, [r7, #12]
 8001392:	f7ff f9f9 	bl	8000788 <__aeabi_ui2d>
 8001396:	a310      	add	r3, pc, #64	@ (adr r3, 80013d8 <Get_TriseValue+0x98>)
 8001398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800139c:	f7fe ff88 	bl	80002b0 <__aeabi_dmul>
 80013a0:	4602      	mov	r2, r0
 80013a2:	460b      	mov	r3, r1
 80013a4:	4610      	mov	r0, r2
 80013a6:	4619      	mov	r1, r3
 80013a8:	f04f 0200 	mov.w	r2, #0
 80013ac:	4b0d      	ldr	r3, [pc, #52]	@ (80013e4 <Get_TriseValue+0xa4>)
 80013ae:	f7ff f8af 	bl	8000510 <__adddf3>
 80013b2:	4602      	mov	r2, r0
 80013b4:	460b      	mov	r3, r1
 80013b6:	4610      	mov	r0, r2
 80013b8:	4619      	mov	r1, r3
 80013ba:	f7ff fa5f 	bl	800087c <__aeabi_d2uiz>
 80013be:	4603      	mov	r3, r0
 80013c0:	75fb      	strb	r3, [r7, #23]
	}

	return trise_val;
 80013c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	3718      	adds	r7, #24
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	f3af 8000 	nop.w
 80013d0:	a0b5ed8d 	.word	0xa0b5ed8d
 80013d4:	3eb0c6f7 	.word	0x3eb0c6f7
 80013d8:	f40d8376 	.word	0xf40d8376
 80013dc:	3e9421f5 	.word	0x3e9421f5
 80013e0:	000186a0 	.word	0x000186a0
 80013e4:	3ff00000 	.word	0x3ff00000

080013e8 <I2C_GetSR1FlagStatus>:
 *
 * @return		- uint8_t, returns the flag status
 *
 * @Note 		-
 */
uint8_t I2C_GetSR1FlagStatus(I2C_RegDef_t *pI2Cx, uint8_t FlagName){
 80013e8:	b480      	push	{r7}
 80013ea:	b085      	sub	sp, #20
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
 80013f0:	460b      	mov	r3, r1
 80013f2:	70fb      	strb	r3, [r7, #3]

	//gets the flag status from SR1
	uint8_t flag_status = (pI2Cx->SR1 >> FlagName) & 0x0001;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	695a      	ldr	r2, [r3, #20]
 80013f8:	78fb      	ldrb	r3, [r7, #3]
 80013fa:	fa22 f303 	lsr.w	r3, r2, r3
 80013fe:	b2db      	uxtb	r3, r3
 8001400:	f003 0301 	and.w	r3, r3, #1
 8001404:	73fb      	strb	r3, [r7, #15]

	//return the flag status
	return flag_status;
 8001406:	7bfb      	ldrb	r3, [r7, #15]
}
 8001408:	4618      	mov	r0, r3
 800140a:	3714      	adds	r7, #20
 800140c:	46bd      	mov	sp, r7
 800140e:	bc80      	pop	{r7}
 8001410:	4770      	bx	lr

08001412 <I2C_GetSR2FlagStatus>:
 *
 * @return		- uint8_t, returns the flag status
 *
 * @Note 		-
 */
uint8_t I2C_GetSR2FlagStatus(I2C_RegDef_t *pI2Cx, uint8_t FlagName){
 8001412:	b480      	push	{r7}
 8001414:	b085      	sub	sp, #20
 8001416:	af00      	add	r7, sp, #0
 8001418:	6078      	str	r0, [r7, #4]
 800141a:	460b      	mov	r3, r1
 800141c:	70fb      	strb	r3, [r7, #3]

	uint8_t flag_status=0;
 800141e:	2300      	movs	r3, #0
 8001420:	73fb      	strb	r3, [r7, #15]

	//gets the PEC 8 bit flag status from SR2
	if(FlagName == I2C_SR2_PEC15_8){
 8001422:	78fb      	ldrb	r3, [r7, #3]
 8001424:	2b08      	cmp	r3, #8
 8001426:	d106      	bne.n	8001436 <I2C_GetSR2FlagStatus+0x24>
		//return the flag status
		flag_status =  ( (pI2Cx->SR2 >> FlagName) & 0x00FF );
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	699a      	ldr	r2, [r3, #24]
 800142c:	78fb      	ldrb	r3, [r7, #3]
 800142e:	fa22 f303 	lsr.w	r3, r2, r3
 8001432:	73fb      	strb	r3, [r7, #15]
 8001434:	e008      	b.n	8001448 <I2C_GetSR2FlagStatus+0x36>
	} else {
		//if not the PEC flag, then just get the 1 bit flag status from SR2
		flag_status = (pI2Cx->SR2 >> FlagName) & 0x0001;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	699a      	ldr	r2, [r3, #24]
 800143a:	78fb      	ldrb	r3, [r7, #3]
 800143c:	fa22 f303 	lsr.w	r3, r2, r3
 8001440:	b2db      	uxtb	r3, r3
 8001442:	f003 0301 	and.w	r3, r3, #1
 8001446:	73fb      	strb	r3, [r7, #15]
	}

	return flag_status;
 8001448:	7bfb      	ldrb	r3, [r7, #15]
}
 800144a:	4618      	mov	r0, r3
 800144c:	3714      	adds	r7, #20
 800144e:	46bd      	mov	sp, r7
 8001450:	bc80      	pop	{r7}
 8001452:	4770      	bx	lr

08001454 <I2C_IRQInterruptConfig>:
 * @return		- none
 *
 * @Note 		-
 */
void I2C_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi)
{
 8001454:	b480      	push	{r7}
 8001456:	b085      	sub	sp, #20
 8001458:	af00      	add	r7, sp, #0
 800145a:	4603      	mov	r3, r0
 800145c:	460a      	mov	r2, r1
 800145e:	71fb      	strb	r3, [r7, #7]
 8001460:	4613      	mov	r3, r2
 8001462:	71bb      	strb	r3, [r7, #6]
	 * Lshift_val calculates the amount of left shift needed to program the specific bitfield in the NVIC
	 * ISER register.
	 * EX. IRQNumber = 76, Lshift_val = 76 % 32 = 12, so the needed left shift to program the bitfield
	 * for IRQNumber 76 is 12.
	 */
	uint8_t iNVIC = IRQNumber / 32;
 8001464:	79fb      	ldrb	r3, [r7, #7]
 8001466:	095b      	lsrs	r3, r3, #5
 8001468:	73fb      	strb	r3, [r7, #15]
	uint8_t Lshift_val = IRQNumber % 32;
 800146a:	79fb      	ldrb	r3, [r7, #7]
 800146c:	f003 031f 	and.w	r3, r3, #31
 8001470:	73bb      	strb	r3, [r7, #14]

	if(EnorDi == ENABLE){
 8001472:	79bb      	ldrb	r3, [r7, #6]
 8001474:	2b01      	cmp	r3, #1
 8001476:	d114      	bne.n	80014a2 <I2C_IRQInterruptConfig+0x4e>
		*(NVIC_ISER_BASE_ADDR + iNVIC) |= (1 << Lshift_val);
 8001478:	7bfb      	ldrb	r3, [r7, #15]
 800147a:	009b      	lsls	r3, r3, #2
 800147c:	f103 4360 	add.w	r3, r3, #3758096384	@ 0xe0000000
 8001480:	f503 4361 	add.w	r3, r3, #57600	@ 0xe100
 8001484:	681a      	ldr	r2, [r3, #0]
 8001486:	7bbb      	ldrb	r3, [r7, #14]
 8001488:	2101      	movs	r1, #1
 800148a:	fa01 f303 	lsl.w	r3, r1, r3
 800148e:	4619      	mov	r1, r3
 8001490:	7bfb      	ldrb	r3, [r7, #15]
 8001492:	009b      	lsls	r3, r3, #2
 8001494:	f103 4360 	add.w	r3, r3, #3758096384	@ 0xe0000000
 8001498:	f503 4361 	add.w	r3, r3, #57600	@ 0xe100
 800149c:	430a      	orrs	r2, r1
 800149e:	601a      	str	r2, [r3, #0]
	}
	else{
		*(NVIC_ICER_BASE_ADDR + iNVIC) |= (1 << Lshift_val);
	}
}
 80014a0:	e00f      	b.n	80014c2 <I2C_IRQInterruptConfig+0x6e>
		*(NVIC_ICER_BASE_ADDR + iNVIC) |= (1 << Lshift_val);
 80014a2:	7bfb      	ldrb	r3, [r7, #15]
 80014a4:	009a      	lsls	r2, r3, #2
 80014a6:	4b09      	ldr	r3, [pc, #36]	@ (80014cc <I2C_IRQInterruptConfig+0x78>)
 80014a8:	4413      	add	r3, r2
 80014aa:	681a      	ldr	r2, [r3, #0]
 80014ac:	7bbb      	ldrb	r3, [r7, #14]
 80014ae:	2101      	movs	r1, #1
 80014b0:	fa01 f303 	lsl.w	r3, r1, r3
 80014b4:	4618      	mov	r0, r3
 80014b6:	7bfb      	ldrb	r3, [r7, #15]
 80014b8:	0099      	lsls	r1, r3, #2
 80014ba:	4b04      	ldr	r3, [pc, #16]	@ (80014cc <I2C_IRQInterruptConfig+0x78>)
 80014bc:	440b      	add	r3, r1
 80014be:	4302      	orrs	r2, r0
 80014c0:	601a      	str	r2, [r3, #0]
}
 80014c2:	bf00      	nop
 80014c4:	3714      	adds	r7, #20
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bc80      	pop	{r7}
 80014ca:	4770      	bx	lr
 80014cc:	e000e180 	.word	0xe000e180

080014d0 <I2C_Event_IRQHandling>:
 * @return		- none
 *
 * @Note 		-
 */
void I2C_Event_IRQHandling(I2C_Handle_t *pI2CHandle)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b084      	sub	sp, #16
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
	//interrupt handling for both master and slave mode of device
	uint8_t temp1, temp2, temp3;
	uint16_t dummy_read __unused;

	//check if ITEVTEN is set.
	temp1 = (pI2CHandle->pI2Cx->CR2 >> I2C_CR2_ITEVTEN) & 0x0001;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	0a5b      	lsrs	r3, r3, #9
 80014e0:	b2db      	uxtb	r3, r3
 80014e2:	f003 0301 	and.w	r3, r3, #1
 80014e6:	73fb      	strb	r3, [r7, #15]

	//check if ITBUFEN is set. (For Tx and Rx buffer interrupts)
	temp2 = (pI2CHandle->pI2Cx->CR2 >> I2C_CR2_ITBUFEN) & 0x0001;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	0a9b      	lsrs	r3, r3, #10
 80014f0:	b2db      	uxtb	r3, r3
 80014f2:	f003 0301 	and.w	r3, r3, #1
 80014f6:	73bb      	strb	r3, [r7, #14]


	/*********** Handle interrupt generated by SB event. Note: SB flag is only applicable in Master mode *****************/
	//check SB flag if it is set
	temp3 = I2C_GetSR1FlagStatus(pI2CHandle->pI2Cx, I2C_SR1_SB);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	2100      	movs	r1, #0
 80014fe:	4618      	mov	r0, r3
 8001500:	f7ff ff72 	bl	80013e8 <I2C_GetSR1FlagStatus>
 8001504:	4603      	mov	r3, r0
 8001506:	737b      	strb	r3, [r7, #13]
	//check if both interrupt flag are set for SB to trigger
	if(temp1 && temp3)
 8001508:	7bfb      	ldrb	r3, [r7, #15]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d024      	beq.n	8001558 <I2C_Event_IRQHandling+0x88>
 800150e:	7b7b      	ldrb	r3, [r7, #13]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d021      	beq.n	8001558 <I2C_Event_IRQHandling+0x88>
	{
		//SB flag is set, start with address phase

		//left shift device address value by one to make space for R/nW bit
		pI2CHandle->DeviceAddr <<= 1;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	7f5b      	ldrb	r3, [r3, #29]
 8001518:	005b      	lsls	r3, r3, #1
 800151a:	b2da      	uxtb	r2, r3
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	775a      	strb	r2, [r3, #29]

		//SB flag was triggered by master write mode
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_TX)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	7f1b      	ldrb	r3, [r3, #28]
 8001524:	2b02      	cmp	r3, #2
 8001526:	d107      	bne.n	8001538 <I2C_Event_IRQHandling+0x68>
			pI2CHandle->DeviceAddr &= ~(1 << 0);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	7f5b      	ldrb	r3, [r3, #29]
 800152c:	f023 0301 	bic.w	r3, r3, #1
 8001530:	b2da      	uxtb	r2, r3
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	775a      	strb	r2, [r3, #29]
 8001536:	e00a      	b.n	800154e <I2C_Event_IRQHandling+0x7e>

		//SB flag was triggered by master read
		else if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	7f1b      	ldrb	r3, [r3, #28]
 800153c:	2b01      	cmp	r3, #1
 800153e:	d106      	bne.n	800154e <I2C_Event_IRQHandling+0x7e>
			pI2CHandle->DeviceAddr |= 1 << 0;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	7f5b      	ldrb	r3, [r3, #29]
 8001544:	f043 0301 	orr.w	r3, r3, #1
 8001548:	b2da      	uxtb	r2, r3
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	775a      	strb	r2, [r3, #29]

		//write the slave address to data register to be transmitted also clears the SB flag
		pI2CHandle->pI2Cx->DR = pI2CHandle->DeviceAddr;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	7f5a      	ldrb	r2, [r3, #29]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	611a      	str	r2, [r3, #16]
	}


	/************************ Handle interrupt generated by ADDR event ****************************************/
	//Note: When master mode: Address is sent ; When slave mode: address is matched with own address
	temp3 = I2C_GetSR1FlagStatus(pI2CHandle->pI2Cx, I2C_SR1_ADDR);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	2101      	movs	r1, #1
 800155e:	4618      	mov	r0, r3
 8001560:	f7ff ff42 	bl	80013e8 <I2C_GetSR1FlagStatus>
 8001564:	4603      	mov	r3, r0
 8001566:	737b      	strb	r3, [r7, #13]
	if(temp1 && temp3)
 8001568:	7bfb      	ldrb	r3, [r7, #15]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d024      	beq.n	80015b8 <I2C_Event_IRQHandling+0xe8>
 800156e:	7b7b      	ldrb	r3, [r7, #13]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d021      	beq.n	80015b8 <I2C_Event_IRQHandling+0xe8>
	{	//ADDR flag is set

		//if i2c is busy in Rx & only send 1 byte of data & in master mode. Most likely requesting for data length from slave, then execute this
		//note that i did not read from SR1 AND SR2  to clear the ADDR flag because we've already read from SR1 flag from initializing temp3 above
		//and we've already read from SR2 with the function "i2c_getSR2FlagStatus" from if statement below, this will clear the ADDR flag
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX && pI2CHandle->RxSize == 1 && I2C_GetSR2FlagStatus(pI2CHandle->pI2Cx, I2C_SR2_MSL) == 1)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	7f1b      	ldrb	r3, [r3, #28]
 8001578:	2b01      	cmp	r3, #1
 800157a:	d115      	bne.n	80015a8 <I2C_Event_IRQHandling+0xd8>
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6a1b      	ldr	r3, [r3, #32]
 8001580:	2b01      	cmp	r3, #1
 8001582:	d111      	bne.n	80015a8 <I2C_Event_IRQHandling+0xd8>
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	2100      	movs	r1, #0
 800158a:	4618      	mov	r0, r3
 800158c:	f7ff ff41 	bl	8001412 <I2C_GetSR2FlagStatus>
 8001590:	4603      	mov	r3, r0
 8001592:	2b01      	cmp	r3, #1
 8001594:	d108      	bne.n	80015a8 <I2C_Event_IRQHandling+0xd8>
		{
			//disable acking to tell slave master has enough data
			pI2CHandle->pI2Cx->CR1 &= ~(1 << I2C_CR1_ACK);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80015a4:	601a      	str	r2, [r3, #0]
 80015a6:	e007      	b.n	80015b8 <I2C_Event_IRQHandling+0xe8>

		}else{

			//clear ADDR flag only if using as TX mode (master mode) or using as Rx mode with len > 1 (master mode)
			//or using the device as slave mode
			dummy_read = pI2CHandle->pI2Cx->SR1;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	695b      	ldr	r3, [r3, #20]
 80015ae:	817b      	strh	r3, [r7, #10]
			dummy_read = pI2CHandle->pI2Cx->SR2;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	699b      	ldr	r3, [r3, #24]
 80015b6:	817b      	strh	r3, [r7, #10]
		}
	}


	/***************** Handle interrupt generated by BTF (byte transfer finished) event ************************/
	temp3 = I2C_GetSR1FlagStatus(pI2CHandle->pI2Cx, I2C_SR1_BTF);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	2102      	movs	r1, #2
 80015be:	4618      	mov	r0, r3
 80015c0:	f7ff ff12 	bl	80013e8 <I2C_GetSR1FlagStatus>
 80015c4:	4603      	mov	r3, r0
 80015c6:	737b      	strb	r3, [r7, #13]
	if(temp1 && temp3)
 80015c8:	7bfb      	ldrb	r3, [r7, #15]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d027      	beq.n	800161e <I2C_Event_IRQHandling+0x14e>
 80015ce:	7b7b      	ldrb	r3, [r7, #13]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d024      	beq.n	800161e <I2C_Event_IRQHandling+0x14e>
	{
		/*
		 * BTF flag is set plus if busy in TX (transmitting data) & TXE = 1 & TxLen = 0,
		 * which all means that data transmission is finished and close the data transmission
		 */
		if (pI2CHandle->TxRxState == I2C_BUSY_IN_TX && I2C_GetSR1FlagStatus(pI2CHandle->pI2Cx, I2C_SR1_TXE) == 1 && pI2CHandle->TxLen == 0)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	7f1b      	ldrb	r3, [r3, #28]
 80015d8:	2b02      	cmp	r3, #2
 80015da:	d120      	bne.n	800161e <I2C_Event_IRQHandling+0x14e>
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	2107      	movs	r1, #7
 80015e2:	4618      	mov	r0, r3
 80015e4:	f7ff ff00 	bl	80013e8 <I2C_GetSR1FlagStatus>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b01      	cmp	r3, #1
 80015ec:	d117      	bne.n	800161e <I2C_Event_IRQHandling+0x14e>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	695b      	ldr	r3, [r3, #20]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d113      	bne.n	800161e <I2C_Event_IRQHandling+0x14e>
		{
			if(pI2CHandle->Sr == I2C_REPEATED_START_DI)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d107      	bne.n	8001610 <I2C_Event_IRQHandling+0x140>
				//generate STOP condition
				pI2CHandle->pI2Cx->CR1 |= 1 << I2C_CR1_STOP;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	681a      	ldr	r2, [r3, #0]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800160e:	601a      	str	r2, [r3, #0]

			//Reset all member elements of the I2C handle structure
			I2C_CloseSendData(pI2CHandle);
 8001610:	6878      	ldr	r0, [r7, #4]
 8001612:	f000 f8f5 	bl	8001800 <I2C_CloseSendData>


			//notify the application that transmission is complete
			I2C_ApplicationEventCallback(pI2CHandle, I2C_EV_TX_CMPLT);
 8001616:	2100      	movs	r1, #0
 8001618:	6878      	ldr	r0, [r7, #4]
 800161a:	f000 f913 	bl	8001844 <I2C_ApplicationEventCallback>
		// note: if TxRxState == BUSY IN RX, do nothing, we don't terminate the reception in this code block
	}


	/*****************Handle interrupt generated by STOPF event (Slave mode only)******************************/
	temp3 = I2C_GetSR1FlagStatus(pI2CHandle->pI2Cx, I2C_SR1_STOPF);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	2104      	movs	r1, #4
 8001624:	4618      	mov	r0, r3
 8001626:	f7ff fedf 	bl	80013e8 <I2C_GetSR1FlagStatus>
 800162a:	4603      	mov	r3, r0
 800162c:	737b      	strb	r3, [r7, #13]
	if(temp1 && temp3)
 800162e:	7bfb      	ldrb	r3, [r7, #15]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d00c      	beq.n	800164e <I2C_Event_IRQHandling+0x17e>
 8001634:	7b7b      	ldrb	r3, [r7, #13]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d009      	beq.n	800164e <I2C_Event_IRQHandling+0x17e>
	{
		//STOPF flag is set

		//followed by write into CR1 to clear the STOP Flag (dummy write)
		pI2CHandle->pI2Cx->CR1 |= 0x0000;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681a      	ldr	r2, [r3, #0]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	6812      	ldr	r2, [r2, #0]
 8001644:	601a      	str	r2, [r3, #0]

		//notify the application that STOP is detected by slave
		I2C_ApplicationEventCallback(pI2CHandle,I2C_EV_STOP);
 8001646:	2102      	movs	r1, #2
 8001648:	6878      	ldr	r0, [r7, #4]
 800164a:	f000 f8fb 	bl	8001844 <I2C_ApplicationEventCallback>

	}


	/******************** Handle interrupt generated by TxE event ******************************************/
	temp3 = I2C_GetSR1FlagStatus(pI2CHandle->pI2Cx, I2C_SR1_TXE);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	2107      	movs	r1, #7
 8001654:	4618      	mov	r0, r3
 8001656:	f7ff fec7 	bl	80013e8 <I2C_GetSR1FlagStatus>
 800165a:	4603      	mov	r3, r0
 800165c:	737b      	strb	r3, [r7, #13]
	if(temp1 && temp2 && temp3)
 800165e:	7bfb      	ldrb	r3, [r7, #15]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d026      	beq.n	80016b2 <I2C_Event_IRQHandling+0x1e2>
 8001664:	7bbb      	ldrb	r3, [r7, #14]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d023      	beq.n	80016b2 <I2C_Event_IRQHandling+0x1e2>
 800166a:	7b7b      	ldrb	r3, [r7, #13]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d020      	beq.n	80016b2 <I2C_Event_IRQHandling+0x1e2>
	{
		//TXE flag is set
		//check if device is busy in transmission & TxLen > 0 (has data left to send) & device is in master mode.
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_TX && pI2CHandle->TxLen > 0 && I2C_GetSR2FlagStatus(pI2CHandle->pI2Cx, I2C_SR2_MSL) == 1)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	7f1b      	ldrb	r3, [r3, #28]
 8001674:	2b02      	cmp	r3, #2
 8001676:	d11c      	bne.n	80016b2 <I2C_Event_IRQHandling+0x1e2>
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	695b      	ldr	r3, [r3, #20]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d018      	beq.n	80016b2 <I2C_Event_IRQHandling+0x1e2>
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	2100      	movs	r1, #0
 8001686:	4618      	mov	r0, r3
 8001688:	f7ff fec3 	bl	8001412 <I2C_GetSR2FlagStatus>
 800168c:	4603      	mov	r3, r0
 800168e:	2b01      	cmp	r3, #1
 8001690:	d10f      	bne.n	80016b2 <I2C_Event_IRQHandling+0x1e2>
		{
			//load the data into Data Register
			pI2CHandle->pI2Cx->DR = *(pI2CHandle->pTxBuffer);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	68db      	ldr	r3, [r3, #12]
 8001696:	781a      	ldrb	r2, [r3, #0]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	611a      	str	r2, [r3, #16]

			//decrement Txlen
			pI2CHandle->TxLen--;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	695b      	ldr	r3, [r3, #20]
 80016a2:	1e5a      	subs	r2, r3, #1
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	615a      	str	r2, [r3, #20]

			//increment TxBuffer address
			pI2CHandle->pTxBuffer++;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	68db      	ldr	r3, [r3, #12]
 80016ac:	1c5a      	adds	r2, r3, #1
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	60da      	str	r2, [r3, #12]
		}
	}


	/*********************** Handle interrupt generated by RxNE event ******************************/
	temp3 = I2C_GetSR1FlagStatus(pI2CHandle->pI2Cx, I2C_SR1_RXNE);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	2106      	movs	r1, #6
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7ff fe95 	bl	80013e8 <I2C_GetSR1FlagStatus>
 80016be:	4603      	mov	r3, r0
 80016c0:	737b      	strb	r3, [r7, #13]
	if(temp1 && temp2 && temp3)
 80016c2:	7bfb      	ldrb	r3, [r7, #15]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d015      	beq.n	80016f4 <I2C_Event_IRQHandling+0x224>
 80016c8:	7bbb      	ldrb	r3, [r7, #14]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d012      	beq.n	80016f4 <I2C_Event_IRQHandling+0x224>
 80016ce:	7b7b      	ldrb	r3, [r7, #13]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d00f      	beq.n	80016f4 <I2C_Event_IRQHandling+0x224>
	{
		//RXNE flag is set
		//if if it RX mode and in master mode
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX && I2C_GetSR2FlagStatus(pI2CHandle->pI2Cx, I2C_SR2_MSL) == 1)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	7f1b      	ldrb	r3, [r3, #28]
 80016d8:	2b01      	cmp	r3, #1
 80016da:	d10b      	bne.n	80016f4 <I2C_Event_IRQHandling+0x224>
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	2100      	movs	r1, #0
 80016e2:	4618      	mov	r0, r3
 80016e4:	f7ff fe95 	bl	8001412 <I2C_GetSR2FlagStatus>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b01      	cmp	r3, #1
 80016ec:	d102      	bne.n	80016f4 <I2C_Event_IRQHandling+0x224>
		{

			I2C_MasterRxNEInterrupt_Handler(pI2CHandle);
 80016ee:	6878      	ldr	r0, [r7, #4]
 80016f0:	f000 f804 	bl	80016fc <I2C_MasterRxNEInterrupt_Handler>
		}
	}


}
 80016f4:	bf00      	nop
 80016f6:	3710      	adds	r7, #16
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}

080016fc <I2C_MasterRxNEInterrupt_Handler>:
}



//helper function because code is too long, for readability
static void I2C_MasterRxNEInterrupt_Handler(I2C_Handle_t *pI2CHandle){
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]

	//if only 1 byte is to be received. Most likely retrieving data length from slave
	if(pI2CHandle->RxSize == 1){
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6a1b      	ldr	r3, [r3, #32]
 8001708:	2b01      	cmp	r3, #1
 800170a:	d10b      	bne.n	8001724 <I2C_MasterRxNEInterrupt_Handler+0x28>

		//read data register and write into RxBuffer
		*(pI2CHandle->pRxBuffer) = pI2CHandle->pI2Cx->DR;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	691a      	ldr	r2, [r3, #16]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	691b      	ldr	r3, [r3, #16]
 8001716:	b2d2      	uxtb	r2, r2
 8001718:	701a      	strb	r2, [r3, #0]

		//decrement Rxlen since 1 byte has been received
		(pI2CHandle->RxLen)--;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	699b      	ldr	r3, [r3, #24]
 800171e:	1e5a      	subs	r2, r3, #1
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	619a      	str	r2, [r3, #24]

	}

	//if multiple bytes need to be received, execute this
	if(pI2CHandle->RxSize > 1){
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6a1b      	ldr	r3, [r3, #32]
 8001728:	2b01      	cmp	r3, #1
 800172a:	d91c      	bls.n	8001766 <I2C_MasterRxNEInterrupt_Handler+0x6a>
		//if only 2 bytes left to receive prepare the master to NACK the last byte
		if(pI2CHandle->RxLen == 2)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	699b      	ldr	r3, [r3, #24]
 8001730:	2b02      	cmp	r3, #2
 8001732:	d107      	bne.n	8001744 <I2C_MasterRxNEInterrupt_Handler+0x48>
			//disable acking
			pI2CHandle->pI2Cx->CR1 &= ~(1 << I2C_CR1_ACK);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001742:	601a      	str	r2, [r3, #0]


		//read data register and write into RxBuffer (receive the data)
		*(pI2CHandle->pRxBuffer) = pI2CHandle->pI2Cx->DR;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	691a      	ldr	r2, [r3, #16]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	691b      	ldr	r3, [r3, #16]
 800174e:	b2d2      	uxtb	r2, r2
 8001750:	701a      	strb	r2, [r3, #0]

		//decrement Rxlen since 1 byte has been received
		(pI2CHandle->RxLen)--;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	699b      	ldr	r3, [r3, #24]
 8001756:	1e5a      	subs	r2, r3, #1
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	619a      	str	r2, [r3, #24]

		//incement rxBuffer address to store the next byte into
		(pI2CHandle->pRxBuffer)++;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	691b      	ldr	r3, [r3, #16]
 8001760:	1c5a      	adds	r2, r3, #1
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	611a      	str	r2, [r3, #16]
	}

	//if all bytes are received, close i2c reception and notify application
	if(pI2CHandle->RxLen == 0){
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	699b      	ldr	r3, [r3, #24]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d113      	bne.n	8001796 <I2C_MasterRxNEInterrupt_Handler+0x9a>

		//generate stop condition
		if(pI2CHandle->Sr == I2C_REPEATED_START_DI)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001774:	2b00      	cmp	r3, #0
 8001776:	d107      	bne.n	8001788 <I2C_MasterRxNEInterrupt_Handler+0x8c>
			pI2CHandle->pI2Cx->CR1 |= 1 << I2C_CR1_STOP;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001786:	601a      	str	r2, [r3, #0]

		//close the I2c Rx
		I2C_CloseReceiveData(pI2CHandle);
 8001788:	6878      	ldr	r0, [r7, #4]
 800178a:	f000 f808 	bl	800179e <I2C_CloseReceiveData>


		//Notify Application
		I2C_ApplicationEventCallback(pI2CHandle, I2C_EV_RX_CMPLT);
 800178e:	2101      	movs	r1, #1
 8001790:	6878      	ldr	r0, [r7, #4]
 8001792:	f000 f857 	bl	8001844 <I2C_ApplicationEventCallback>
	}


}
 8001796:	bf00      	nop
 8001798:	3708      	adds	r7, #8
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}

0800179e <I2C_CloseReceiveData>:


static void I2C_CloseReceiveData(I2C_Handle_t *pI2CHandle){
 800179e:	b480      	push	{r7}
 80017a0:	b083      	sub	sp, #12
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	6078      	str	r0, [r7, #4]

	//disable I2C_CR2_ITBUFEN control bit
	pI2CHandle->pI2Cx->CR2 &= ~(1 << I2C_CR2_ITBUFEN);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	685a      	ldr	r2, [r3, #4]
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80017b4:	605a      	str	r2, [r3, #4]

	//disable I2C_CR2_ITEVTEN control bit
	pI2CHandle->pI2Cx->CR2 &= ~(1 << I2C_CR2_ITEVTEN);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	685a      	ldr	r2, [r3, #4]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80017c4:	605a      	str	r2, [r3, #4]

	pI2CHandle->TxRxState = I2C_READY;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2200      	movs	r2, #0
 80017ca:	771a      	strb	r2, [r3, #28]
	pI2CHandle->pRxBuffer = NULL;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2200      	movs	r2, #0
 80017d0:	611a      	str	r2, [r3, #16]
	pI2CHandle->RxLen = 0;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2200      	movs	r2, #0
 80017d6:	619a      	str	r2, [r3, #24]
	pI2CHandle->RxSize = 0;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2200      	movs	r2, #0
 80017dc:	621a      	str	r2, [r3, #32]

	if(pI2CHandle->I2C_Config.I2C_AckControl == I2C_ACK_ENABLE){
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	7a5b      	ldrb	r3, [r3, #9]
 80017e2:	2b01      	cmp	r3, #1
 80017e4:	d107      	bne.n	80017f6 <I2C_CloseReceiveData+0x58>
		//re-enable ACKing
		pI2CHandle->pI2Cx->CR1 |= 1 << I2C_CR1_ACK;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80017f4:	601a      	str	r2, [r3, #0]
	}
}
 80017f6:	bf00      	nop
 80017f8:	370c      	adds	r7, #12
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bc80      	pop	{r7}
 80017fe:	4770      	bx	lr

08001800 <I2C_CloseSendData>:


static void I2C_CloseSendData(I2C_Handle_t *pI2CHandle){
 8001800:	b480      	push	{r7}
 8001802:	b083      	sub	sp, #12
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]

	//disable I2C_CR2_ITBUFEN control bit
	pI2CHandle->pI2Cx->CR2 &= ~(1 << I2C_CR2_ITBUFEN);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	685a      	ldr	r2, [r3, #4]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001816:	605a      	str	r2, [r3, #4]

	//disable I2C_CR2_ITEVTEN control bit
	pI2CHandle->pI2Cx->CR2 &= ~(1 << I2C_CR2_ITEVTEN);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	685a      	ldr	r2, [r3, #4]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001826:	605a      	str	r2, [r3, #4]

	pI2CHandle->TxRxState = I2C_READY;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2200      	movs	r2, #0
 800182c:	771a      	strb	r2, [r3, #28]
	pI2CHandle->pTxBuffer = NULL;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2200      	movs	r2, #0
 8001832:	60da      	str	r2, [r3, #12]
	pI2CHandle->TxLen = 0;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2200      	movs	r2, #0
 8001838:	615a      	str	r2, [r3, #20]


}
 800183a:	bf00      	nop
 800183c:	370c      	adds	r7, #12
 800183e:	46bd      	mov	sp, r7
 8001840:	bc80      	pop	{r7}
 8001842:	4770      	bx	lr

08001844 <I2C_ApplicationEventCallback>:




__weak void I2C_ApplicationEventCallback(I2C_Handle_t *pI2CHandle, uint8_t event)
{
 8001844:	b480      	push	{r7}
 8001846:	b083      	sub	sp, #12
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
 800184c:	460b      	mov	r3, r1
 800184e:	70fb      	strb	r3, [r7, #3]

}
 8001850:	bf00      	nop
 8001852:	370c      	adds	r7, #12
 8001854:	46bd      	mov	sp, r7
 8001856:	bc80      	pop	{r7}
 8001858:	4770      	bx	lr
	...

0800185c <delay>:
#include <stdio.h>

//void I2C_ApplicationEventCallBack(I2C_Handle_t *pI2CHandle, uint8_t event);


void delay(void){
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0

	for(uint32_t i=0; i < 200000 ; i++);
 8001862:	2300      	movs	r3, #0
 8001864:	607b      	str	r3, [r7, #4]
 8001866:	e002      	b.n	800186e <delay+0x12>
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	3301      	adds	r3, #1
 800186c:	607b      	str	r3, [r7, #4]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	4a04      	ldr	r2, [pc, #16]	@ (8001884 <delay+0x28>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d9f8      	bls.n	8001868 <delay+0xc>
}
 8001876:	bf00      	nop
 8001878:	bf00      	nop
 800187a:	370c      	adds	r7, #12
 800187c:	46bd      	mov	sp, r7
 800187e:	bc80      	pop	{r7}
 8001880:	4770      	bx	lr
 8001882:	bf00      	nop
 8001884:	00030d3f 	.word	0x00030d3f

08001888 <gpio_init>:
uint8_t len=0;
uint8_t cmd1 = 0x51, cmd2 = 0x52;
uint8_t rxBuffer[1];


void gpio_init(void){
 8001888:	b580      	push	{r7, lr}
 800188a:	b084      	sub	sp, #16
 800188c:	af00      	add	r7, sp, #0
	GPIO_Handle_t Gpio_handle;

	//initialize PC13 user button
	Gpio_handle.pGPIOx = GPIOC;
 800188e:	4b0b      	ldr	r3, [pc, #44]	@ (80018bc <gpio_init+0x34>)
 8001890:	607b      	str	r3, [r7, #4]
	Gpio_handle.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IT_FT;
 8001892:	2304      	movs	r3, #4
 8001894:	727b      	strb	r3, [r7, #9]
	Gpio_handle.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN13;
 8001896:	230d      	movs	r3, #13
 8001898:	723b      	strb	r3, [r7, #8]
	Gpio_handle.GPIO_PinConfig.GPIO_PinAFMode = NONE;
 800189a:	2310      	movs	r3, #16
 800189c:	737b      	strb	r3, [r7, #13]
	Gpio_handle.GPIO_PinConfig.GPIO_PinOType = GPIO_OPTYPE_PUSHPULL;
 800189e:	2300      	movs	r3, #0
 80018a0:	733b      	strb	r3, [r7, #12]
	Gpio_handle.GPIO_PinConfig.GPIO_PinPuPdCtrl = GPIO_NO_PULLUP_PULLDOWN;
 80018a2:	2300      	movs	r3, #0
 80018a4:	72fb      	strb	r3, [r7, #11]
	Gpio_handle.GPIO_PinConfig.GPIO_PinSpeed = GPIO_FAST_SPD;
 80018a6:	2302      	movs	r3, #2
 80018a8:	72bb      	strb	r3, [r7, #10]
	GPIO_Init(&Gpio_handle);
 80018aa:	1d3b      	adds	r3, r7, #4
 80018ac:	4618      	mov	r0, r3
 80018ae:	f7ff f8f7 	bl	8000aa0 <GPIO_Init>

}
 80018b2:	bf00      	nop
 80018b4:	3710      	adds	r7, #16
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	40020800 	.word	0x40020800

080018c0 <i2c_gpioinit>:

void i2c_gpioinit(void){
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b084      	sub	sp, #16
 80018c4:	af00      	add	r7, sp, #0
	GPIO_Handle_t I2CGpio_handle;

	//initialize PC6 I2C SCL
	I2CGpio_handle.pGPIOx = GPIOB;
 80018c6:	4b0e      	ldr	r3, [pc, #56]	@ (8001900 <i2c_gpioinit+0x40>)
 80018c8:	607b      	str	r3, [r7, #4]
	I2CGpio_handle.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 80018ca:	2302      	movs	r3, #2
 80018cc:	727b      	strb	r3, [r7, #9]
	I2CGpio_handle.GPIO_PinConfig.GPIO_PinAFMode = GPIO_AF4;
 80018ce:	2304      	movs	r3, #4
 80018d0:	737b      	strb	r3, [r7, #13]
	I2CGpio_handle.GPIO_PinConfig.GPIO_PinOType = GPIO_OPTYPE_OPENDRAIN;
 80018d2:	2301      	movs	r3, #1
 80018d4:	733b      	strb	r3, [r7, #12]
	I2CGpio_handle.GPIO_PinConfig.GPIO_PinPuPdCtrl = GPIO_NO_PULLUP_PULLDOWN;
 80018d6:	2300      	movs	r3, #0
 80018d8:	72fb      	strb	r3, [r7, #11]
	I2CGpio_handle.GPIO_PinConfig.GPIO_PinSpeed = GPIO_FAST_SPD;
 80018da:	2302      	movs	r3, #2
 80018dc:	72bb      	strb	r3, [r7, #10]

	I2CGpio_handle.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN6;
 80018de:	2306      	movs	r3, #6
 80018e0:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2CGpio_handle);
 80018e2:	1d3b      	adds	r3, r7, #4
 80018e4:	4618      	mov	r0, r3
 80018e6:	f7ff f8db 	bl	8000aa0 <GPIO_Init>

	//initialize PC7 I2C SDA
	I2CGpio_handle.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN7;
 80018ea:	2307      	movs	r3, #7
 80018ec:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2CGpio_handle);
 80018ee:	1d3b      	adds	r3, r7, #4
 80018f0:	4618      	mov	r0, r3
 80018f2:	f7ff f8d5 	bl	8000aa0 <GPIO_Init>
}
 80018f6:	bf00      	nop
 80018f8:	3710      	adds	r7, #16
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	40020400 	.word	0x40020400

08001904 <i2c_init>:

void i2c_init(void){
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0

	I2C_handle.pI2Cx = I2C1;
 8001908:	4b09      	ldr	r3, [pc, #36]	@ (8001930 <i2c_init+0x2c>)
 800190a:	4a0a      	ldr	r2, [pc, #40]	@ (8001934 <i2c_init+0x30>)
 800190c:	601a      	str	r2, [r3, #0]
	I2C_handle.I2C_Config.I2C_AckControl = I2C_ACK_ENABLE;
 800190e:	4b08      	ldr	r3, [pc, #32]	@ (8001930 <i2c_init+0x2c>)
 8001910:	2201      	movs	r2, #1
 8001912:	725a      	strb	r2, [r3, #9]
	I2C_handle.I2C_Config.I2C_DeviceAddress = 0x61;
 8001914:	4b06      	ldr	r3, [pc, #24]	@ (8001930 <i2c_init+0x2c>)
 8001916:	2261      	movs	r2, #97	@ 0x61
 8001918:	721a      	strb	r2, [r3, #8]
	I2C_handle.I2C_Config.I2C_FMDutyCycle	= I2C_FM_DUTY_2;
 800191a:	4b05      	ldr	r3, [pc, #20]	@ (8001930 <i2c_init+0x2c>)
 800191c:	2200      	movs	r2, #0
 800191e:	729a      	strb	r2, [r3, #10]
	I2C_handle.I2C_Config.I2C_SCLSpeed	= I2C_SCL_SPEED_STANDARD;
 8001920:	4b03      	ldr	r3, [pc, #12]	@ (8001930 <i2c_init+0x2c>)
 8001922:	4a05      	ldr	r2, [pc, #20]	@ (8001938 <i2c_init+0x34>)
 8001924:	605a      	str	r2, [r3, #4]
	I2C_Init(&I2C_handle);
 8001926:	4802      	ldr	r0, [pc, #8]	@ (8001930 <i2c_init+0x2c>)
 8001928:	f7ff fb9a 	bl	8001060 <I2C_Init>

}
 800192c:	bf00      	nop
 800192e:	bd80      	pop	{r7, pc}
 8001930:	2000007c 	.word	0x2000007c
 8001934:	40005400 	.word	0x40005400
 8001938:	000186a0 	.word	0x000186a0

0800193c <main>:

int main(void){
 800193c:	b580      	push	{r7, lr}
 800193e:	af00      	add	r7, sp, #0

	i2c_gpioinit();
 8001940:	f7ff ffbe 	bl	80018c0 <i2c_gpioinit>

	gpio_init();
 8001944:	f7ff ffa0 	bl	8001888 <gpio_init>

	i2c_init();
 8001948:	f7ff ffdc 	bl	8001904 <i2c_init>

	//IRQ Configurations

	//ENABLED IRQ_NUMBER_EXTI10_15 = IRQ 40, TO BE RECEIVED AND PROCESSED BY THE CPU
	GPIO_IRQInterruptConfig(IRQ_NUMBER_EXTI10_15, ENABLE);
 800194c:	2101      	movs	r1, #1
 800194e:	2028      	movs	r0, #40	@ 0x28
 8001950:	f7ff fa6c 	bl	8000e2c <GPIO_IRQInterruptConfig>

	//SETS THE PRIORITY OF IRQ 40 TO HIGHEST PRIOTITY THE LESSER THE NUMBER THE HIGHER THE PRIORITY
	GPIO_IRQPriorityConfig(IRQ_NUMBER_EXTI10_15, 1);
 8001954:	2101      	movs	r1, #1
 8001956:	2028      	movs	r0, #40	@ 0x28
 8001958:	f7ff faa6 	bl	8000ea8 <GPIO_IRQPriorityConfig>

	I2C_IRQInterruptConfig(IRQ_NUMBER_I2C1_EVENT, ENABLE);
 800195c:	2101      	movs	r1, #1
 800195e:	201f      	movs	r0, #31
 8001960:	f7ff fd78 	bl	8001454 <I2C_IRQInterruptConfig>

	I2C_PeripheralControl(I2C1, ENABLE);
 8001964:	2101      	movs	r1, #1
 8001966:	4802      	ldr	r0, [pc, #8]	@ (8001970 <main+0x34>)
 8001968:	f7ff fb58 	bl	800101c <I2C_PeripheralControl>


	while(1){
 800196c:	bf00      	nop
 800196e:	e7fd      	b.n	800196c <main+0x30>
 8001970:	40005400 	.word	0x40005400

08001974 <EXTI15_10_IRQHandler>:
	return 0;
}



void EXTI15_10_IRQHandler(){
 8001974:	b580      	push	{r7, lr}
 8001976:	b084      	sub	sp, #16
 8001978:	af02      	add	r7, sp, #8

	delay();
 800197a:	f7ff ff6f 	bl	800185c <delay>


	//sends command to retrieve the data length
	I2C_MasterSendDataIT(&I2C_handle, &cmd1, 1, 0x68, I2C_REPEATED_START_EN);
 800197e:	2301      	movs	r3, #1
 8001980:	9300      	str	r3, [sp, #0]
 8001982:	2368      	movs	r3, #104	@ 0x68
 8001984:	2201      	movs	r2, #1
 8001986:	4923      	ldr	r1, [pc, #140]	@ (8001a14 <EXTI15_10_IRQHandler+0xa0>)
 8001988:	4823      	ldr	r0, [pc, #140]	@ (8001a18 <EXTI15_10_IRQHandler+0xa4>)
 800198a:	f7ff fbf7 	bl	800117c <I2C_MasterSendDataIT>

	//receive data length from slave
	while(I2C_MasterReceiveDataIT(&I2C_handle, &len, 1, 0x68, I2C_REPEATED_START_EN) != 0);
 800198e:	bf00      	nop
 8001990:	2301      	movs	r3, #1
 8001992:	9300      	str	r3, [sp, #0]
 8001994:	2368      	movs	r3, #104	@ 0x68
 8001996:	2201      	movs	r2, #1
 8001998:	4920      	ldr	r1, [pc, #128]	@ (8001a1c <EXTI15_10_IRQHandler+0xa8>)
 800199a:	481f      	ldr	r0, [pc, #124]	@ (8001a18 <EXTI15_10_IRQHandler+0xa4>)
 800199c:	f7ff fc35 	bl	800120a <I2C_MasterReceiveDataIT>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d1f4      	bne.n	8001990 <EXTI15_10_IRQHandler+0x1c>


	//send command to retrieve the whole length of data from slave
	while(I2C_MasterSendDataIT(&I2C_handle, &cmd2, 1, 0x68, I2C_REPEATED_START_EN) != 0);
 80019a6:	bf00      	nop
 80019a8:	2301      	movs	r3, #1
 80019aa:	9300      	str	r3, [sp, #0]
 80019ac:	2368      	movs	r3, #104	@ 0x68
 80019ae:	2201      	movs	r2, #1
 80019b0:	491b      	ldr	r1, [pc, #108]	@ (8001a20 <EXTI15_10_IRQHandler+0xac>)
 80019b2:	4819      	ldr	r0, [pc, #100]	@ (8001a18 <EXTI15_10_IRQHandler+0xa4>)
 80019b4:	f7ff fbe2 	bl	800117c <I2C_MasterSendDataIT>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d1f4      	bne.n	80019a8 <EXTI15_10_IRQHandler+0x34>

	//rxBuffer[len];

	//receive whole data from slave
	while(I2C_MasterReceiveDataIT(&I2C_handle, rxBuffer, len, 0x68, I2C_REPEATED_START_DI) != 0);
 80019be:	bf00      	nop
 80019c0:	4b16      	ldr	r3, [pc, #88]	@ (8001a1c <EXTI15_10_IRQHandler+0xa8>)
 80019c2:	781b      	ldrb	r3, [r3, #0]
 80019c4:	461a      	mov	r2, r3
 80019c6:	2300      	movs	r3, #0
 80019c8:	9300      	str	r3, [sp, #0]
 80019ca:	2368      	movs	r3, #104	@ 0x68
 80019cc:	4915      	ldr	r1, [pc, #84]	@ (8001a24 <EXTI15_10_IRQHandler+0xb0>)
 80019ce:	4812      	ldr	r0, [pc, #72]	@ (8001a18 <EXTI15_10_IRQHandler+0xa4>)
 80019d0:	f7ff fc1b 	bl	800120a <I2C_MasterReceiveDataIT>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d1f2      	bne.n	80019c0 <EXTI15_10_IRQHandler+0x4c>

	printf("\nReceived Data: ");
 80019da:	4813      	ldr	r0, [pc, #76]	@ (8001a28 <EXTI15_10_IRQHandler+0xb4>)
 80019dc:	f000 f9e2 	bl	8001da4 <iprintf>
	for(uint32_t i=0; i<len; i++){
 80019e0:	2300      	movs	r3, #0
 80019e2:	607b      	str	r3, [r7, #4]
 80019e4:	e009      	b.n	80019fa <EXTI15_10_IRQHandler+0x86>

		printf("%c", rxBuffer[i]);
 80019e6:	4a0f      	ldr	r2, [pc, #60]	@ (8001a24 <EXTI15_10_IRQHandler+0xb0>)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	4413      	add	r3, r2
 80019ec:	781b      	ldrb	r3, [r3, #0]
 80019ee:	4618      	mov	r0, r3
 80019f0:	f000 f9ea 	bl	8001dc8 <putchar>
	for(uint32_t i=0; i<len; i++){
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	3301      	adds	r3, #1
 80019f8:	607b      	str	r3, [r7, #4]
 80019fa:	4b08      	ldr	r3, [pc, #32]	@ (8001a1c <EXTI15_10_IRQHandler+0xa8>)
 80019fc:	781b      	ldrb	r3, [r3, #0]
 80019fe:	461a      	mov	r2, r3
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d3ef      	bcc.n	80019e6 <EXTI15_10_IRQHandler+0x72>

	}


	GPIO_IRQHandling(13);
 8001a06:	200d      	movs	r0, #13
 8001a08:	f7ff fa7c 	bl	8000f04 <GPIO_IRQHandling>

}
 8001a0c:	bf00      	nop
 8001a0e:	3708      	adds	r7, #8
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	20000000 	.word	0x20000000
 8001a18:	2000007c 	.word	0x2000007c
 8001a1c:	200000a4 	.word	0x200000a4
 8001a20:	20000001 	.word	0x20000001
 8001a24:	200000a8 	.word	0x200000a8
 8001a28:	08002b00 	.word	0x08002b00

08001a2c <I2C1_EV_IRQHandler>:


void I2C1_EV_IRQHandler(){
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0

	I2C_Event_IRQHandling(&I2C_handle);
 8001a30:	4802      	ldr	r0, [pc, #8]	@ (8001a3c <I2C1_EV_IRQHandler+0x10>)
 8001a32:	f7ff fd4d 	bl	80014d0 <I2C_Event_IRQHandling>

}
 8001a36:	bf00      	nop
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	2000007c 	.word	0x2000007c

08001a40 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	4603      	mov	r3, r0
 8001a48:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8001a4a:	4b0e      	ldr	r3, [pc, #56]	@ (8001a84 <ITM_SendChar+0x44>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a0d      	ldr	r2, [pc, #52]	@ (8001a84 <ITM_SendChar+0x44>)
 8001a50:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a54:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8001a56:	4b0c      	ldr	r3, [pc, #48]	@ (8001a88 <ITM_SendChar+0x48>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a0b      	ldr	r2, [pc, #44]	@ (8001a88 <ITM_SendChar+0x48>)
 8001a5c:	f043 0301 	orr.w	r3, r3, #1
 8001a60:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8001a62:	bf00      	nop
 8001a64:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 0301 	and.w	r3, r3, #1
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d0f8      	beq.n	8001a64 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8001a72:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 8001a76:	79fb      	ldrb	r3, [r7, #7]
 8001a78:	6013      	str	r3, [r2, #0]
}
 8001a7a:	bf00      	nop
 8001a7c:	370c      	adds	r7, #12
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bc80      	pop	{r7}
 8001a82:	4770      	bx	lr
 8001a84:	e000edfc 	.word	0xe000edfc
 8001a88:	e0000e00 	.word	0xe0000e00

08001a8c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b086      	sub	sp, #24
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	60f8      	str	r0, [r7, #12]
 8001a94:	60b9      	str	r1, [r7, #8]
 8001a96:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a98:	2300      	movs	r3, #0
 8001a9a:	617b      	str	r3, [r7, #20]
 8001a9c:	e00a      	b.n	8001ab4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a9e:	f3af 8000 	nop.w
 8001aa2:	4601      	mov	r1, r0
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	1c5a      	adds	r2, r3, #1
 8001aa8:	60ba      	str	r2, [r7, #8]
 8001aaa:	b2ca      	uxtb	r2, r1
 8001aac:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	3301      	adds	r3, #1
 8001ab2:	617b      	str	r3, [r7, #20]
 8001ab4:	697a      	ldr	r2, [r7, #20]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	dbf0      	blt.n	8001a9e <_read+0x12>
  }

  return len;
 8001abc:	687b      	ldr	r3, [r7, #4]
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3718      	adds	r7, #24
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}

08001ac6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ac6:	b580      	push	{r7, lr}
 8001ac8:	b086      	sub	sp, #24
 8001aca:	af00      	add	r7, sp, #0
 8001acc:	60f8      	str	r0, [r7, #12]
 8001ace:	60b9      	str	r1, [r7, #8]
 8001ad0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	617b      	str	r3, [r7, #20]
 8001ad6:	e009      	b.n	8001aec <_write+0x26>
  {
   // __io_putchar(*ptr++);
    ITM_SendChar(*ptr++);
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	1c5a      	adds	r2, r3, #1
 8001adc:	60ba      	str	r2, [r7, #8]
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f7ff ffad 	bl	8001a40 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	3301      	adds	r3, #1
 8001aea:	617b      	str	r3, [r7, #20]
 8001aec:	697a      	ldr	r2, [r7, #20]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	429a      	cmp	r2, r3
 8001af2:	dbf1      	blt.n	8001ad8 <_write+0x12>
  }
  return len;
 8001af4:	687b      	ldr	r3, [r7, #4]
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	3718      	adds	r7, #24
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}

08001afe <_close>:

int _close(int file)
{
 8001afe:	b480      	push	{r7}
 8001b00:	b083      	sub	sp, #12
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b06:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	370c      	adds	r7, #12
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bc80      	pop	{r7}
 8001b12:	4770      	bx	lr

08001b14 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b083      	sub	sp, #12
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
 8001b1c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001b24:	605a      	str	r2, [r3, #4]
  return 0;
 8001b26:	2300      	movs	r3, #0
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	370c      	adds	r7, #12
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bc80      	pop	{r7}
 8001b30:	4770      	bx	lr

08001b32 <_isatty>:

int _isatty(int file)
{
 8001b32:	b480      	push	{r7}
 8001b34:	b083      	sub	sp, #12
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b3a:	2301      	movs	r3, #1
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	370c      	adds	r7, #12
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bc80      	pop	{r7}
 8001b44:	4770      	bx	lr

08001b46 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b46:	b480      	push	{r7}
 8001b48:	b085      	sub	sp, #20
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	60f8      	str	r0, [r7, #12]
 8001b4e:	60b9      	str	r1, [r7, #8]
 8001b50:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b52:	2300      	movs	r3, #0
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	3714      	adds	r7, #20
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bc80      	pop	{r7}
 8001b5c:	4770      	bx	lr
	...

08001b60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b086      	sub	sp, #24
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b68:	4a14      	ldr	r2, [pc, #80]	@ (8001bbc <_sbrk+0x5c>)
 8001b6a:	4b15      	ldr	r3, [pc, #84]	@ (8001bc0 <_sbrk+0x60>)
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b74:	4b13      	ldr	r3, [pc, #76]	@ (8001bc4 <_sbrk+0x64>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d102      	bne.n	8001b82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b7c:	4b11      	ldr	r3, [pc, #68]	@ (8001bc4 <_sbrk+0x64>)
 8001b7e:	4a12      	ldr	r2, [pc, #72]	@ (8001bc8 <_sbrk+0x68>)
 8001b80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b82:	4b10      	ldr	r3, [pc, #64]	@ (8001bc4 <_sbrk+0x64>)
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	4413      	add	r3, r2
 8001b8a:	693a      	ldr	r2, [r7, #16]
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d207      	bcs.n	8001ba0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b90:	f000 f9b4 	bl	8001efc <__errno>
 8001b94:	4603      	mov	r3, r0
 8001b96:	220c      	movs	r2, #12
 8001b98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b9a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b9e:	e009      	b.n	8001bb4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ba0:	4b08      	ldr	r3, [pc, #32]	@ (8001bc4 <_sbrk+0x64>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ba6:	4b07      	ldr	r3, [pc, #28]	@ (8001bc4 <_sbrk+0x64>)
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	4413      	add	r3, r2
 8001bae:	4a05      	ldr	r2, [pc, #20]	@ (8001bc4 <_sbrk+0x64>)
 8001bb0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	3718      	adds	r7, #24
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	20020000 	.word	0x20020000
 8001bc0:	00000400 	.word	0x00000400
 8001bc4:	200000ac 	.word	0x200000ac
 8001bc8:	20000200 	.word	0x20000200

08001bcc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001bcc:	480d      	ldr	r0, [pc, #52]	@ (8001c04 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001bce:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001bd0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bd4:	480c      	ldr	r0, [pc, #48]	@ (8001c08 <LoopForever+0x6>)
  ldr r1, =_edata
 8001bd6:	490d      	ldr	r1, [pc, #52]	@ (8001c0c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001bd8:	4a0d      	ldr	r2, [pc, #52]	@ (8001c10 <LoopForever+0xe>)
  movs r3, #0
 8001bda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bdc:	e002      	b.n	8001be4 <LoopCopyDataInit>

08001bde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001be0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001be2:	3304      	adds	r3, #4

08001be4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001be4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001be6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001be8:	d3f9      	bcc.n	8001bde <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bea:	4a0a      	ldr	r2, [pc, #40]	@ (8001c14 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001bec:	4c0a      	ldr	r4, [pc, #40]	@ (8001c18 <LoopForever+0x16>)
  movs r3, #0
 8001bee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bf0:	e001      	b.n	8001bf6 <LoopFillZerobss>

08001bf2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bf2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bf4:	3204      	adds	r2, #4

08001bf6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bf6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bf8:	d3fb      	bcc.n	8001bf2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001bfa:	f000 f985 	bl	8001f08 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001bfe:	f7ff fe9d 	bl	800193c <main>

08001c02 <LoopForever>:

LoopForever:
  b LoopForever
 8001c02:	e7fe      	b.n	8001c02 <LoopForever>
  ldr   r0, =_estack
 8001c04:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001c08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c0c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001c10:	08002b54 	.word	0x08002b54
  ldr r2, =_sbss
 8001c14:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001c18:	200001fc 	.word	0x200001fc

08001c1c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c1c:	e7fe      	b.n	8001c1c <ADC_IRQHandler>
	...

08001c20 <std>:
 8001c20:	2300      	movs	r3, #0
 8001c22:	b510      	push	{r4, lr}
 8001c24:	4604      	mov	r4, r0
 8001c26:	e9c0 3300 	strd	r3, r3, [r0]
 8001c2a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001c2e:	6083      	str	r3, [r0, #8]
 8001c30:	8181      	strh	r1, [r0, #12]
 8001c32:	6643      	str	r3, [r0, #100]	@ 0x64
 8001c34:	81c2      	strh	r2, [r0, #14]
 8001c36:	6183      	str	r3, [r0, #24]
 8001c38:	4619      	mov	r1, r3
 8001c3a:	2208      	movs	r2, #8
 8001c3c:	305c      	adds	r0, #92	@ 0x5c
 8001c3e:	f000 f90e 	bl	8001e5e <memset>
 8001c42:	4b0d      	ldr	r3, [pc, #52]	@ (8001c78 <std+0x58>)
 8001c44:	6263      	str	r3, [r4, #36]	@ 0x24
 8001c46:	4b0d      	ldr	r3, [pc, #52]	@ (8001c7c <std+0x5c>)
 8001c48:	62a3      	str	r3, [r4, #40]	@ 0x28
 8001c4a:	4b0d      	ldr	r3, [pc, #52]	@ (8001c80 <std+0x60>)
 8001c4c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8001c4e:	4b0d      	ldr	r3, [pc, #52]	@ (8001c84 <std+0x64>)
 8001c50:	6323      	str	r3, [r4, #48]	@ 0x30
 8001c52:	4b0d      	ldr	r3, [pc, #52]	@ (8001c88 <std+0x68>)
 8001c54:	6224      	str	r4, [r4, #32]
 8001c56:	429c      	cmp	r4, r3
 8001c58:	d006      	beq.n	8001c68 <std+0x48>
 8001c5a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8001c5e:	4294      	cmp	r4, r2
 8001c60:	d002      	beq.n	8001c68 <std+0x48>
 8001c62:	33d0      	adds	r3, #208	@ 0xd0
 8001c64:	429c      	cmp	r4, r3
 8001c66:	d105      	bne.n	8001c74 <std+0x54>
 8001c68:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8001c6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001c70:	f000 b96e 	b.w	8001f50 <__retarget_lock_init_recursive>
 8001c74:	bd10      	pop	{r4, pc}
 8001c76:	bf00      	nop
 8001c78:	08001dd9 	.word	0x08001dd9
 8001c7c:	08001dfb 	.word	0x08001dfb
 8001c80:	08001e33 	.word	0x08001e33
 8001c84:	08001e57 	.word	0x08001e57
 8001c88:	200000b0 	.word	0x200000b0

08001c8c <stdio_exit_handler>:
 8001c8c:	4a02      	ldr	r2, [pc, #8]	@ (8001c98 <stdio_exit_handler+0xc>)
 8001c8e:	4903      	ldr	r1, [pc, #12]	@ (8001c9c <stdio_exit_handler+0x10>)
 8001c90:	4803      	ldr	r0, [pc, #12]	@ (8001ca0 <stdio_exit_handler+0x14>)
 8001c92:	f000 b869 	b.w	8001d68 <_fwalk_sglue>
 8001c96:	bf00      	nop
 8001c98:	20000004 	.word	0x20000004
 8001c9c:	080027e1 	.word	0x080027e1
 8001ca0:	20000014 	.word	0x20000014

08001ca4 <cleanup_stdio>:
 8001ca4:	6841      	ldr	r1, [r0, #4]
 8001ca6:	4b0c      	ldr	r3, [pc, #48]	@ (8001cd8 <cleanup_stdio+0x34>)
 8001ca8:	4299      	cmp	r1, r3
 8001caa:	b510      	push	{r4, lr}
 8001cac:	4604      	mov	r4, r0
 8001cae:	d001      	beq.n	8001cb4 <cleanup_stdio+0x10>
 8001cb0:	f000 fd96 	bl	80027e0 <_fflush_r>
 8001cb4:	68a1      	ldr	r1, [r4, #8]
 8001cb6:	4b09      	ldr	r3, [pc, #36]	@ (8001cdc <cleanup_stdio+0x38>)
 8001cb8:	4299      	cmp	r1, r3
 8001cba:	d002      	beq.n	8001cc2 <cleanup_stdio+0x1e>
 8001cbc:	4620      	mov	r0, r4
 8001cbe:	f000 fd8f 	bl	80027e0 <_fflush_r>
 8001cc2:	68e1      	ldr	r1, [r4, #12]
 8001cc4:	4b06      	ldr	r3, [pc, #24]	@ (8001ce0 <cleanup_stdio+0x3c>)
 8001cc6:	4299      	cmp	r1, r3
 8001cc8:	d004      	beq.n	8001cd4 <cleanup_stdio+0x30>
 8001cca:	4620      	mov	r0, r4
 8001ccc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001cd0:	f000 bd86 	b.w	80027e0 <_fflush_r>
 8001cd4:	bd10      	pop	{r4, pc}
 8001cd6:	bf00      	nop
 8001cd8:	200000b0 	.word	0x200000b0
 8001cdc:	20000118 	.word	0x20000118
 8001ce0:	20000180 	.word	0x20000180

08001ce4 <global_stdio_init.part.0>:
 8001ce4:	b510      	push	{r4, lr}
 8001ce6:	4b0b      	ldr	r3, [pc, #44]	@ (8001d14 <global_stdio_init.part.0+0x30>)
 8001ce8:	4c0b      	ldr	r4, [pc, #44]	@ (8001d18 <global_stdio_init.part.0+0x34>)
 8001cea:	4a0c      	ldr	r2, [pc, #48]	@ (8001d1c <global_stdio_init.part.0+0x38>)
 8001cec:	601a      	str	r2, [r3, #0]
 8001cee:	4620      	mov	r0, r4
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	2104      	movs	r1, #4
 8001cf4:	f7ff ff94 	bl	8001c20 <std>
 8001cf8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	2109      	movs	r1, #9
 8001d00:	f7ff ff8e 	bl	8001c20 <std>
 8001d04:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8001d08:	2202      	movs	r2, #2
 8001d0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001d0e:	2112      	movs	r1, #18
 8001d10:	f7ff bf86 	b.w	8001c20 <std>
 8001d14:	200001e8 	.word	0x200001e8
 8001d18:	200000b0 	.word	0x200000b0
 8001d1c:	08001c8d 	.word	0x08001c8d

08001d20 <__sfp_lock_acquire>:
 8001d20:	4801      	ldr	r0, [pc, #4]	@ (8001d28 <__sfp_lock_acquire+0x8>)
 8001d22:	f000 b916 	b.w	8001f52 <__retarget_lock_acquire_recursive>
 8001d26:	bf00      	nop
 8001d28:	200001f1 	.word	0x200001f1

08001d2c <__sfp_lock_release>:
 8001d2c:	4801      	ldr	r0, [pc, #4]	@ (8001d34 <__sfp_lock_release+0x8>)
 8001d2e:	f000 b911 	b.w	8001f54 <__retarget_lock_release_recursive>
 8001d32:	bf00      	nop
 8001d34:	200001f1 	.word	0x200001f1

08001d38 <__sinit>:
 8001d38:	b510      	push	{r4, lr}
 8001d3a:	4604      	mov	r4, r0
 8001d3c:	f7ff fff0 	bl	8001d20 <__sfp_lock_acquire>
 8001d40:	6a23      	ldr	r3, [r4, #32]
 8001d42:	b11b      	cbz	r3, 8001d4c <__sinit+0x14>
 8001d44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001d48:	f7ff bff0 	b.w	8001d2c <__sfp_lock_release>
 8001d4c:	4b04      	ldr	r3, [pc, #16]	@ (8001d60 <__sinit+0x28>)
 8001d4e:	6223      	str	r3, [r4, #32]
 8001d50:	4b04      	ldr	r3, [pc, #16]	@ (8001d64 <__sinit+0x2c>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d1f5      	bne.n	8001d44 <__sinit+0xc>
 8001d58:	f7ff ffc4 	bl	8001ce4 <global_stdio_init.part.0>
 8001d5c:	e7f2      	b.n	8001d44 <__sinit+0xc>
 8001d5e:	bf00      	nop
 8001d60:	08001ca5 	.word	0x08001ca5
 8001d64:	200001e8 	.word	0x200001e8

08001d68 <_fwalk_sglue>:
 8001d68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001d6c:	4607      	mov	r7, r0
 8001d6e:	4688      	mov	r8, r1
 8001d70:	4614      	mov	r4, r2
 8001d72:	2600      	movs	r6, #0
 8001d74:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001d78:	f1b9 0901 	subs.w	r9, r9, #1
 8001d7c:	d505      	bpl.n	8001d8a <_fwalk_sglue+0x22>
 8001d7e:	6824      	ldr	r4, [r4, #0]
 8001d80:	2c00      	cmp	r4, #0
 8001d82:	d1f7      	bne.n	8001d74 <_fwalk_sglue+0xc>
 8001d84:	4630      	mov	r0, r6
 8001d86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001d8a:	89ab      	ldrh	r3, [r5, #12]
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d907      	bls.n	8001da0 <_fwalk_sglue+0x38>
 8001d90:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001d94:	3301      	adds	r3, #1
 8001d96:	d003      	beq.n	8001da0 <_fwalk_sglue+0x38>
 8001d98:	4629      	mov	r1, r5
 8001d9a:	4638      	mov	r0, r7
 8001d9c:	47c0      	blx	r8
 8001d9e:	4306      	orrs	r6, r0
 8001da0:	3568      	adds	r5, #104	@ 0x68
 8001da2:	e7e9      	b.n	8001d78 <_fwalk_sglue+0x10>

08001da4 <iprintf>:
 8001da4:	b40f      	push	{r0, r1, r2, r3}
 8001da6:	b507      	push	{r0, r1, r2, lr}
 8001da8:	4906      	ldr	r1, [pc, #24]	@ (8001dc4 <iprintf+0x20>)
 8001daa:	ab04      	add	r3, sp, #16
 8001dac:	6808      	ldr	r0, [r1, #0]
 8001dae:	f853 2b04 	ldr.w	r2, [r3], #4
 8001db2:	6881      	ldr	r1, [r0, #8]
 8001db4:	9301      	str	r3, [sp, #4]
 8001db6:	f000 f9ef 	bl	8002198 <_vfiprintf_r>
 8001dba:	b003      	add	sp, #12
 8001dbc:	f85d eb04 	ldr.w	lr, [sp], #4
 8001dc0:	b004      	add	sp, #16
 8001dc2:	4770      	bx	lr
 8001dc4:	20000010 	.word	0x20000010

08001dc8 <putchar>:
 8001dc8:	4b02      	ldr	r3, [pc, #8]	@ (8001dd4 <putchar+0xc>)
 8001dca:	4601      	mov	r1, r0
 8001dcc:	6818      	ldr	r0, [r3, #0]
 8001dce:	6882      	ldr	r2, [r0, #8]
 8001dd0:	f000 bd2e 	b.w	8002830 <_putc_r>
 8001dd4:	20000010 	.word	0x20000010

08001dd8 <__sread>:
 8001dd8:	b510      	push	{r4, lr}
 8001dda:	460c      	mov	r4, r1
 8001ddc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001de0:	f000 f868 	bl	8001eb4 <_read_r>
 8001de4:	2800      	cmp	r0, #0
 8001de6:	bfab      	itete	ge
 8001de8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8001dea:	89a3      	ldrhlt	r3, [r4, #12]
 8001dec:	181b      	addge	r3, r3, r0
 8001dee:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8001df2:	bfac      	ite	ge
 8001df4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8001df6:	81a3      	strhlt	r3, [r4, #12]
 8001df8:	bd10      	pop	{r4, pc}

08001dfa <__swrite>:
 8001dfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001dfe:	461f      	mov	r7, r3
 8001e00:	898b      	ldrh	r3, [r1, #12]
 8001e02:	05db      	lsls	r3, r3, #23
 8001e04:	4605      	mov	r5, r0
 8001e06:	460c      	mov	r4, r1
 8001e08:	4616      	mov	r6, r2
 8001e0a:	d505      	bpl.n	8001e18 <__swrite+0x1e>
 8001e0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001e10:	2302      	movs	r3, #2
 8001e12:	2200      	movs	r2, #0
 8001e14:	f000 f83c 	bl	8001e90 <_lseek_r>
 8001e18:	89a3      	ldrh	r3, [r4, #12]
 8001e1a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001e1e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001e22:	81a3      	strh	r3, [r4, #12]
 8001e24:	4632      	mov	r2, r6
 8001e26:	463b      	mov	r3, r7
 8001e28:	4628      	mov	r0, r5
 8001e2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001e2e:	f000 b853 	b.w	8001ed8 <_write_r>

08001e32 <__sseek>:
 8001e32:	b510      	push	{r4, lr}
 8001e34:	460c      	mov	r4, r1
 8001e36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001e3a:	f000 f829 	bl	8001e90 <_lseek_r>
 8001e3e:	1c43      	adds	r3, r0, #1
 8001e40:	89a3      	ldrh	r3, [r4, #12]
 8001e42:	bf15      	itete	ne
 8001e44:	6560      	strne	r0, [r4, #84]	@ 0x54
 8001e46:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8001e4a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8001e4e:	81a3      	strheq	r3, [r4, #12]
 8001e50:	bf18      	it	ne
 8001e52:	81a3      	strhne	r3, [r4, #12]
 8001e54:	bd10      	pop	{r4, pc}

08001e56 <__sclose>:
 8001e56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001e5a:	f000 b809 	b.w	8001e70 <_close_r>

08001e5e <memset>:
 8001e5e:	4402      	add	r2, r0
 8001e60:	4603      	mov	r3, r0
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d100      	bne.n	8001e68 <memset+0xa>
 8001e66:	4770      	bx	lr
 8001e68:	f803 1b01 	strb.w	r1, [r3], #1
 8001e6c:	e7f9      	b.n	8001e62 <memset+0x4>
	...

08001e70 <_close_r>:
 8001e70:	b538      	push	{r3, r4, r5, lr}
 8001e72:	4d06      	ldr	r5, [pc, #24]	@ (8001e8c <_close_r+0x1c>)
 8001e74:	2300      	movs	r3, #0
 8001e76:	4604      	mov	r4, r0
 8001e78:	4608      	mov	r0, r1
 8001e7a:	602b      	str	r3, [r5, #0]
 8001e7c:	f7ff fe3f 	bl	8001afe <_close>
 8001e80:	1c43      	adds	r3, r0, #1
 8001e82:	d102      	bne.n	8001e8a <_close_r+0x1a>
 8001e84:	682b      	ldr	r3, [r5, #0]
 8001e86:	b103      	cbz	r3, 8001e8a <_close_r+0x1a>
 8001e88:	6023      	str	r3, [r4, #0]
 8001e8a:	bd38      	pop	{r3, r4, r5, pc}
 8001e8c:	200001ec 	.word	0x200001ec

08001e90 <_lseek_r>:
 8001e90:	b538      	push	{r3, r4, r5, lr}
 8001e92:	4d07      	ldr	r5, [pc, #28]	@ (8001eb0 <_lseek_r+0x20>)
 8001e94:	4604      	mov	r4, r0
 8001e96:	4608      	mov	r0, r1
 8001e98:	4611      	mov	r1, r2
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	602a      	str	r2, [r5, #0]
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	f7ff fe51 	bl	8001b46 <_lseek>
 8001ea4:	1c43      	adds	r3, r0, #1
 8001ea6:	d102      	bne.n	8001eae <_lseek_r+0x1e>
 8001ea8:	682b      	ldr	r3, [r5, #0]
 8001eaa:	b103      	cbz	r3, 8001eae <_lseek_r+0x1e>
 8001eac:	6023      	str	r3, [r4, #0]
 8001eae:	bd38      	pop	{r3, r4, r5, pc}
 8001eb0:	200001ec 	.word	0x200001ec

08001eb4 <_read_r>:
 8001eb4:	b538      	push	{r3, r4, r5, lr}
 8001eb6:	4d07      	ldr	r5, [pc, #28]	@ (8001ed4 <_read_r+0x20>)
 8001eb8:	4604      	mov	r4, r0
 8001eba:	4608      	mov	r0, r1
 8001ebc:	4611      	mov	r1, r2
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	602a      	str	r2, [r5, #0]
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	f7ff fde2 	bl	8001a8c <_read>
 8001ec8:	1c43      	adds	r3, r0, #1
 8001eca:	d102      	bne.n	8001ed2 <_read_r+0x1e>
 8001ecc:	682b      	ldr	r3, [r5, #0]
 8001ece:	b103      	cbz	r3, 8001ed2 <_read_r+0x1e>
 8001ed0:	6023      	str	r3, [r4, #0]
 8001ed2:	bd38      	pop	{r3, r4, r5, pc}
 8001ed4:	200001ec 	.word	0x200001ec

08001ed8 <_write_r>:
 8001ed8:	b538      	push	{r3, r4, r5, lr}
 8001eda:	4d07      	ldr	r5, [pc, #28]	@ (8001ef8 <_write_r+0x20>)
 8001edc:	4604      	mov	r4, r0
 8001ede:	4608      	mov	r0, r1
 8001ee0:	4611      	mov	r1, r2
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	602a      	str	r2, [r5, #0]
 8001ee6:	461a      	mov	r2, r3
 8001ee8:	f7ff fded 	bl	8001ac6 <_write>
 8001eec:	1c43      	adds	r3, r0, #1
 8001eee:	d102      	bne.n	8001ef6 <_write_r+0x1e>
 8001ef0:	682b      	ldr	r3, [r5, #0]
 8001ef2:	b103      	cbz	r3, 8001ef6 <_write_r+0x1e>
 8001ef4:	6023      	str	r3, [r4, #0]
 8001ef6:	bd38      	pop	{r3, r4, r5, pc}
 8001ef8:	200001ec 	.word	0x200001ec

08001efc <__errno>:
 8001efc:	4b01      	ldr	r3, [pc, #4]	@ (8001f04 <__errno+0x8>)
 8001efe:	6818      	ldr	r0, [r3, #0]
 8001f00:	4770      	bx	lr
 8001f02:	bf00      	nop
 8001f04:	20000010 	.word	0x20000010

08001f08 <__libc_init_array>:
 8001f08:	b570      	push	{r4, r5, r6, lr}
 8001f0a:	4d0d      	ldr	r5, [pc, #52]	@ (8001f40 <__libc_init_array+0x38>)
 8001f0c:	4c0d      	ldr	r4, [pc, #52]	@ (8001f44 <__libc_init_array+0x3c>)
 8001f0e:	1b64      	subs	r4, r4, r5
 8001f10:	10a4      	asrs	r4, r4, #2
 8001f12:	2600      	movs	r6, #0
 8001f14:	42a6      	cmp	r6, r4
 8001f16:	d109      	bne.n	8001f2c <__libc_init_array+0x24>
 8001f18:	4d0b      	ldr	r5, [pc, #44]	@ (8001f48 <__libc_init_array+0x40>)
 8001f1a:	4c0c      	ldr	r4, [pc, #48]	@ (8001f4c <__libc_init_array+0x44>)
 8001f1c:	f000 fde4 	bl	8002ae8 <_init>
 8001f20:	1b64      	subs	r4, r4, r5
 8001f22:	10a4      	asrs	r4, r4, #2
 8001f24:	2600      	movs	r6, #0
 8001f26:	42a6      	cmp	r6, r4
 8001f28:	d105      	bne.n	8001f36 <__libc_init_array+0x2e>
 8001f2a:	bd70      	pop	{r4, r5, r6, pc}
 8001f2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f30:	4798      	blx	r3
 8001f32:	3601      	adds	r6, #1
 8001f34:	e7ee      	b.n	8001f14 <__libc_init_array+0xc>
 8001f36:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f3a:	4798      	blx	r3
 8001f3c:	3601      	adds	r6, #1
 8001f3e:	e7f2      	b.n	8001f26 <__libc_init_array+0x1e>
 8001f40:	08002b4c 	.word	0x08002b4c
 8001f44:	08002b4c 	.word	0x08002b4c
 8001f48:	08002b4c 	.word	0x08002b4c
 8001f4c:	08002b50 	.word	0x08002b50

08001f50 <__retarget_lock_init_recursive>:
 8001f50:	4770      	bx	lr

08001f52 <__retarget_lock_acquire_recursive>:
 8001f52:	4770      	bx	lr

08001f54 <__retarget_lock_release_recursive>:
 8001f54:	4770      	bx	lr
	...

08001f58 <_free_r>:
 8001f58:	b538      	push	{r3, r4, r5, lr}
 8001f5a:	4605      	mov	r5, r0
 8001f5c:	2900      	cmp	r1, #0
 8001f5e:	d041      	beq.n	8001fe4 <_free_r+0x8c>
 8001f60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001f64:	1f0c      	subs	r4, r1, #4
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	bfb8      	it	lt
 8001f6a:	18e4      	addlt	r4, r4, r3
 8001f6c:	f000 f8e0 	bl	8002130 <__malloc_lock>
 8001f70:	4a1d      	ldr	r2, [pc, #116]	@ (8001fe8 <_free_r+0x90>)
 8001f72:	6813      	ldr	r3, [r2, #0]
 8001f74:	b933      	cbnz	r3, 8001f84 <_free_r+0x2c>
 8001f76:	6063      	str	r3, [r4, #4]
 8001f78:	6014      	str	r4, [r2, #0]
 8001f7a:	4628      	mov	r0, r5
 8001f7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001f80:	f000 b8dc 	b.w	800213c <__malloc_unlock>
 8001f84:	42a3      	cmp	r3, r4
 8001f86:	d908      	bls.n	8001f9a <_free_r+0x42>
 8001f88:	6820      	ldr	r0, [r4, #0]
 8001f8a:	1821      	adds	r1, r4, r0
 8001f8c:	428b      	cmp	r3, r1
 8001f8e:	bf01      	itttt	eq
 8001f90:	6819      	ldreq	r1, [r3, #0]
 8001f92:	685b      	ldreq	r3, [r3, #4]
 8001f94:	1809      	addeq	r1, r1, r0
 8001f96:	6021      	streq	r1, [r4, #0]
 8001f98:	e7ed      	b.n	8001f76 <_free_r+0x1e>
 8001f9a:	461a      	mov	r2, r3
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	b10b      	cbz	r3, 8001fa4 <_free_r+0x4c>
 8001fa0:	42a3      	cmp	r3, r4
 8001fa2:	d9fa      	bls.n	8001f9a <_free_r+0x42>
 8001fa4:	6811      	ldr	r1, [r2, #0]
 8001fa6:	1850      	adds	r0, r2, r1
 8001fa8:	42a0      	cmp	r0, r4
 8001faa:	d10b      	bne.n	8001fc4 <_free_r+0x6c>
 8001fac:	6820      	ldr	r0, [r4, #0]
 8001fae:	4401      	add	r1, r0
 8001fb0:	1850      	adds	r0, r2, r1
 8001fb2:	4283      	cmp	r3, r0
 8001fb4:	6011      	str	r1, [r2, #0]
 8001fb6:	d1e0      	bne.n	8001f7a <_free_r+0x22>
 8001fb8:	6818      	ldr	r0, [r3, #0]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	6053      	str	r3, [r2, #4]
 8001fbe:	4408      	add	r0, r1
 8001fc0:	6010      	str	r0, [r2, #0]
 8001fc2:	e7da      	b.n	8001f7a <_free_r+0x22>
 8001fc4:	d902      	bls.n	8001fcc <_free_r+0x74>
 8001fc6:	230c      	movs	r3, #12
 8001fc8:	602b      	str	r3, [r5, #0]
 8001fca:	e7d6      	b.n	8001f7a <_free_r+0x22>
 8001fcc:	6820      	ldr	r0, [r4, #0]
 8001fce:	1821      	adds	r1, r4, r0
 8001fd0:	428b      	cmp	r3, r1
 8001fd2:	bf04      	itt	eq
 8001fd4:	6819      	ldreq	r1, [r3, #0]
 8001fd6:	685b      	ldreq	r3, [r3, #4]
 8001fd8:	6063      	str	r3, [r4, #4]
 8001fda:	bf04      	itt	eq
 8001fdc:	1809      	addeq	r1, r1, r0
 8001fde:	6021      	streq	r1, [r4, #0]
 8001fe0:	6054      	str	r4, [r2, #4]
 8001fe2:	e7ca      	b.n	8001f7a <_free_r+0x22>
 8001fe4:	bd38      	pop	{r3, r4, r5, pc}
 8001fe6:	bf00      	nop
 8001fe8:	200001f8 	.word	0x200001f8

08001fec <sbrk_aligned>:
 8001fec:	b570      	push	{r4, r5, r6, lr}
 8001fee:	4e0f      	ldr	r6, [pc, #60]	@ (800202c <sbrk_aligned+0x40>)
 8001ff0:	460c      	mov	r4, r1
 8001ff2:	6831      	ldr	r1, [r6, #0]
 8001ff4:	4605      	mov	r5, r0
 8001ff6:	b911      	cbnz	r1, 8001ffe <sbrk_aligned+0x12>
 8001ff8:	f000 fce2 	bl	80029c0 <_sbrk_r>
 8001ffc:	6030      	str	r0, [r6, #0]
 8001ffe:	4621      	mov	r1, r4
 8002000:	4628      	mov	r0, r5
 8002002:	f000 fcdd 	bl	80029c0 <_sbrk_r>
 8002006:	1c43      	adds	r3, r0, #1
 8002008:	d103      	bne.n	8002012 <sbrk_aligned+0x26>
 800200a:	f04f 34ff 	mov.w	r4, #4294967295
 800200e:	4620      	mov	r0, r4
 8002010:	bd70      	pop	{r4, r5, r6, pc}
 8002012:	1cc4      	adds	r4, r0, #3
 8002014:	f024 0403 	bic.w	r4, r4, #3
 8002018:	42a0      	cmp	r0, r4
 800201a:	d0f8      	beq.n	800200e <sbrk_aligned+0x22>
 800201c:	1a21      	subs	r1, r4, r0
 800201e:	4628      	mov	r0, r5
 8002020:	f000 fcce 	bl	80029c0 <_sbrk_r>
 8002024:	3001      	adds	r0, #1
 8002026:	d1f2      	bne.n	800200e <sbrk_aligned+0x22>
 8002028:	e7ef      	b.n	800200a <sbrk_aligned+0x1e>
 800202a:	bf00      	nop
 800202c:	200001f4 	.word	0x200001f4

08002030 <_malloc_r>:
 8002030:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002034:	1ccd      	adds	r5, r1, #3
 8002036:	f025 0503 	bic.w	r5, r5, #3
 800203a:	3508      	adds	r5, #8
 800203c:	2d0c      	cmp	r5, #12
 800203e:	bf38      	it	cc
 8002040:	250c      	movcc	r5, #12
 8002042:	2d00      	cmp	r5, #0
 8002044:	4606      	mov	r6, r0
 8002046:	db01      	blt.n	800204c <_malloc_r+0x1c>
 8002048:	42a9      	cmp	r1, r5
 800204a:	d904      	bls.n	8002056 <_malloc_r+0x26>
 800204c:	230c      	movs	r3, #12
 800204e:	6033      	str	r3, [r6, #0]
 8002050:	2000      	movs	r0, #0
 8002052:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002056:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800212c <_malloc_r+0xfc>
 800205a:	f000 f869 	bl	8002130 <__malloc_lock>
 800205e:	f8d8 3000 	ldr.w	r3, [r8]
 8002062:	461c      	mov	r4, r3
 8002064:	bb44      	cbnz	r4, 80020b8 <_malloc_r+0x88>
 8002066:	4629      	mov	r1, r5
 8002068:	4630      	mov	r0, r6
 800206a:	f7ff ffbf 	bl	8001fec <sbrk_aligned>
 800206e:	1c43      	adds	r3, r0, #1
 8002070:	4604      	mov	r4, r0
 8002072:	d158      	bne.n	8002126 <_malloc_r+0xf6>
 8002074:	f8d8 4000 	ldr.w	r4, [r8]
 8002078:	4627      	mov	r7, r4
 800207a:	2f00      	cmp	r7, #0
 800207c:	d143      	bne.n	8002106 <_malloc_r+0xd6>
 800207e:	2c00      	cmp	r4, #0
 8002080:	d04b      	beq.n	800211a <_malloc_r+0xea>
 8002082:	6823      	ldr	r3, [r4, #0]
 8002084:	4639      	mov	r1, r7
 8002086:	4630      	mov	r0, r6
 8002088:	eb04 0903 	add.w	r9, r4, r3
 800208c:	f000 fc98 	bl	80029c0 <_sbrk_r>
 8002090:	4581      	cmp	r9, r0
 8002092:	d142      	bne.n	800211a <_malloc_r+0xea>
 8002094:	6821      	ldr	r1, [r4, #0]
 8002096:	1a6d      	subs	r5, r5, r1
 8002098:	4629      	mov	r1, r5
 800209a:	4630      	mov	r0, r6
 800209c:	f7ff ffa6 	bl	8001fec <sbrk_aligned>
 80020a0:	3001      	adds	r0, #1
 80020a2:	d03a      	beq.n	800211a <_malloc_r+0xea>
 80020a4:	6823      	ldr	r3, [r4, #0]
 80020a6:	442b      	add	r3, r5
 80020a8:	6023      	str	r3, [r4, #0]
 80020aa:	f8d8 3000 	ldr.w	r3, [r8]
 80020ae:	685a      	ldr	r2, [r3, #4]
 80020b0:	bb62      	cbnz	r2, 800210c <_malloc_r+0xdc>
 80020b2:	f8c8 7000 	str.w	r7, [r8]
 80020b6:	e00f      	b.n	80020d8 <_malloc_r+0xa8>
 80020b8:	6822      	ldr	r2, [r4, #0]
 80020ba:	1b52      	subs	r2, r2, r5
 80020bc:	d420      	bmi.n	8002100 <_malloc_r+0xd0>
 80020be:	2a0b      	cmp	r2, #11
 80020c0:	d917      	bls.n	80020f2 <_malloc_r+0xc2>
 80020c2:	1961      	adds	r1, r4, r5
 80020c4:	42a3      	cmp	r3, r4
 80020c6:	6025      	str	r5, [r4, #0]
 80020c8:	bf18      	it	ne
 80020ca:	6059      	strne	r1, [r3, #4]
 80020cc:	6863      	ldr	r3, [r4, #4]
 80020ce:	bf08      	it	eq
 80020d0:	f8c8 1000 	streq.w	r1, [r8]
 80020d4:	5162      	str	r2, [r4, r5]
 80020d6:	604b      	str	r3, [r1, #4]
 80020d8:	4630      	mov	r0, r6
 80020da:	f000 f82f 	bl	800213c <__malloc_unlock>
 80020de:	f104 000b 	add.w	r0, r4, #11
 80020e2:	1d23      	adds	r3, r4, #4
 80020e4:	f020 0007 	bic.w	r0, r0, #7
 80020e8:	1ac2      	subs	r2, r0, r3
 80020ea:	bf1c      	itt	ne
 80020ec:	1a1b      	subne	r3, r3, r0
 80020ee:	50a3      	strne	r3, [r4, r2]
 80020f0:	e7af      	b.n	8002052 <_malloc_r+0x22>
 80020f2:	6862      	ldr	r2, [r4, #4]
 80020f4:	42a3      	cmp	r3, r4
 80020f6:	bf0c      	ite	eq
 80020f8:	f8c8 2000 	streq.w	r2, [r8]
 80020fc:	605a      	strne	r2, [r3, #4]
 80020fe:	e7eb      	b.n	80020d8 <_malloc_r+0xa8>
 8002100:	4623      	mov	r3, r4
 8002102:	6864      	ldr	r4, [r4, #4]
 8002104:	e7ae      	b.n	8002064 <_malloc_r+0x34>
 8002106:	463c      	mov	r4, r7
 8002108:	687f      	ldr	r7, [r7, #4]
 800210a:	e7b6      	b.n	800207a <_malloc_r+0x4a>
 800210c:	461a      	mov	r2, r3
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	42a3      	cmp	r3, r4
 8002112:	d1fb      	bne.n	800210c <_malloc_r+0xdc>
 8002114:	2300      	movs	r3, #0
 8002116:	6053      	str	r3, [r2, #4]
 8002118:	e7de      	b.n	80020d8 <_malloc_r+0xa8>
 800211a:	230c      	movs	r3, #12
 800211c:	6033      	str	r3, [r6, #0]
 800211e:	4630      	mov	r0, r6
 8002120:	f000 f80c 	bl	800213c <__malloc_unlock>
 8002124:	e794      	b.n	8002050 <_malloc_r+0x20>
 8002126:	6005      	str	r5, [r0, #0]
 8002128:	e7d6      	b.n	80020d8 <_malloc_r+0xa8>
 800212a:	bf00      	nop
 800212c:	200001f8 	.word	0x200001f8

08002130 <__malloc_lock>:
 8002130:	4801      	ldr	r0, [pc, #4]	@ (8002138 <__malloc_lock+0x8>)
 8002132:	f7ff bf0e 	b.w	8001f52 <__retarget_lock_acquire_recursive>
 8002136:	bf00      	nop
 8002138:	200001f0 	.word	0x200001f0

0800213c <__malloc_unlock>:
 800213c:	4801      	ldr	r0, [pc, #4]	@ (8002144 <__malloc_unlock+0x8>)
 800213e:	f7ff bf09 	b.w	8001f54 <__retarget_lock_release_recursive>
 8002142:	bf00      	nop
 8002144:	200001f0 	.word	0x200001f0

08002148 <__sfputc_r>:
 8002148:	6893      	ldr	r3, [r2, #8]
 800214a:	3b01      	subs	r3, #1
 800214c:	2b00      	cmp	r3, #0
 800214e:	b410      	push	{r4}
 8002150:	6093      	str	r3, [r2, #8]
 8002152:	da07      	bge.n	8002164 <__sfputc_r+0x1c>
 8002154:	6994      	ldr	r4, [r2, #24]
 8002156:	42a3      	cmp	r3, r4
 8002158:	db01      	blt.n	800215e <__sfputc_r+0x16>
 800215a:	290a      	cmp	r1, #10
 800215c:	d102      	bne.n	8002164 <__sfputc_r+0x1c>
 800215e:	bc10      	pop	{r4}
 8002160:	f000 bb9a 	b.w	8002898 <__swbuf_r>
 8002164:	6813      	ldr	r3, [r2, #0]
 8002166:	1c58      	adds	r0, r3, #1
 8002168:	6010      	str	r0, [r2, #0]
 800216a:	7019      	strb	r1, [r3, #0]
 800216c:	4608      	mov	r0, r1
 800216e:	bc10      	pop	{r4}
 8002170:	4770      	bx	lr

08002172 <__sfputs_r>:
 8002172:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002174:	4606      	mov	r6, r0
 8002176:	460f      	mov	r7, r1
 8002178:	4614      	mov	r4, r2
 800217a:	18d5      	adds	r5, r2, r3
 800217c:	42ac      	cmp	r4, r5
 800217e:	d101      	bne.n	8002184 <__sfputs_r+0x12>
 8002180:	2000      	movs	r0, #0
 8002182:	e007      	b.n	8002194 <__sfputs_r+0x22>
 8002184:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002188:	463a      	mov	r2, r7
 800218a:	4630      	mov	r0, r6
 800218c:	f7ff ffdc 	bl	8002148 <__sfputc_r>
 8002190:	1c43      	adds	r3, r0, #1
 8002192:	d1f3      	bne.n	800217c <__sfputs_r+0xa>
 8002194:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002198 <_vfiprintf_r>:
 8002198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800219c:	460d      	mov	r5, r1
 800219e:	b09d      	sub	sp, #116	@ 0x74
 80021a0:	4614      	mov	r4, r2
 80021a2:	4698      	mov	r8, r3
 80021a4:	4606      	mov	r6, r0
 80021a6:	b118      	cbz	r0, 80021b0 <_vfiprintf_r+0x18>
 80021a8:	6a03      	ldr	r3, [r0, #32]
 80021aa:	b90b      	cbnz	r3, 80021b0 <_vfiprintf_r+0x18>
 80021ac:	f7ff fdc4 	bl	8001d38 <__sinit>
 80021b0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80021b2:	07d9      	lsls	r1, r3, #31
 80021b4:	d405      	bmi.n	80021c2 <_vfiprintf_r+0x2a>
 80021b6:	89ab      	ldrh	r3, [r5, #12]
 80021b8:	059a      	lsls	r2, r3, #22
 80021ba:	d402      	bmi.n	80021c2 <_vfiprintf_r+0x2a>
 80021bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80021be:	f7ff fec8 	bl	8001f52 <__retarget_lock_acquire_recursive>
 80021c2:	89ab      	ldrh	r3, [r5, #12]
 80021c4:	071b      	lsls	r3, r3, #28
 80021c6:	d501      	bpl.n	80021cc <_vfiprintf_r+0x34>
 80021c8:	692b      	ldr	r3, [r5, #16]
 80021ca:	b99b      	cbnz	r3, 80021f4 <_vfiprintf_r+0x5c>
 80021cc:	4629      	mov	r1, r5
 80021ce:	4630      	mov	r0, r6
 80021d0:	f000 fba0 	bl	8002914 <__swsetup_r>
 80021d4:	b170      	cbz	r0, 80021f4 <_vfiprintf_r+0x5c>
 80021d6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80021d8:	07dc      	lsls	r4, r3, #31
 80021da:	d504      	bpl.n	80021e6 <_vfiprintf_r+0x4e>
 80021dc:	f04f 30ff 	mov.w	r0, #4294967295
 80021e0:	b01d      	add	sp, #116	@ 0x74
 80021e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80021e6:	89ab      	ldrh	r3, [r5, #12]
 80021e8:	0598      	lsls	r0, r3, #22
 80021ea:	d4f7      	bmi.n	80021dc <_vfiprintf_r+0x44>
 80021ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80021ee:	f7ff feb1 	bl	8001f54 <__retarget_lock_release_recursive>
 80021f2:	e7f3      	b.n	80021dc <_vfiprintf_r+0x44>
 80021f4:	2300      	movs	r3, #0
 80021f6:	9309      	str	r3, [sp, #36]	@ 0x24
 80021f8:	2320      	movs	r3, #32
 80021fa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80021fe:	f8cd 800c 	str.w	r8, [sp, #12]
 8002202:	2330      	movs	r3, #48	@ 0x30
 8002204:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80023b4 <_vfiprintf_r+0x21c>
 8002208:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800220c:	f04f 0901 	mov.w	r9, #1
 8002210:	4623      	mov	r3, r4
 8002212:	469a      	mov	sl, r3
 8002214:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002218:	b10a      	cbz	r2, 800221e <_vfiprintf_r+0x86>
 800221a:	2a25      	cmp	r2, #37	@ 0x25
 800221c:	d1f9      	bne.n	8002212 <_vfiprintf_r+0x7a>
 800221e:	ebba 0b04 	subs.w	fp, sl, r4
 8002222:	d00b      	beq.n	800223c <_vfiprintf_r+0xa4>
 8002224:	465b      	mov	r3, fp
 8002226:	4622      	mov	r2, r4
 8002228:	4629      	mov	r1, r5
 800222a:	4630      	mov	r0, r6
 800222c:	f7ff ffa1 	bl	8002172 <__sfputs_r>
 8002230:	3001      	adds	r0, #1
 8002232:	f000 80a7 	beq.w	8002384 <_vfiprintf_r+0x1ec>
 8002236:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002238:	445a      	add	r2, fp
 800223a:	9209      	str	r2, [sp, #36]	@ 0x24
 800223c:	f89a 3000 	ldrb.w	r3, [sl]
 8002240:	2b00      	cmp	r3, #0
 8002242:	f000 809f 	beq.w	8002384 <_vfiprintf_r+0x1ec>
 8002246:	2300      	movs	r3, #0
 8002248:	f04f 32ff 	mov.w	r2, #4294967295
 800224c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002250:	f10a 0a01 	add.w	sl, sl, #1
 8002254:	9304      	str	r3, [sp, #16]
 8002256:	9307      	str	r3, [sp, #28]
 8002258:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800225c:	931a      	str	r3, [sp, #104]	@ 0x68
 800225e:	4654      	mov	r4, sl
 8002260:	2205      	movs	r2, #5
 8002262:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002266:	4853      	ldr	r0, [pc, #332]	@ (80023b4 <_vfiprintf_r+0x21c>)
 8002268:	f7fd ffd2 	bl	8000210 <memchr>
 800226c:	9a04      	ldr	r2, [sp, #16]
 800226e:	b9d8      	cbnz	r0, 80022a8 <_vfiprintf_r+0x110>
 8002270:	06d1      	lsls	r1, r2, #27
 8002272:	bf44      	itt	mi
 8002274:	2320      	movmi	r3, #32
 8002276:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800227a:	0713      	lsls	r3, r2, #28
 800227c:	bf44      	itt	mi
 800227e:	232b      	movmi	r3, #43	@ 0x2b
 8002280:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002284:	f89a 3000 	ldrb.w	r3, [sl]
 8002288:	2b2a      	cmp	r3, #42	@ 0x2a
 800228a:	d015      	beq.n	80022b8 <_vfiprintf_r+0x120>
 800228c:	9a07      	ldr	r2, [sp, #28]
 800228e:	4654      	mov	r4, sl
 8002290:	2000      	movs	r0, #0
 8002292:	f04f 0c0a 	mov.w	ip, #10
 8002296:	4621      	mov	r1, r4
 8002298:	f811 3b01 	ldrb.w	r3, [r1], #1
 800229c:	3b30      	subs	r3, #48	@ 0x30
 800229e:	2b09      	cmp	r3, #9
 80022a0:	d94b      	bls.n	800233a <_vfiprintf_r+0x1a2>
 80022a2:	b1b0      	cbz	r0, 80022d2 <_vfiprintf_r+0x13a>
 80022a4:	9207      	str	r2, [sp, #28]
 80022a6:	e014      	b.n	80022d2 <_vfiprintf_r+0x13a>
 80022a8:	eba0 0308 	sub.w	r3, r0, r8
 80022ac:	fa09 f303 	lsl.w	r3, r9, r3
 80022b0:	4313      	orrs	r3, r2
 80022b2:	9304      	str	r3, [sp, #16]
 80022b4:	46a2      	mov	sl, r4
 80022b6:	e7d2      	b.n	800225e <_vfiprintf_r+0xc6>
 80022b8:	9b03      	ldr	r3, [sp, #12]
 80022ba:	1d19      	adds	r1, r3, #4
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	9103      	str	r1, [sp, #12]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	bfbb      	ittet	lt
 80022c4:	425b      	neglt	r3, r3
 80022c6:	f042 0202 	orrlt.w	r2, r2, #2
 80022ca:	9307      	strge	r3, [sp, #28]
 80022cc:	9307      	strlt	r3, [sp, #28]
 80022ce:	bfb8      	it	lt
 80022d0:	9204      	strlt	r2, [sp, #16]
 80022d2:	7823      	ldrb	r3, [r4, #0]
 80022d4:	2b2e      	cmp	r3, #46	@ 0x2e
 80022d6:	d10a      	bne.n	80022ee <_vfiprintf_r+0x156>
 80022d8:	7863      	ldrb	r3, [r4, #1]
 80022da:	2b2a      	cmp	r3, #42	@ 0x2a
 80022dc:	d132      	bne.n	8002344 <_vfiprintf_r+0x1ac>
 80022de:	9b03      	ldr	r3, [sp, #12]
 80022e0:	1d1a      	adds	r2, r3, #4
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	9203      	str	r2, [sp, #12]
 80022e6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80022ea:	3402      	adds	r4, #2
 80022ec:	9305      	str	r3, [sp, #20]
 80022ee:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80023b8 <_vfiprintf_r+0x220>
 80022f2:	7821      	ldrb	r1, [r4, #0]
 80022f4:	2203      	movs	r2, #3
 80022f6:	4650      	mov	r0, sl
 80022f8:	f7fd ff8a 	bl	8000210 <memchr>
 80022fc:	b138      	cbz	r0, 800230e <_vfiprintf_r+0x176>
 80022fe:	9b04      	ldr	r3, [sp, #16]
 8002300:	eba0 000a 	sub.w	r0, r0, sl
 8002304:	2240      	movs	r2, #64	@ 0x40
 8002306:	4082      	lsls	r2, r0
 8002308:	4313      	orrs	r3, r2
 800230a:	3401      	adds	r4, #1
 800230c:	9304      	str	r3, [sp, #16]
 800230e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002312:	482a      	ldr	r0, [pc, #168]	@ (80023bc <_vfiprintf_r+0x224>)
 8002314:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002318:	2206      	movs	r2, #6
 800231a:	f7fd ff79 	bl	8000210 <memchr>
 800231e:	2800      	cmp	r0, #0
 8002320:	d03f      	beq.n	80023a2 <_vfiprintf_r+0x20a>
 8002322:	4b27      	ldr	r3, [pc, #156]	@ (80023c0 <_vfiprintf_r+0x228>)
 8002324:	bb1b      	cbnz	r3, 800236e <_vfiprintf_r+0x1d6>
 8002326:	9b03      	ldr	r3, [sp, #12]
 8002328:	3307      	adds	r3, #7
 800232a:	f023 0307 	bic.w	r3, r3, #7
 800232e:	3308      	adds	r3, #8
 8002330:	9303      	str	r3, [sp, #12]
 8002332:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002334:	443b      	add	r3, r7
 8002336:	9309      	str	r3, [sp, #36]	@ 0x24
 8002338:	e76a      	b.n	8002210 <_vfiprintf_r+0x78>
 800233a:	fb0c 3202 	mla	r2, ip, r2, r3
 800233e:	460c      	mov	r4, r1
 8002340:	2001      	movs	r0, #1
 8002342:	e7a8      	b.n	8002296 <_vfiprintf_r+0xfe>
 8002344:	2300      	movs	r3, #0
 8002346:	3401      	adds	r4, #1
 8002348:	9305      	str	r3, [sp, #20]
 800234a:	4619      	mov	r1, r3
 800234c:	f04f 0c0a 	mov.w	ip, #10
 8002350:	4620      	mov	r0, r4
 8002352:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002356:	3a30      	subs	r2, #48	@ 0x30
 8002358:	2a09      	cmp	r2, #9
 800235a:	d903      	bls.n	8002364 <_vfiprintf_r+0x1cc>
 800235c:	2b00      	cmp	r3, #0
 800235e:	d0c6      	beq.n	80022ee <_vfiprintf_r+0x156>
 8002360:	9105      	str	r1, [sp, #20]
 8002362:	e7c4      	b.n	80022ee <_vfiprintf_r+0x156>
 8002364:	fb0c 2101 	mla	r1, ip, r1, r2
 8002368:	4604      	mov	r4, r0
 800236a:	2301      	movs	r3, #1
 800236c:	e7f0      	b.n	8002350 <_vfiprintf_r+0x1b8>
 800236e:	ab03      	add	r3, sp, #12
 8002370:	9300      	str	r3, [sp, #0]
 8002372:	462a      	mov	r2, r5
 8002374:	4b13      	ldr	r3, [pc, #76]	@ (80023c4 <_vfiprintf_r+0x22c>)
 8002376:	a904      	add	r1, sp, #16
 8002378:	4630      	mov	r0, r6
 800237a:	f3af 8000 	nop.w
 800237e:	4607      	mov	r7, r0
 8002380:	1c78      	adds	r0, r7, #1
 8002382:	d1d6      	bne.n	8002332 <_vfiprintf_r+0x19a>
 8002384:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002386:	07d9      	lsls	r1, r3, #31
 8002388:	d405      	bmi.n	8002396 <_vfiprintf_r+0x1fe>
 800238a:	89ab      	ldrh	r3, [r5, #12]
 800238c:	059a      	lsls	r2, r3, #22
 800238e:	d402      	bmi.n	8002396 <_vfiprintf_r+0x1fe>
 8002390:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002392:	f7ff fddf 	bl	8001f54 <__retarget_lock_release_recursive>
 8002396:	89ab      	ldrh	r3, [r5, #12]
 8002398:	065b      	lsls	r3, r3, #25
 800239a:	f53f af1f 	bmi.w	80021dc <_vfiprintf_r+0x44>
 800239e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80023a0:	e71e      	b.n	80021e0 <_vfiprintf_r+0x48>
 80023a2:	ab03      	add	r3, sp, #12
 80023a4:	9300      	str	r3, [sp, #0]
 80023a6:	462a      	mov	r2, r5
 80023a8:	4b06      	ldr	r3, [pc, #24]	@ (80023c4 <_vfiprintf_r+0x22c>)
 80023aa:	a904      	add	r1, sp, #16
 80023ac:	4630      	mov	r0, r6
 80023ae:	f000 f879 	bl	80024a4 <_printf_i>
 80023b2:	e7e4      	b.n	800237e <_vfiprintf_r+0x1e6>
 80023b4:	08002b11 	.word	0x08002b11
 80023b8:	08002b17 	.word	0x08002b17
 80023bc:	08002b1b 	.word	0x08002b1b
 80023c0:	00000000 	.word	0x00000000
 80023c4:	08002173 	.word	0x08002173

080023c8 <_printf_common>:
 80023c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80023cc:	4616      	mov	r6, r2
 80023ce:	4698      	mov	r8, r3
 80023d0:	688a      	ldr	r2, [r1, #8]
 80023d2:	690b      	ldr	r3, [r1, #16]
 80023d4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80023d8:	4293      	cmp	r3, r2
 80023da:	bfb8      	it	lt
 80023dc:	4613      	movlt	r3, r2
 80023de:	6033      	str	r3, [r6, #0]
 80023e0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80023e4:	4607      	mov	r7, r0
 80023e6:	460c      	mov	r4, r1
 80023e8:	b10a      	cbz	r2, 80023ee <_printf_common+0x26>
 80023ea:	3301      	adds	r3, #1
 80023ec:	6033      	str	r3, [r6, #0]
 80023ee:	6823      	ldr	r3, [r4, #0]
 80023f0:	0699      	lsls	r1, r3, #26
 80023f2:	bf42      	ittt	mi
 80023f4:	6833      	ldrmi	r3, [r6, #0]
 80023f6:	3302      	addmi	r3, #2
 80023f8:	6033      	strmi	r3, [r6, #0]
 80023fa:	6825      	ldr	r5, [r4, #0]
 80023fc:	f015 0506 	ands.w	r5, r5, #6
 8002400:	d106      	bne.n	8002410 <_printf_common+0x48>
 8002402:	f104 0a19 	add.w	sl, r4, #25
 8002406:	68e3      	ldr	r3, [r4, #12]
 8002408:	6832      	ldr	r2, [r6, #0]
 800240a:	1a9b      	subs	r3, r3, r2
 800240c:	42ab      	cmp	r3, r5
 800240e:	dc26      	bgt.n	800245e <_printf_common+0x96>
 8002410:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002414:	6822      	ldr	r2, [r4, #0]
 8002416:	3b00      	subs	r3, #0
 8002418:	bf18      	it	ne
 800241a:	2301      	movne	r3, #1
 800241c:	0692      	lsls	r2, r2, #26
 800241e:	d42b      	bmi.n	8002478 <_printf_common+0xb0>
 8002420:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002424:	4641      	mov	r1, r8
 8002426:	4638      	mov	r0, r7
 8002428:	47c8      	blx	r9
 800242a:	3001      	adds	r0, #1
 800242c:	d01e      	beq.n	800246c <_printf_common+0xa4>
 800242e:	6823      	ldr	r3, [r4, #0]
 8002430:	6922      	ldr	r2, [r4, #16]
 8002432:	f003 0306 	and.w	r3, r3, #6
 8002436:	2b04      	cmp	r3, #4
 8002438:	bf02      	ittt	eq
 800243a:	68e5      	ldreq	r5, [r4, #12]
 800243c:	6833      	ldreq	r3, [r6, #0]
 800243e:	1aed      	subeq	r5, r5, r3
 8002440:	68a3      	ldr	r3, [r4, #8]
 8002442:	bf0c      	ite	eq
 8002444:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002448:	2500      	movne	r5, #0
 800244a:	4293      	cmp	r3, r2
 800244c:	bfc4      	itt	gt
 800244e:	1a9b      	subgt	r3, r3, r2
 8002450:	18ed      	addgt	r5, r5, r3
 8002452:	2600      	movs	r6, #0
 8002454:	341a      	adds	r4, #26
 8002456:	42b5      	cmp	r5, r6
 8002458:	d11a      	bne.n	8002490 <_printf_common+0xc8>
 800245a:	2000      	movs	r0, #0
 800245c:	e008      	b.n	8002470 <_printf_common+0xa8>
 800245e:	2301      	movs	r3, #1
 8002460:	4652      	mov	r2, sl
 8002462:	4641      	mov	r1, r8
 8002464:	4638      	mov	r0, r7
 8002466:	47c8      	blx	r9
 8002468:	3001      	adds	r0, #1
 800246a:	d103      	bne.n	8002474 <_printf_common+0xac>
 800246c:	f04f 30ff 	mov.w	r0, #4294967295
 8002470:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002474:	3501      	adds	r5, #1
 8002476:	e7c6      	b.n	8002406 <_printf_common+0x3e>
 8002478:	18e1      	adds	r1, r4, r3
 800247a:	1c5a      	adds	r2, r3, #1
 800247c:	2030      	movs	r0, #48	@ 0x30
 800247e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002482:	4422      	add	r2, r4
 8002484:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002488:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800248c:	3302      	adds	r3, #2
 800248e:	e7c7      	b.n	8002420 <_printf_common+0x58>
 8002490:	2301      	movs	r3, #1
 8002492:	4622      	mov	r2, r4
 8002494:	4641      	mov	r1, r8
 8002496:	4638      	mov	r0, r7
 8002498:	47c8      	blx	r9
 800249a:	3001      	adds	r0, #1
 800249c:	d0e6      	beq.n	800246c <_printf_common+0xa4>
 800249e:	3601      	adds	r6, #1
 80024a0:	e7d9      	b.n	8002456 <_printf_common+0x8e>
	...

080024a4 <_printf_i>:
 80024a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80024a8:	7e0f      	ldrb	r7, [r1, #24]
 80024aa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80024ac:	2f78      	cmp	r7, #120	@ 0x78
 80024ae:	4691      	mov	r9, r2
 80024b0:	4680      	mov	r8, r0
 80024b2:	460c      	mov	r4, r1
 80024b4:	469a      	mov	sl, r3
 80024b6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80024ba:	d807      	bhi.n	80024cc <_printf_i+0x28>
 80024bc:	2f62      	cmp	r7, #98	@ 0x62
 80024be:	d80a      	bhi.n	80024d6 <_printf_i+0x32>
 80024c0:	2f00      	cmp	r7, #0
 80024c2:	f000 80d1 	beq.w	8002668 <_printf_i+0x1c4>
 80024c6:	2f58      	cmp	r7, #88	@ 0x58
 80024c8:	f000 80b8 	beq.w	800263c <_printf_i+0x198>
 80024cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80024d0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80024d4:	e03a      	b.n	800254c <_printf_i+0xa8>
 80024d6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80024da:	2b15      	cmp	r3, #21
 80024dc:	d8f6      	bhi.n	80024cc <_printf_i+0x28>
 80024de:	a101      	add	r1, pc, #4	@ (adr r1, 80024e4 <_printf_i+0x40>)
 80024e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80024e4:	0800253d 	.word	0x0800253d
 80024e8:	08002551 	.word	0x08002551
 80024ec:	080024cd 	.word	0x080024cd
 80024f0:	080024cd 	.word	0x080024cd
 80024f4:	080024cd 	.word	0x080024cd
 80024f8:	080024cd 	.word	0x080024cd
 80024fc:	08002551 	.word	0x08002551
 8002500:	080024cd 	.word	0x080024cd
 8002504:	080024cd 	.word	0x080024cd
 8002508:	080024cd 	.word	0x080024cd
 800250c:	080024cd 	.word	0x080024cd
 8002510:	0800264f 	.word	0x0800264f
 8002514:	0800257b 	.word	0x0800257b
 8002518:	08002609 	.word	0x08002609
 800251c:	080024cd 	.word	0x080024cd
 8002520:	080024cd 	.word	0x080024cd
 8002524:	08002671 	.word	0x08002671
 8002528:	080024cd 	.word	0x080024cd
 800252c:	0800257b 	.word	0x0800257b
 8002530:	080024cd 	.word	0x080024cd
 8002534:	080024cd 	.word	0x080024cd
 8002538:	08002611 	.word	0x08002611
 800253c:	6833      	ldr	r3, [r6, #0]
 800253e:	1d1a      	adds	r2, r3, #4
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	6032      	str	r2, [r6, #0]
 8002544:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002548:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800254c:	2301      	movs	r3, #1
 800254e:	e09c      	b.n	800268a <_printf_i+0x1e6>
 8002550:	6833      	ldr	r3, [r6, #0]
 8002552:	6820      	ldr	r0, [r4, #0]
 8002554:	1d19      	adds	r1, r3, #4
 8002556:	6031      	str	r1, [r6, #0]
 8002558:	0606      	lsls	r6, r0, #24
 800255a:	d501      	bpl.n	8002560 <_printf_i+0xbc>
 800255c:	681d      	ldr	r5, [r3, #0]
 800255e:	e003      	b.n	8002568 <_printf_i+0xc4>
 8002560:	0645      	lsls	r5, r0, #25
 8002562:	d5fb      	bpl.n	800255c <_printf_i+0xb8>
 8002564:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002568:	2d00      	cmp	r5, #0
 800256a:	da03      	bge.n	8002574 <_printf_i+0xd0>
 800256c:	232d      	movs	r3, #45	@ 0x2d
 800256e:	426d      	negs	r5, r5
 8002570:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002574:	4858      	ldr	r0, [pc, #352]	@ (80026d8 <_printf_i+0x234>)
 8002576:	230a      	movs	r3, #10
 8002578:	e011      	b.n	800259e <_printf_i+0xfa>
 800257a:	6821      	ldr	r1, [r4, #0]
 800257c:	6833      	ldr	r3, [r6, #0]
 800257e:	0608      	lsls	r0, r1, #24
 8002580:	f853 5b04 	ldr.w	r5, [r3], #4
 8002584:	d402      	bmi.n	800258c <_printf_i+0xe8>
 8002586:	0649      	lsls	r1, r1, #25
 8002588:	bf48      	it	mi
 800258a:	b2ad      	uxthmi	r5, r5
 800258c:	2f6f      	cmp	r7, #111	@ 0x6f
 800258e:	4852      	ldr	r0, [pc, #328]	@ (80026d8 <_printf_i+0x234>)
 8002590:	6033      	str	r3, [r6, #0]
 8002592:	bf14      	ite	ne
 8002594:	230a      	movne	r3, #10
 8002596:	2308      	moveq	r3, #8
 8002598:	2100      	movs	r1, #0
 800259a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800259e:	6866      	ldr	r6, [r4, #4]
 80025a0:	60a6      	str	r6, [r4, #8]
 80025a2:	2e00      	cmp	r6, #0
 80025a4:	db05      	blt.n	80025b2 <_printf_i+0x10e>
 80025a6:	6821      	ldr	r1, [r4, #0]
 80025a8:	432e      	orrs	r6, r5
 80025aa:	f021 0104 	bic.w	r1, r1, #4
 80025ae:	6021      	str	r1, [r4, #0]
 80025b0:	d04b      	beq.n	800264a <_printf_i+0x1a6>
 80025b2:	4616      	mov	r6, r2
 80025b4:	fbb5 f1f3 	udiv	r1, r5, r3
 80025b8:	fb03 5711 	mls	r7, r3, r1, r5
 80025bc:	5dc7      	ldrb	r7, [r0, r7]
 80025be:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80025c2:	462f      	mov	r7, r5
 80025c4:	42bb      	cmp	r3, r7
 80025c6:	460d      	mov	r5, r1
 80025c8:	d9f4      	bls.n	80025b4 <_printf_i+0x110>
 80025ca:	2b08      	cmp	r3, #8
 80025cc:	d10b      	bne.n	80025e6 <_printf_i+0x142>
 80025ce:	6823      	ldr	r3, [r4, #0]
 80025d0:	07df      	lsls	r7, r3, #31
 80025d2:	d508      	bpl.n	80025e6 <_printf_i+0x142>
 80025d4:	6923      	ldr	r3, [r4, #16]
 80025d6:	6861      	ldr	r1, [r4, #4]
 80025d8:	4299      	cmp	r1, r3
 80025da:	bfde      	ittt	le
 80025dc:	2330      	movle	r3, #48	@ 0x30
 80025de:	f806 3c01 	strble.w	r3, [r6, #-1]
 80025e2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80025e6:	1b92      	subs	r2, r2, r6
 80025e8:	6122      	str	r2, [r4, #16]
 80025ea:	f8cd a000 	str.w	sl, [sp]
 80025ee:	464b      	mov	r3, r9
 80025f0:	aa03      	add	r2, sp, #12
 80025f2:	4621      	mov	r1, r4
 80025f4:	4640      	mov	r0, r8
 80025f6:	f7ff fee7 	bl	80023c8 <_printf_common>
 80025fa:	3001      	adds	r0, #1
 80025fc:	d14a      	bne.n	8002694 <_printf_i+0x1f0>
 80025fe:	f04f 30ff 	mov.w	r0, #4294967295
 8002602:	b004      	add	sp, #16
 8002604:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002608:	6823      	ldr	r3, [r4, #0]
 800260a:	f043 0320 	orr.w	r3, r3, #32
 800260e:	6023      	str	r3, [r4, #0]
 8002610:	4832      	ldr	r0, [pc, #200]	@ (80026dc <_printf_i+0x238>)
 8002612:	2778      	movs	r7, #120	@ 0x78
 8002614:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002618:	6823      	ldr	r3, [r4, #0]
 800261a:	6831      	ldr	r1, [r6, #0]
 800261c:	061f      	lsls	r7, r3, #24
 800261e:	f851 5b04 	ldr.w	r5, [r1], #4
 8002622:	d402      	bmi.n	800262a <_printf_i+0x186>
 8002624:	065f      	lsls	r7, r3, #25
 8002626:	bf48      	it	mi
 8002628:	b2ad      	uxthmi	r5, r5
 800262a:	6031      	str	r1, [r6, #0]
 800262c:	07d9      	lsls	r1, r3, #31
 800262e:	bf44      	itt	mi
 8002630:	f043 0320 	orrmi.w	r3, r3, #32
 8002634:	6023      	strmi	r3, [r4, #0]
 8002636:	b11d      	cbz	r5, 8002640 <_printf_i+0x19c>
 8002638:	2310      	movs	r3, #16
 800263a:	e7ad      	b.n	8002598 <_printf_i+0xf4>
 800263c:	4826      	ldr	r0, [pc, #152]	@ (80026d8 <_printf_i+0x234>)
 800263e:	e7e9      	b.n	8002614 <_printf_i+0x170>
 8002640:	6823      	ldr	r3, [r4, #0]
 8002642:	f023 0320 	bic.w	r3, r3, #32
 8002646:	6023      	str	r3, [r4, #0]
 8002648:	e7f6      	b.n	8002638 <_printf_i+0x194>
 800264a:	4616      	mov	r6, r2
 800264c:	e7bd      	b.n	80025ca <_printf_i+0x126>
 800264e:	6833      	ldr	r3, [r6, #0]
 8002650:	6825      	ldr	r5, [r4, #0]
 8002652:	6961      	ldr	r1, [r4, #20]
 8002654:	1d18      	adds	r0, r3, #4
 8002656:	6030      	str	r0, [r6, #0]
 8002658:	062e      	lsls	r6, r5, #24
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	d501      	bpl.n	8002662 <_printf_i+0x1be>
 800265e:	6019      	str	r1, [r3, #0]
 8002660:	e002      	b.n	8002668 <_printf_i+0x1c4>
 8002662:	0668      	lsls	r0, r5, #25
 8002664:	d5fb      	bpl.n	800265e <_printf_i+0x1ba>
 8002666:	8019      	strh	r1, [r3, #0]
 8002668:	2300      	movs	r3, #0
 800266a:	6123      	str	r3, [r4, #16]
 800266c:	4616      	mov	r6, r2
 800266e:	e7bc      	b.n	80025ea <_printf_i+0x146>
 8002670:	6833      	ldr	r3, [r6, #0]
 8002672:	1d1a      	adds	r2, r3, #4
 8002674:	6032      	str	r2, [r6, #0]
 8002676:	681e      	ldr	r6, [r3, #0]
 8002678:	6862      	ldr	r2, [r4, #4]
 800267a:	2100      	movs	r1, #0
 800267c:	4630      	mov	r0, r6
 800267e:	f7fd fdc7 	bl	8000210 <memchr>
 8002682:	b108      	cbz	r0, 8002688 <_printf_i+0x1e4>
 8002684:	1b80      	subs	r0, r0, r6
 8002686:	6060      	str	r0, [r4, #4]
 8002688:	6863      	ldr	r3, [r4, #4]
 800268a:	6123      	str	r3, [r4, #16]
 800268c:	2300      	movs	r3, #0
 800268e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002692:	e7aa      	b.n	80025ea <_printf_i+0x146>
 8002694:	6923      	ldr	r3, [r4, #16]
 8002696:	4632      	mov	r2, r6
 8002698:	4649      	mov	r1, r9
 800269a:	4640      	mov	r0, r8
 800269c:	47d0      	blx	sl
 800269e:	3001      	adds	r0, #1
 80026a0:	d0ad      	beq.n	80025fe <_printf_i+0x15a>
 80026a2:	6823      	ldr	r3, [r4, #0]
 80026a4:	079b      	lsls	r3, r3, #30
 80026a6:	d413      	bmi.n	80026d0 <_printf_i+0x22c>
 80026a8:	68e0      	ldr	r0, [r4, #12]
 80026aa:	9b03      	ldr	r3, [sp, #12]
 80026ac:	4298      	cmp	r0, r3
 80026ae:	bfb8      	it	lt
 80026b0:	4618      	movlt	r0, r3
 80026b2:	e7a6      	b.n	8002602 <_printf_i+0x15e>
 80026b4:	2301      	movs	r3, #1
 80026b6:	4632      	mov	r2, r6
 80026b8:	4649      	mov	r1, r9
 80026ba:	4640      	mov	r0, r8
 80026bc:	47d0      	blx	sl
 80026be:	3001      	adds	r0, #1
 80026c0:	d09d      	beq.n	80025fe <_printf_i+0x15a>
 80026c2:	3501      	adds	r5, #1
 80026c4:	68e3      	ldr	r3, [r4, #12]
 80026c6:	9903      	ldr	r1, [sp, #12]
 80026c8:	1a5b      	subs	r3, r3, r1
 80026ca:	42ab      	cmp	r3, r5
 80026cc:	dcf2      	bgt.n	80026b4 <_printf_i+0x210>
 80026ce:	e7eb      	b.n	80026a8 <_printf_i+0x204>
 80026d0:	2500      	movs	r5, #0
 80026d2:	f104 0619 	add.w	r6, r4, #25
 80026d6:	e7f5      	b.n	80026c4 <_printf_i+0x220>
 80026d8:	08002b22 	.word	0x08002b22
 80026dc:	08002b33 	.word	0x08002b33

080026e0 <__sflush_r>:
 80026e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80026e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026e6:	0716      	lsls	r6, r2, #28
 80026e8:	4605      	mov	r5, r0
 80026ea:	460c      	mov	r4, r1
 80026ec:	d454      	bmi.n	8002798 <__sflush_r+0xb8>
 80026ee:	684b      	ldr	r3, [r1, #4]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	dc02      	bgt.n	80026fa <__sflush_r+0x1a>
 80026f4:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	dd48      	ble.n	800278c <__sflush_r+0xac>
 80026fa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80026fc:	2e00      	cmp	r6, #0
 80026fe:	d045      	beq.n	800278c <__sflush_r+0xac>
 8002700:	2300      	movs	r3, #0
 8002702:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8002706:	682f      	ldr	r7, [r5, #0]
 8002708:	6a21      	ldr	r1, [r4, #32]
 800270a:	602b      	str	r3, [r5, #0]
 800270c:	d030      	beq.n	8002770 <__sflush_r+0x90>
 800270e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8002710:	89a3      	ldrh	r3, [r4, #12]
 8002712:	0759      	lsls	r1, r3, #29
 8002714:	d505      	bpl.n	8002722 <__sflush_r+0x42>
 8002716:	6863      	ldr	r3, [r4, #4]
 8002718:	1ad2      	subs	r2, r2, r3
 800271a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800271c:	b10b      	cbz	r3, 8002722 <__sflush_r+0x42>
 800271e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002720:	1ad2      	subs	r2, r2, r3
 8002722:	2300      	movs	r3, #0
 8002724:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002726:	6a21      	ldr	r1, [r4, #32]
 8002728:	4628      	mov	r0, r5
 800272a:	47b0      	blx	r6
 800272c:	1c43      	adds	r3, r0, #1
 800272e:	89a3      	ldrh	r3, [r4, #12]
 8002730:	d106      	bne.n	8002740 <__sflush_r+0x60>
 8002732:	6829      	ldr	r1, [r5, #0]
 8002734:	291d      	cmp	r1, #29
 8002736:	d82b      	bhi.n	8002790 <__sflush_r+0xb0>
 8002738:	4a28      	ldr	r2, [pc, #160]	@ (80027dc <__sflush_r+0xfc>)
 800273a:	40ca      	lsrs	r2, r1
 800273c:	07d6      	lsls	r6, r2, #31
 800273e:	d527      	bpl.n	8002790 <__sflush_r+0xb0>
 8002740:	2200      	movs	r2, #0
 8002742:	6062      	str	r2, [r4, #4]
 8002744:	04d9      	lsls	r1, r3, #19
 8002746:	6922      	ldr	r2, [r4, #16]
 8002748:	6022      	str	r2, [r4, #0]
 800274a:	d504      	bpl.n	8002756 <__sflush_r+0x76>
 800274c:	1c42      	adds	r2, r0, #1
 800274e:	d101      	bne.n	8002754 <__sflush_r+0x74>
 8002750:	682b      	ldr	r3, [r5, #0]
 8002752:	b903      	cbnz	r3, 8002756 <__sflush_r+0x76>
 8002754:	6560      	str	r0, [r4, #84]	@ 0x54
 8002756:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002758:	602f      	str	r7, [r5, #0]
 800275a:	b1b9      	cbz	r1, 800278c <__sflush_r+0xac>
 800275c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002760:	4299      	cmp	r1, r3
 8002762:	d002      	beq.n	800276a <__sflush_r+0x8a>
 8002764:	4628      	mov	r0, r5
 8002766:	f7ff fbf7 	bl	8001f58 <_free_r>
 800276a:	2300      	movs	r3, #0
 800276c:	6363      	str	r3, [r4, #52]	@ 0x34
 800276e:	e00d      	b.n	800278c <__sflush_r+0xac>
 8002770:	2301      	movs	r3, #1
 8002772:	4628      	mov	r0, r5
 8002774:	47b0      	blx	r6
 8002776:	4602      	mov	r2, r0
 8002778:	1c50      	adds	r0, r2, #1
 800277a:	d1c9      	bne.n	8002710 <__sflush_r+0x30>
 800277c:	682b      	ldr	r3, [r5, #0]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d0c6      	beq.n	8002710 <__sflush_r+0x30>
 8002782:	2b1d      	cmp	r3, #29
 8002784:	d001      	beq.n	800278a <__sflush_r+0xaa>
 8002786:	2b16      	cmp	r3, #22
 8002788:	d11d      	bne.n	80027c6 <__sflush_r+0xe6>
 800278a:	602f      	str	r7, [r5, #0]
 800278c:	2000      	movs	r0, #0
 800278e:	e021      	b.n	80027d4 <__sflush_r+0xf4>
 8002790:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002794:	b21b      	sxth	r3, r3
 8002796:	e01a      	b.n	80027ce <__sflush_r+0xee>
 8002798:	690f      	ldr	r7, [r1, #16]
 800279a:	2f00      	cmp	r7, #0
 800279c:	d0f6      	beq.n	800278c <__sflush_r+0xac>
 800279e:	0793      	lsls	r3, r2, #30
 80027a0:	680e      	ldr	r6, [r1, #0]
 80027a2:	bf08      	it	eq
 80027a4:	694b      	ldreq	r3, [r1, #20]
 80027a6:	600f      	str	r7, [r1, #0]
 80027a8:	bf18      	it	ne
 80027aa:	2300      	movne	r3, #0
 80027ac:	1bf6      	subs	r6, r6, r7
 80027ae:	608b      	str	r3, [r1, #8]
 80027b0:	2e00      	cmp	r6, #0
 80027b2:	ddeb      	ble.n	800278c <__sflush_r+0xac>
 80027b4:	6a21      	ldr	r1, [r4, #32]
 80027b6:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80027ba:	4633      	mov	r3, r6
 80027bc:	463a      	mov	r2, r7
 80027be:	4628      	mov	r0, r5
 80027c0:	47e0      	blx	ip
 80027c2:	2800      	cmp	r0, #0
 80027c4:	dc07      	bgt.n	80027d6 <__sflush_r+0xf6>
 80027c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80027ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80027ce:	81a3      	strh	r3, [r4, #12]
 80027d0:	f04f 30ff 	mov.w	r0, #4294967295
 80027d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80027d6:	4407      	add	r7, r0
 80027d8:	1a36      	subs	r6, r6, r0
 80027da:	e7e9      	b.n	80027b0 <__sflush_r+0xd0>
 80027dc:	20400001 	.word	0x20400001

080027e0 <_fflush_r>:
 80027e0:	b538      	push	{r3, r4, r5, lr}
 80027e2:	690b      	ldr	r3, [r1, #16]
 80027e4:	4605      	mov	r5, r0
 80027e6:	460c      	mov	r4, r1
 80027e8:	b913      	cbnz	r3, 80027f0 <_fflush_r+0x10>
 80027ea:	2500      	movs	r5, #0
 80027ec:	4628      	mov	r0, r5
 80027ee:	bd38      	pop	{r3, r4, r5, pc}
 80027f0:	b118      	cbz	r0, 80027fa <_fflush_r+0x1a>
 80027f2:	6a03      	ldr	r3, [r0, #32]
 80027f4:	b90b      	cbnz	r3, 80027fa <_fflush_r+0x1a>
 80027f6:	f7ff fa9f 	bl	8001d38 <__sinit>
 80027fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d0f3      	beq.n	80027ea <_fflush_r+0xa>
 8002802:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8002804:	07d0      	lsls	r0, r2, #31
 8002806:	d404      	bmi.n	8002812 <_fflush_r+0x32>
 8002808:	0599      	lsls	r1, r3, #22
 800280a:	d402      	bmi.n	8002812 <_fflush_r+0x32>
 800280c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800280e:	f7ff fba0 	bl	8001f52 <__retarget_lock_acquire_recursive>
 8002812:	4628      	mov	r0, r5
 8002814:	4621      	mov	r1, r4
 8002816:	f7ff ff63 	bl	80026e0 <__sflush_r>
 800281a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800281c:	07da      	lsls	r2, r3, #31
 800281e:	4605      	mov	r5, r0
 8002820:	d4e4      	bmi.n	80027ec <_fflush_r+0xc>
 8002822:	89a3      	ldrh	r3, [r4, #12]
 8002824:	059b      	lsls	r3, r3, #22
 8002826:	d4e1      	bmi.n	80027ec <_fflush_r+0xc>
 8002828:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800282a:	f7ff fb93 	bl	8001f54 <__retarget_lock_release_recursive>
 800282e:	e7dd      	b.n	80027ec <_fflush_r+0xc>

08002830 <_putc_r>:
 8002830:	b570      	push	{r4, r5, r6, lr}
 8002832:	460d      	mov	r5, r1
 8002834:	4614      	mov	r4, r2
 8002836:	4606      	mov	r6, r0
 8002838:	b118      	cbz	r0, 8002842 <_putc_r+0x12>
 800283a:	6a03      	ldr	r3, [r0, #32]
 800283c:	b90b      	cbnz	r3, 8002842 <_putc_r+0x12>
 800283e:	f7ff fa7b 	bl	8001d38 <__sinit>
 8002842:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002844:	07d8      	lsls	r0, r3, #31
 8002846:	d405      	bmi.n	8002854 <_putc_r+0x24>
 8002848:	89a3      	ldrh	r3, [r4, #12]
 800284a:	0599      	lsls	r1, r3, #22
 800284c:	d402      	bmi.n	8002854 <_putc_r+0x24>
 800284e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002850:	f7ff fb7f 	bl	8001f52 <__retarget_lock_acquire_recursive>
 8002854:	68a3      	ldr	r3, [r4, #8]
 8002856:	3b01      	subs	r3, #1
 8002858:	2b00      	cmp	r3, #0
 800285a:	60a3      	str	r3, [r4, #8]
 800285c:	da05      	bge.n	800286a <_putc_r+0x3a>
 800285e:	69a2      	ldr	r2, [r4, #24]
 8002860:	4293      	cmp	r3, r2
 8002862:	db12      	blt.n	800288a <_putc_r+0x5a>
 8002864:	b2eb      	uxtb	r3, r5
 8002866:	2b0a      	cmp	r3, #10
 8002868:	d00f      	beq.n	800288a <_putc_r+0x5a>
 800286a:	6823      	ldr	r3, [r4, #0]
 800286c:	1c5a      	adds	r2, r3, #1
 800286e:	6022      	str	r2, [r4, #0]
 8002870:	701d      	strb	r5, [r3, #0]
 8002872:	b2ed      	uxtb	r5, r5
 8002874:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002876:	07da      	lsls	r2, r3, #31
 8002878:	d405      	bmi.n	8002886 <_putc_r+0x56>
 800287a:	89a3      	ldrh	r3, [r4, #12]
 800287c:	059b      	lsls	r3, r3, #22
 800287e:	d402      	bmi.n	8002886 <_putc_r+0x56>
 8002880:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002882:	f7ff fb67 	bl	8001f54 <__retarget_lock_release_recursive>
 8002886:	4628      	mov	r0, r5
 8002888:	bd70      	pop	{r4, r5, r6, pc}
 800288a:	4629      	mov	r1, r5
 800288c:	4622      	mov	r2, r4
 800288e:	4630      	mov	r0, r6
 8002890:	f000 f802 	bl	8002898 <__swbuf_r>
 8002894:	4605      	mov	r5, r0
 8002896:	e7ed      	b.n	8002874 <_putc_r+0x44>

08002898 <__swbuf_r>:
 8002898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800289a:	460e      	mov	r6, r1
 800289c:	4614      	mov	r4, r2
 800289e:	4605      	mov	r5, r0
 80028a0:	b118      	cbz	r0, 80028aa <__swbuf_r+0x12>
 80028a2:	6a03      	ldr	r3, [r0, #32]
 80028a4:	b90b      	cbnz	r3, 80028aa <__swbuf_r+0x12>
 80028a6:	f7ff fa47 	bl	8001d38 <__sinit>
 80028aa:	69a3      	ldr	r3, [r4, #24]
 80028ac:	60a3      	str	r3, [r4, #8]
 80028ae:	89a3      	ldrh	r3, [r4, #12]
 80028b0:	071a      	lsls	r2, r3, #28
 80028b2:	d501      	bpl.n	80028b8 <__swbuf_r+0x20>
 80028b4:	6923      	ldr	r3, [r4, #16]
 80028b6:	b943      	cbnz	r3, 80028ca <__swbuf_r+0x32>
 80028b8:	4621      	mov	r1, r4
 80028ba:	4628      	mov	r0, r5
 80028bc:	f000 f82a 	bl	8002914 <__swsetup_r>
 80028c0:	b118      	cbz	r0, 80028ca <__swbuf_r+0x32>
 80028c2:	f04f 37ff 	mov.w	r7, #4294967295
 80028c6:	4638      	mov	r0, r7
 80028c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80028ca:	6823      	ldr	r3, [r4, #0]
 80028cc:	6922      	ldr	r2, [r4, #16]
 80028ce:	1a98      	subs	r0, r3, r2
 80028d0:	6963      	ldr	r3, [r4, #20]
 80028d2:	b2f6      	uxtb	r6, r6
 80028d4:	4283      	cmp	r3, r0
 80028d6:	4637      	mov	r7, r6
 80028d8:	dc05      	bgt.n	80028e6 <__swbuf_r+0x4e>
 80028da:	4621      	mov	r1, r4
 80028dc:	4628      	mov	r0, r5
 80028de:	f7ff ff7f 	bl	80027e0 <_fflush_r>
 80028e2:	2800      	cmp	r0, #0
 80028e4:	d1ed      	bne.n	80028c2 <__swbuf_r+0x2a>
 80028e6:	68a3      	ldr	r3, [r4, #8]
 80028e8:	3b01      	subs	r3, #1
 80028ea:	60a3      	str	r3, [r4, #8]
 80028ec:	6823      	ldr	r3, [r4, #0]
 80028ee:	1c5a      	adds	r2, r3, #1
 80028f0:	6022      	str	r2, [r4, #0]
 80028f2:	701e      	strb	r6, [r3, #0]
 80028f4:	6962      	ldr	r2, [r4, #20]
 80028f6:	1c43      	adds	r3, r0, #1
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d004      	beq.n	8002906 <__swbuf_r+0x6e>
 80028fc:	89a3      	ldrh	r3, [r4, #12]
 80028fe:	07db      	lsls	r3, r3, #31
 8002900:	d5e1      	bpl.n	80028c6 <__swbuf_r+0x2e>
 8002902:	2e0a      	cmp	r6, #10
 8002904:	d1df      	bne.n	80028c6 <__swbuf_r+0x2e>
 8002906:	4621      	mov	r1, r4
 8002908:	4628      	mov	r0, r5
 800290a:	f7ff ff69 	bl	80027e0 <_fflush_r>
 800290e:	2800      	cmp	r0, #0
 8002910:	d0d9      	beq.n	80028c6 <__swbuf_r+0x2e>
 8002912:	e7d6      	b.n	80028c2 <__swbuf_r+0x2a>

08002914 <__swsetup_r>:
 8002914:	b538      	push	{r3, r4, r5, lr}
 8002916:	4b29      	ldr	r3, [pc, #164]	@ (80029bc <__swsetup_r+0xa8>)
 8002918:	4605      	mov	r5, r0
 800291a:	6818      	ldr	r0, [r3, #0]
 800291c:	460c      	mov	r4, r1
 800291e:	b118      	cbz	r0, 8002928 <__swsetup_r+0x14>
 8002920:	6a03      	ldr	r3, [r0, #32]
 8002922:	b90b      	cbnz	r3, 8002928 <__swsetup_r+0x14>
 8002924:	f7ff fa08 	bl	8001d38 <__sinit>
 8002928:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800292c:	0719      	lsls	r1, r3, #28
 800292e:	d422      	bmi.n	8002976 <__swsetup_r+0x62>
 8002930:	06da      	lsls	r2, r3, #27
 8002932:	d407      	bmi.n	8002944 <__swsetup_r+0x30>
 8002934:	2209      	movs	r2, #9
 8002936:	602a      	str	r2, [r5, #0]
 8002938:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800293c:	81a3      	strh	r3, [r4, #12]
 800293e:	f04f 30ff 	mov.w	r0, #4294967295
 8002942:	e033      	b.n	80029ac <__swsetup_r+0x98>
 8002944:	0758      	lsls	r0, r3, #29
 8002946:	d512      	bpl.n	800296e <__swsetup_r+0x5a>
 8002948:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800294a:	b141      	cbz	r1, 800295e <__swsetup_r+0x4a>
 800294c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002950:	4299      	cmp	r1, r3
 8002952:	d002      	beq.n	800295a <__swsetup_r+0x46>
 8002954:	4628      	mov	r0, r5
 8002956:	f7ff faff 	bl	8001f58 <_free_r>
 800295a:	2300      	movs	r3, #0
 800295c:	6363      	str	r3, [r4, #52]	@ 0x34
 800295e:	89a3      	ldrh	r3, [r4, #12]
 8002960:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8002964:	81a3      	strh	r3, [r4, #12]
 8002966:	2300      	movs	r3, #0
 8002968:	6063      	str	r3, [r4, #4]
 800296a:	6923      	ldr	r3, [r4, #16]
 800296c:	6023      	str	r3, [r4, #0]
 800296e:	89a3      	ldrh	r3, [r4, #12]
 8002970:	f043 0308 	orr.w	r3, r3, #8
 8002974:	81a3      	strh	r3, [r4, #12]
 8002976:	6923      	ldr	r3, [r4, #16]
 8002978:	b94b      	cbnz	r3, 800298e <__swsetup_r+0x7a>
 800297a:	89a3      	ldrh	r3, [r4, #12]
 800297c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8002980:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002984:	d003      	beq.n	800298e <__swsetup_r+0x7a>
 8002986:	4621      	mov	r1, r4
 8002988:	4628      	mov	r0, r5
 800298a:	f000 f84f 	bl	8002a2c <__smakebuf_r>
 800298e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002992:	f013 0201 	ands.w	r2, r3, #1
 8002996:	d00a      	beq.n	80029ae <__swsetup_r+0x9a>
 8002998:	2200      	movs	r2, #0
 800299a:	60a2      	str	r2, [r4, #8]
 800299c:	6962      	ldr	r2, [r4, #20]
 800299e:	4252      	negs	r2, r2
 80029a0:	61a2      	str	r2, [r4, #24]
 80029a2:	6922      	ldr	r2, [r4, #16]
 80029a4:	b942      	cbnz	r2, 80029b8 <__swsetup_r+0xa4>
 80029a6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80029aa:	d1c5      	bne.n	8002938 <__swsetup_r+0x24>
 80029ac:	bd38      	pop	{r3, r4, r5, pc}
 80029ae:	0799      	lsls	r1, r3, #30
 80029b0:	bf58      	it	pl
 80029b2:	6962      	ldrpl	r2, [r4, #20]
 80029b4:	60a2      	str	r2, [r4, #8]
 80029b6:	e7f4      	b.n	80029a2 <__swsetup_r+0x8e>
 80029b8:	2000      	movs	r0, #0
 80029ba:	e7f7      	b.n	80029ac <__swsetup_r+0x98>
 80029bc:	20000010 	.word	0x20000010

080029c0 <_sbrk_r>:
 80029c0:	b538      	push	{r3, r4, r5, lr}
 80029c2:	4d06      	ldr	r5, [pc, #24]	@ (80029dc <_sbrk_r+0x1c>)
 80029c4:	2300      	movs	r3, #0
 80029c6:	4604      	mov	r4, r0
 80029c8:	4608      	mov	r0, r1
 80029ca:	602b      	str	r3, [r5, #0]
 80029cc:	f7ff f8c8 	bl	8001b60 <_sbrk>
 80029d0:	1c43      	adds	r3, r0, #1
 80029d2:	d102      	bne.n	80029da <_sbrk_r+0x1a>
 80029d4:	682b      	ldr	r3, [r5, #0]
 80029d6:	b103      	cbz	r3, 80029da <_sbrk_r+0x1a>
 80029d8:	6023      	str	r3, [r4, #0]
 80029da:	bd38      	pop	{r3, r4, r5, pc}
 80029dc:	200001ec 	.word	0x200001ec

080029e0 <__swhatbuf_r>:
 80029e0:	b570      	push	{r4, r5, r6, lr}
 80029e2:	460c      	mov	r4, r1
 80029e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80029e8:	2900      	cmp	r1, #0
 80029ea:	b096      	sub	sp, #88	@ 0x58
 80029ec:	4615      	mov	r5, r2
 80029ee:	461e      	mov	r6, r3
 80029f0:	da0d      	bge.n	8002a0e <__swhatbuf_r+0x2e>
 80029f2:	89a3      	ldrh	r3, [r4, #12]
 80029f4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80029f8:	f04f 0100 	mov.w	r1, #0
 80029fc:	bf14      	ite	ne
 80029fe:	2340      	movne	r3, #64	@ 0x40
 8002a00:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8002a04:	2000      	movs	r0, #0
 8002a06:	6031      	str	r1, [r6, #0]
 8002a08:	602b      	str	r3, [r5, #0]
 8002a0a:	b016      	add	sp, #88	@ 0x58
 8002a0c:	bd70      	pop	{r4, r5, r6, pc}
 8002a0e:	466a      	mov	r2, sp
 8002a10:	f000 f848 	bl	8002aa4 <_fstat_r>
 8002a14:	2800      	cmp	r0, #0
 8002a16:	dbec      	blt.n	80029f2 <__swhatbuf_r+0x12>
 8002a18:	9901      	ldr	r1, [sp, #4]
 8002a1a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8002a1e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8002a22:	4259      	negs	r1, r3
 8002a24:	4159      	adcs	r1, r3
 8002a26:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002a2a:	e7eb      	b.n	8002a04 <__swhatbuf_r+0x24>

08002a2c <__smakebuf_r>:
 8002a2c:	898b      	ldrh	r3, [r1, #12]
 8002a2e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002a30:	079d      	lsls	r5, r3, #30
 8002a32:	4606      	mov	r6, r0
 8002a34:	460c      	mov	r4, r1
 8002a36:	d507      	bpl.n	8002a48 <__smakebuf_r+0x1c>
 8002a38:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8002a3c:	6023      	str	r3, [r4, #0]
 8002a3e:	6123      	str	r3, [r4, #16]
 8002a40:	2301      	movs	r3, #1
 8002a42:	6163      	str	r3, [r4, #20]
 8002a44:	b003      	add	sp, #12
 8002a46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a48:	ab01      	add	r3, sp, #4
 8002a4a:	466a      	mov	r2, sp
 8002a4c:	f7ff ffc8 	bl	80029e0 <__swhatbuf_r>
 8002a50:	9f00      	ldr	r7, [sp, #0]
 8002a52:	4605      	mov	r5, r0
 8002a54:	4639      	mov	r1, r7
 8002a56:	4630      	mov	r0, r6
 8002a58:	f7ff faea 	bl	8002030 <_malloc_r>
 8002a5c:	b948      	cbnz	r0, 8002a72 <__smakebuf_r+0x46>
 8002a5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002a62:	059a      	lsls	r2, r3, #22
 8002a64:	d4ee      	bmi.n	8002a44 <__smakebuf_r+0x18>
 8002a66:	f023 0303 	bic.w	r3, r3, #3
 8002a6a:	f043 0302 	orr.w	r3, r3, #2
 8002a6e:	81a3      	strh	r3, [r4, #12]
 8002a70:	e7e2      	b.n	8002a38 <__smakebuf_r+0xc>
 8002a72:	89a3      	ldrh	r3, [r4, #12]
 8002a74:	6020      	str	r0, [r4, #0]
 8002a76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002a7a:	81a3      	strh	r3, [r4, #12]
 8002a7c:	9b01      	ldr	r3, [sp, #4]
 8002a7e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8002a82:	b15b      	cbz	r3, 8002a9c <__smakebuf_r+0x70>
 8002a84:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002a88:	4630      	mov	r0, r6
 8002a8a:	f000 f81d 	bl	8002ac8 <_isatty_r>
 8002a8e:	b128      	cbz	r0, 8002a9c <__smakebuf_r+0x70>
 8002a90:	89a3      	ldrh	r3, [r4, #12]
 8002a92:	f023 0303 	bic.w	r3, r3, #3
 8002a96:	f043 0301 	orr.w	r3, r3, #1
 8002a9a:	81a3      	strh	r3, [r4, #12]
 8002a9c:	89a3      	ldrh	r3, [r4, #12]
 8002a9e:	431d      	orrs	r5, r3
 8002aa0:	81a5      	strh	r5, [r4, #12]
 8002aa2:	e7cf      	b.n	8002a44 <__smakebuf_r+0x18>

08002aa4 <_fstat_r>:
 8002aa4:	b538      	push	{r3, r4, r5, lr}
 8002aa6:	4d07      	ldr	r5, [pc, #28]	@ (8002ac4 <_fstat_r+0x20>)
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	4604      	mov	r4, r0
 8002aac:	4608      	mov	r0, r1
 8002aae:	4611      	mov	r1, r2
 8002ab0:	602b      	str	r3, [r5, #0]
 8002ab2:	f7ff f82f 	bl	8001b14 <_fstat>
 8002ab6:	1c43      	adds	r3, r0, #1
 8002ab8:	d102      	bne.n	8002ac0 <_fstat_r+0x1c>
 8002aba:	682b      	ldr	r3, [r5, #0]
 8002abc:	b103      	cbz	r3, 8002ac0 <_fstat_r+0x1c>
 8002abe:	6023      	str	r3, [r4, #0]
 8002ac0:	bd38      	pop	{r3, r4, r5, pc}
 8002ac2:	bf00      	nop
 8002ac4:	200001ec 	.word	0x200001ec

08002ac8 <_isatty_r>:
 8002ac8:	b538      	push	{r3, r4, r5, lr}
 8002aca:	4d06      	ldr	r5, [pc, #24]	@ (8002ae4 <_isatty_r+0x1c>)
 8002acc:	2300      	movs	r3, #0
 8002ace:	4604      	mov	r4, r0
 8002ad0:	4608      	mov	r0, r1
 8002ad2:	602b      	str	r3, [r5, #0]
 8002ad4:	f7ff f82d 	bl	8001b32 <_isatty>
 8002ad8:	1c43      	adds	r3, r0, #1
 8002ada:	d102      	bne.n	8002ae2 <_isatty_r+0x1a>
 8002adc:	682b      	ldr	r3, [r5, #0]
 8002ade:	b103      	cbz	r3, 8002ae2 <_isatty_r+0x1a>
 8002ae0:	6023      	str	r3, [r4, #0]
 8002ae2:	bd38      	pop	{r3, r4, r5, pc}
 8002ae4:	200001ec 	.word	0x200001ec

08002ae8 <_init>:
 8002ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002aea:	bf00      	nop
 8002aec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002aee:	bc08      	pop	{r3}
 8002af0:	469e      	mov	lr, r3
 8002af2:	4770      	bx	lr

08002af4 <_fini>:
 8002af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002af6:	bf00      	nop
 8002af8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002afa:	bc08      	pop	{r3}
 8002afc:	469e      	mov	lr, r3
 8002afe:	4770      	bx	lr
